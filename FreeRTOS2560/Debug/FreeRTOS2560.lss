
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800200  00002eac  00002f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180e  008002ec  008002ec  0000302c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00001248  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001b483  00000000  00000000  000042a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f90  00000000  00000000  0001f727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000803c  00000000  00000000  000226b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00004128  00000000  00000000  0002a6f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006e35  00000000  00000000  0002e81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015629  00000000  00000000  00035651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000012f0  00000000  00000000  0004ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c5       	rjmp	.+2786   	; 0xb18 <__vector_13>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c7       	rjmp	.+3588   	; 0xe56 <__vector_20>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__vector_23>
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_25>
      68:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__vector_36>
      94:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_37>
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_39>
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__vector_51>
      d0:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__vector_52>
      d4:	db c0       	rjmp	.+438    	; 0x28c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__vector_54>
      dc:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_55>
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	91 16       	cp	r9, r17
      e6:	95 16       	cp	r9, r21
      e8:	85 16       	cp	r8, r21
      ea:	8b 16       	cp	r8, r27
      ec:	da 16       	cp	r13, r26
      ee:	99 16       	cp	r9, r25
      f0:	9f 16       	cp	r9, r31
      f2:	a5 16       	cp	r10, r21
      f4:	ab 16       	cp	r10, r27
      f6:	b1 16       	cp	r11, r17
      f8:	b7 16       	cp	r11, r23
      fa:	bd 16       	cp	r11, r29
      fc:	c3 16       	cp	r12, r19
      fe:	da 16       	cp	r13, r26
     100:	c9 16       	cp	r12, r25
     102:	cf 16       	cp	r12, r31
     104:	d5 16       	cp	r13, r21

00000106 <__trampolines_end>:
     106:	00 00       	nop
     108:	09 0a       	sbc	r0, r25
     10a:	02 08       	sbc	r0, r2
     10c:	0b 0c       	add	r0, r11
     10e:	0d 07       	cpc	r16, r29
     110:	06 03       	mulsu	r16, r22
     112:	04 01       	movw	r0, r8
	...
     130:	00 00       	nop
     132:	11 10       	cpse	r1, r1
     134:	0f 00       	.word	0x000f	; ????
	...

0000014c <digital_pin_to_bit_mask_PGM>:
     14c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18c:	04 08 10 20 40 80                                   ... @.

00000192 <digital_pin_to_port_PGM>:
     192:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d2:	0b 0b 0b 0b 0b 0b                                   ......

000001d8 <port_to_input_PGM>:
     1d8:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1e8:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f2 <port_to_output_PGM>:
     1f2:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     202:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020c <port_to_mode_PGM>:
     20c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000226 <__ctors_start>:
     226:	1a 02       	muls	r17, r26
     228:	6e 10       	cpse	r6, r14
     22a:	cf 13       	cpse	r28, r31

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d1 e2       	ldi	r29, 0x21	; 33
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	12 e0       	ldi	r17, 0x02	; 2
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b2 e0       	ldi	r27, 0x02	; 2
     242:	ec ea       	ldi	r30, 0xAC	; 172
     244:	fe e2       	ldi	r31, 0x2E	; 46
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ac 3e       	cpi	r26, 0xEC	; 236
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	2a e1       	ldi	r18, 0x1A	; 26
     258:	ac ee       	ldi	r26, 0xEC	; 236
     25a:	b2 e0       	ldi	r27, 0x02	; 2
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	aa 3f       	cpi	r26, 0xFA	; 250
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	12 e0       	ldi	r17, 0x02	; 2
     268:	cc e2       	ldi	r28, 0x2C	; 44
     26a:	d2 e0       	ldi	r29, 0x02	; 2
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	06 c0       	rjmp	.+12     	; 0x27c <__do_global_ctors+0x16>
     270:	22 97       	sbiw	r28, 0x02	; 2
     272:	01 09       	sbc	r16, r1
     274:	fe 01       	movw	r30, r28
     276:	0b bf       	out	0x3b, r16	; 59
     278:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__tablejump_elpm__>
     27c:	c6 32       	cpi	r28, 0x26	; 38
     27e:	d1 07       	cpc	r29, r17
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 07       	cpc	r16, r24
     284:	a9 f7       	brne	.-22     	; 0x270 <__do_global_ctors+0xa>
     286:	90 d0       	rcall	.+288    	; 0x3a8 <main>
     288:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <_Z5task1Pv>:
			digitalWrite(motor1, HIGH);	// turn the motor on
			digitalWrite(motor2, HIGH);
		}
		else {
			digitalWrite(motor1, LOW);	// turn the motor off
			digitalWrite(motor2, LOW);
     28e:	c9 e3       	ldi	r28, 0x39	; 57
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	49 e1       	ldi	r20, 0x19	; 25
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 91 ec 02 	lds	r24, 0x02EC
     2a0:	90 91 ed 02 	lds	r25, 0x02ED
     2a4:	38 d7       	rcall	.+3696   	; 0x1116 <xQueueGenericReceive>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	51 f5       	brne	.+84     	; 0x2fe <_Z5task1Pv+0x70>
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	93 e0       	ldi	r25, 0x03	; 3
     2ae:	06 d4       	rcall	.+2060   	; 0xabc <_ZN7NewPing4pingEv>
     2b0:	8c 01       	movw	r16, r24
     2b2:	6a e0       	ldi	r22, 0x0A	; 10
     2b4:	72 e0       	ldi	r23, 0x02	; 2
     2b6:	8f ea       	ldi	r24, 0xAF	; 175
     2b8:	98 e1       	ldi	r25, 0x18	; 24
     2ba:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN5Print5printEPKc>
     2be:	c8 01       	movw	r24, r16
     2c0:	be 01       	movw	r22, r28
     2c2:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodhi4>
     2c6:	4a e0       	ldi	r20, 0x0A	; 10
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	8f ea       	ldi	r24, 0xAF	; 175
     2cc:	98 e1       	ldi	r25, 0x18	; 24
     2ce:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <_ZN5Print5printEji>
     2d2:	63 e1       	ldi	r22, 0x13	; 19
     2d4:	72 e0       	ldi	r23, 0x02	; 2
     2d6:	8f ea       	ldi	r24, 0xAF	; 175
     2d8:	98 e1       	ldi	r25, 0x18	; 24
     2da:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN5Print7printlnEPKc>
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 91 ec 02 	lds	r24, 0x02EC
     2ec:	90 91 ed 02 	lds	r25, 0x02ED
     2f0:	5d d6       	rcall	.+3258   	; 0xfac <xQueueGenericSend>
     2f2:	ef d4       	rcall	.+2526   	; 0xcd2 <vPortYield>
     2f4:	88 ee       	ldi	r24, 0xE8	; 232
     2f6:	93 e0       	ldi	r25, 0x03	; 3
     2f8:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskDelay>
     2fc:	ca cf       	rjmp	.-108    	; 0x292 <_Z5task1Pv+0x4>
     2fe:	66 e1       	ldi	r22, 0x16	; 22
     300:	72 e0       	ldi	r23, 0x02	; 2
     302:	8f ea       	ldi	r24, 0xAF	; 175
     304:	98 e1       	ldi	r25, 0x18	; 24
     306:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN5Print7printlnEPKc>
     30a:	ff cf       	rjmp	.-2      	; 0x30a <_Z5task1Pv+0x7c>

0000030c <_Z5task2Pv>:
     30c:	c9 e3       	ldi	r28, 0x39	; 57
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	49 e1       	ldi	r20, 0x19	; 25
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 91 ec 02 	lds	r24, 0x02EC
     31e:	90 91 ed 02 	lds	r25, 0x02ED
     322:	f9 d6       	rcall	.+3570   	; 0x1116 <xQueueGenericReceive>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	51 f5       	brne	.+84     	; 0x37c <_Z5task2Pv+0x70>
     328:	8e ee       	ldi	r24, 0xEE	; 238
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	c7 d3       	rcall	.+1934   	; 0xabc <_ZN7NewPing4pingEv>
     32e:	8c 01       	movw	r16, r24
     330:	63 e4       	ldi	r22, 0x43	; 67
     332:	72 e0       	ldi	r23, 0x02	; 2
     334:	8f ea       	ldi	r24, 0xAF	; 175
     336:	98 e1       	ldi	r25, 0x18	; 24
     338:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN5Print5printEPKc>
     33c:	c8 01       	movw	r24, r16
     33e:	be 01       	movw	r22, r28
     340:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodhi4>
     344:	4a e0       	ldi	r20, 0x0A	; 10
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	8f ea       	ldi	r24, 0xAF	; 175
     34a:	98 e1       	ldi	r25, 0x18	; 24
     34c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <_ZN5Print5printEji>
     350:	63 e1       	ldi	r22, 0x13	; 19
     352:	72 e0       	ldi	r23, 0x02	; 2
     354:	8f ea       	ldi	r24, 0xAF	; 175
     356:	98 e1       	ldi	r25, 0x18	; 24
     358:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN5Print7printlnEPKc>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 91 ec 02 	lds	r24, 0x02EC
     36a:	90 91 ed 02 	lds	r25, 0x02ED
     36e:	1e d6       	rcall	.+3132   	; 0xfac <xQueueGenericSend>
     370:	b0 d4       	rcall	.+2400   	; 0xcd2 <vPortYield>
     372:	88 ee       	ldi	r24, 0xE8	; 232
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskDelay>
     37a:	ca cf       	rjmp	.-108    	; 0x310 <_Z5task2Pv+0x4>
     37c:	6c e4       	ldi	r22, 0x4C	; 76
     37e:	72 e0       	ldi	r23, 0x02	; 2
     380:	8f ea       	ldi	r24, 0xAF	; 175
     382:	98 e1       	ldi	r25, 0x18	; 24
     384:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN5Print7printlnEPKc>
     388:	ff cf       	rjmp	.-2      	; 0x388 <_Z5task2Pv+0x7c>

0000038a <setup>:
     38a:	87 ef       	ldi	r24, 0xF7	; 247
     38c:	97 e1       	ldi	r25, 0x17	; 23
     38e:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5beginEv>
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	52 ec       	ldi	r21, 0xC2	; 194
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	8f ea       	ldi	r24, 0xAF	; 175
     39c:	98 e1       	ldi	r25, 0x18	; 24
     39e:	0e 94 4c 13 	call	0x2698	; 0x2698 <_ZN14HardwareSerial5beginEm>
     3a2:	82 e1       	ldi	r24, 0x12	; 18
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	b4 c2       	rjmp	.+1384   	; 0x910 <_ZN7MPU605010initializeEv>

000003a8 <main>:
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <main+0x14>
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	0e 94 19 16 	call	0x2c32	; 0x2c32 <init>
     3c6:	e1 df       	rcall	.-62     	; 0x38a <setup>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	7d d6       	rcall	.+3322   	; 0x10c6 <xQueueCreateMutex>
     3cc:	90 93 ed 02 	sts	0x02ED, r25
     3d0:	80 93 ec 02 	sts	0x02EC, r24
     3d4:	a1 2c       	mov	r10, r1
     3d6:	b1 2c       	mov	r11, r1
     3d8:	c1 2c       	mov	r12, r1
     3da:	d1 2c       	mov	r13, r1
     3dc:	ce 01       	movw	r24, r28
     3de:	03 96       	adiw	r24, 0x03	; 3
     3e0:	7c 01       	movw	r14, r24
     3e2:	01 e0       	ldi	r16, 0x01	; 1
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	58 e0       	ldi	r21, 0x08	; 8
     3ec:	6c ea       	ldi	r22, 0xAC	; 172
     3ee:	72 e0       	ldi	r23, 0x02	; 2
     3f0:	87 e4       	ldi	r24, 0x47	; 71
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	89 d7       	rcall	.+3858   	; 0x1308 <xTaskGenericCreate>
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	7c 01       	movw	r14, r24
     3fc:	02 e0       	ldi	r16, 0x02	; 2
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	58 e0       	ldi	r21, 0x08	; 8
     406:	69 eb       	ldi	r22, 0xB9	; 185
     408:	72 e0       	ldi	r23, 0x02	; 2
     40a:	86 e8       	ldi	r24, 0x86	; 134
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	7c d7       	rcall	.+3832   	; 0x1308 <xTaskGenericCreate>
     410:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <vTaskStartScheduler>
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	bf 90       	pop	r11
     430:	af 90       	pop	r10
     432:	08 95       	ret

00000434 <_GLOBAL__sub_I_accelgyro>:
#include "I2Cdev.h"
#include "MPU6050.h"
#include "Wire.h"

#include "NewPing.h"
MPU6050 accelgyro;
     434:	82 e1       	ldi	r24, 0x12	; 18
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	43 d2       	rcall	.+1158   	; 0x8c0 <_ZN7MPU6050C1Ev>
int motor2 = 9;


#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar1(TRIGGER_PIN1, ECHO_PIN1, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
     43a:	28 ec       	ldi	r18, 0xC8	; 200
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	4b e0       	ldi	r20, 0x0B	; 11
     440:	6c e0       	ldi	r22, 0x0C	; 12
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	74 d2       	rcall	.+1256   	; 0x930 <_ZN7NewPingC1Ehhi>
NewPing sonar2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
     448:	28 ec       	ldi	r18, 0xC8	; 200
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	47 e0       	ldi	r20, 0x07	; 7
     44e:	6a e0       	ldi	r22, 0x0A	; 10
     450:	8e ee       	ldi	r24, 0xEE	; 238
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	6d c2       	rjmp	.+1242   	; 0x930 <_ZN7NewPingC1Ehhi>

00000456 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     45c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     460:	80 91 21 03 	lds	r24, 0x0321
     464:	90 91 22 03 	lds	r25, 0x0322
     468:	89 2b       	or	r24, r25
     46a:	31 f4       	brne	.+12     	; 0x478 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     46c:	86 e2       	ldi	r24, 0x26	; 38
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	90 93 22 03 	sts	0x0322, r25
     474:	80 93 21 03 	sts	0x0321, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     478:	20 91 23 03 	lds	r18, 0x0323
     47c:	30 91 24 03 	lds	r19, 0x0324
     480:	ce 01       	movw	r24, r28
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
     486:	8f 3f       	cpi	r24, 0xFF	; 255
     488:	43 e1       	ldi	r20, 0x13	; 19
     48a:	94 07       	cpc	r25, r20
     48c:	70 f4       	brcc	.+28     	; 0x4aa <pvPortMalloc+0x54>
     48e:	28 17       	cp	r18, r24
     490:	39 07       	cpc	r19, r25
     492:	58 f4       	brcc	.+22     	; 0x4aa <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     494:	c0 91 21 03 	lds	r28, 0x0321
     498:	d0 91 22 03 	lds	r29, 0x0322
     49c:	c2 0f       	add	r28, r18
     49e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     4a0:	90 93 24 03 	sts	0x0324, r25
     4a4:	80 93 23 03 	sts	0x0323, r24
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <pvPortMalloc+0x58>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     4aa:	c0 e0       	ldi	r28, 0x00	; 0
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4ae:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4b2:	ce 01       	movw	r24, r28
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4ba:	08 95       	ret

000004bc <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	1f 92       	push	r1
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	06 2f       	mov	r16, r22
     4d2:	14 2f       	mov	r17, r20
     4d4:	68 2f       	mov	r22, r24
     4d6:	87 ef       	ldi	r24, 0xF7	; 247
     4d8:	97 e1       	ldi	r25, 0x17	; 23
     4da:	29 83       	std	Y+1, r18	; 0x01
     4dc:	3a 83       	std	Y+2, r19	; 0x02
     4de:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_ZN7TwoWire17beginTransmissionEh>
     4e2:	60 2f       	mov	r22, r16
     4e4:	87 ef       	ldi	r24, 0xF7	; 247
     4e6:	97 e1       	ldi	r25, 0x17	; 23
     4e8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
     4ec:	29 81       	ldd	r18, Y+1	; 0x01
     4ee:	02 2f       	mov	r16, r18
     4f0:	e2 2e       	mov	r14, r18
     4f2:	3a 81       	ldd	r19, Y+2	; 0x02
     4f4:	f3 2e       	mov	r15, r19
     4f6:	8e 2d       	mov	r24, r14
     4f8:	80 1b       	sub	r24, r16
     4fa:	81 17       	cp	r24, r17
     4fc:	40 f4       	brcc	.+16     	; 0x50e <_ZN6I2Cdev10writeBytesEhhhPh+0x52>
     4fe:	f7 01       	movw	r30, r14
     500:	61 91       	ld	r22, Z+
     502:	7f 01       	movw	r14, r30
     504:	87 ef       	ldi	r24, 0xF7	; 247
     506:	97 e1       	ldi	r25, 0x17	; 23
     508:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
     50c:	f4 cf       	rjmp	.-24     	; 0x4f6 <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
     50e:	87 ef       	ldi	r24, 0xF7	; 247
     510:	97 e1       	ldi	r25, 0x17	; 23
     512:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN7TwoWire15endTransmissionEv>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <_ZN6I2Cdev9writeByteEhhh>:
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	49 83       	std	Y+1, r20	; 0x01
     536:	9e 01       	movw	r18, r28
     538:	2f 5f       	subi	r18, 0xFF	; 255
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	be df       	rcall	.-132    	; 0x4bc <_ZN6I2Cdev10writeBytesEhhhPh>
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_ZN6I2Cdev9readBytesEhhhPhj>:
     548:	3f 92       	push	r3
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	8f 92       	push	r8
     554:	9f 92       	push	r9
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     56c:	00 d0       	rcall	.+0      	; 0x56e <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	68 2e       	mov	r6, r24
     574:	56 2e       	mov	r5, r22
     576:	74 2e       	mov	r7, r20
     578:	3a 83       	std	Y+2, r19	; 0x02
     57a:	29 83       	std	Y+1, r18	; 0x01
     57c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <millis>
     580:	6b 01       	movw	r12, r22
     582:	7c 01       	movw	r14, r24
     584:	31 2c       	mov	r3, r1
     586:	41 2c       	mov	r4, r1
     588:	87 2d       	mov	r24, r7
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9c 83       	std	Y+4, r25	; 0x04
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	48 01       	movw	r8, r16
     592:	a1 2c       	mov	r10, r1
     594:	b1 2c       	mov	r11, r1
     596:	37 14       	cp	r3, r7
     598:	b0 f5       	brcc	.+108    	; 0x606 <_ZN6I2Cdev9readBytesEhhhPhj+0xbe>
     59a:	66 2d       	mov	r22, r6
     59c:	87 ef       	ldi	r24, 0xF7	; 247
     59e:	97 e1       	ldi	r25, 0x17	; 23
     5a0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_ZN7TwoWire17beginTransmissionEh>
     5a4:	65 2d       	mov	r22, r5
     5a6:	87 ef       	ldi	r24, 0xF7	; 247
     5a8:	97 e1       	ldi	r25, 0x17	; 23
     5aa:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
     5ae:	87 ef       	ldi	r24, 0xF7	; 247
     5b0:	97 e1       	ldi	r25, 0x17	; 23
     5b2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN7TwoWire15endTransmissionEv>
     5b6:	66 2d       	mov	r22, r6
     5b8:	87 ef       	ldi	r24, 0xF7	; 247
     5ba:	97 e1       	ldi	r25, 0x17	; 23
     5bc:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_ZN7TwoWire17beginTransmissionEh>
     5c0:	4b 81       	ldd	r20, Y+3	; 0x03
     5c2:	5c 81       	ldd	r21, Y+4	; 0x04
     5c4:	43 19       	sub	r20, r3
     5c6:	51 09       	sbc	r21, r1
     5c8:	41 32       	cpi	r20, 0x21	; 33
     5ca:	51 05       	cpc	r21, r1
     5cc:	14 f0       	brlt	.+4      	; 0x5d2 <_ZN6I2Cdev9readBytesEhhhPhj+0x8a>
     5ce:	40 e2       	ldi	r20, 0x20	; 32
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	66 2d       	mov	r22, r6
     5d4:	87 ef       	ldi	r24, 0xF7	; 247
     5d6:	97 e1       	ldi	r25, 0x17	; 23
     5d8:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7TwoWire11requestFromEhh>
     5dc:	87 ef       	ldi	r24, 0xF7	; 247
     5de:	97 e1       	ldi	r25, 0x17	; 23
     5e0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN7TwoWire9availableEv>
     5e4:	89 2b       	or	r24, r25
     5e6:	59 f1       	breq	.+86     	; 0x63e <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     5e8:	01 15       	cp	r16, r1
     5ea:	11 05       	cpc	r17, r1
     5ec:	99 f1       	breq	.+102    	; 0x654 <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     5ee:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <millis>
     5f2:	6c 19       	sub	r22, r12
     5f4:	7d 09       	sbc	r23, r13
     5f6:	8e 09       	sbc	r24, r14
     5f8:	9f 09       	sbc	r25, r15
     5fa:	68 15       	cp	r22, r8
     5fc:	79 05       	cpc	r23, r9
     5fe:	8a 05       	cpc	r24, r10
     600:	9b 05       	cpc	r25, r11
     602:	40 f1       	brcs	.+80     	; 0x654 <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     604:	1c c0       	rjmp	.+56     	; 0x63e <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     606:	01 15       	cp	r16, r1
     608:	11 05       	cpc	r17, r1
     60a:	a9 f1       	breq	.+106    	; 0x676 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     60c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <millis>
     610:	6c 19       	sub	r22, r12
     612:	7d 09       	sbc	r23, r13
     614:	8e 09       	sbc	r24, r14
     616:	9f 09       	sbc	r25, r15
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	60 17       	cp	r22, r16
     61e:	71 07       	cpc	r23, r17
     620:	82 07       	cpc	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	40 f1       	brcs	.+80     	; 0x676 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     626:	87 2d       	mov	r24, r7
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	24 2d       	mov	r18, r4
     62c:	33 27       	eor	r19, r19
     62e:	27 fd       	sbrc	r18, 7
     630:	30 95       	com	r19
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	fc f4       	brge	.+62     	; 0x676 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     638:	44 24       	eor	r4, r4
     63a:	4a 94       	dec	r4
     63c:	1c c0       	rjmp	.+56     	; 0x676 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     63e:	87 ef       	ldi	r24, 0xF7	; 247
     640:	97 e1       	ldi	r25, 0x17	; 23
     642:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN7TwoWire15endTransmissionEv>
     646:	87 2d       	mov	r24, r7
     648:	90 e2       	ldi	r25, 0x20	; 32
     64a:	97 15       	cp	r25, r7
     64c:	08 f4       	brcc	.+2      	; 0x650 <_ZN6I2Cdev9readBytesEhhhPhj+0x108>
     64e:	80 e2       	ldi	r24, 0x20	; 32
     650:	38 0e       	add	r3, r24
     652:	a1 cf       	rjmp	.-190    	; 0x596 <_ZN6I2Cdev9readBytesEhhhPhj+0x4e>
     654:	e9 81       	ldd	r30, Y+1	; 0x01
     656:	fa 81       	ldd	r31, Y+2	; 0x02
     658:	e4 0d       	add	r30, r4
     65a:	f1 1d       	adc	r31, r1
     65c:	47 fc       	sbrc	r4, 7
     65e:	fa 95       	dec	r31
     660:	fe 83       	std	Y+6, r31	; 0x06
     662:	ed 83       	std	Y+5, r30	; 0x05
     664:	87 ef       	ldi	r24, 0xF7	; 247
     666:	97 e1       	ldi	r25, 0x17	; 23
     668:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7TwoWire4readEv>
     66c:	ed 81       	ldd	r30, Y+5	; 0x05
     66e:	fe 81       	ldd	r31, Y+6	; 0x06
     670:	80 83       	st	Z, r24
     672:	43 94       	inc	r4
     674:	b3 cf       	rjmp	.-154    	; 0x5dc <_ZN6I2Cdev9readBytesEhhhPhj+0x94>
     676:	84 2d       	mov	r24, r4
     678:	26 96       	adiw	r28, 0x06	; 6
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	08 95       	ret

000006a8 <_ZN6I2Cdev8readByteEhhPhj>:
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	89 01       	movw	r16, r18
     6ae:	9a 01       	movw	r18, r20
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	4a df       	rcall	.-364    	; 0x548 <_ZN6I2Cdev9readBytesEhhhPhj>
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	08 95       	ret

000006ba <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	1f 92       	push	r1
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	18 2f       	mov	r17, r24
     6ce:	06 2f       	mov	r16, r22
     6d0:	f4 2e       	mov	r15, r20
     6d2:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     6d4:	20 91 06 02 	lds	r18, 0x0206
     6d8:	30 91 07 02 	lds	r19, 0x0207
     6dc:	ae 01       	movw	r20, r28
     6de:	4f 5f       	subi	r20, 0xFF	; 255
     6e0:	5f 4f       	sbci	r21, 0xFF	; 255
     6e2:	e2 df       	rcall	.-60     	; 0x6a8 <_ZN6I2Cdev8readByteEhhPhj>
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	0f 2c       	mov	r0, r15
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <_ZN6I2Cdev8writeBitEhhhh+0x36>
     6ee:	22 0f       	add	r18, r18
     6f0:	0a 94       	dec	r0
     6f2:	ea f7       	brpl	.-6      	; 0x6ee <_ZN6I2Cdev8writeBitEhhhh+0x34>
     6f4:	ee 20       	and	r14, r14
     6f6:	19 f0       	breq	.+6      	; 0x6fe <_ZN6I2Cdev8writeBitEhhhh+0x44>
     6f8:	48 2f       	mov	r20, r24
     6fa:	42 2b       	or	r20, r18
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
     6fe:	42 2f       	mov	r20, r18
     700:	40 95       	com	r20
     702:	48 23       	and	r20, r24
     704:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     706:	60 2f       	mov	r22, r16
     708:	81 2f       	mov	r24, r17
     70a:	0f df       	rcall	.-482    	; 0x52a <_ZN6I2Cdev9writeByteEhhh>
}
     70c:	0f 90       	pop	r0
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	1f 92       	push	r1
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	f8 2e       	mov	r15, r24
     732:	e6 2e       	mov	r14, r22
     734:	d4 2e       	mov	r13, r20
     736:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     738:	20 91 06 02 	lds	r18, 0x0206
     73c:	30 91 07 02 	lds	r19, 0x0207
     740:	ae 01       	movw	r20, r28
     742:	4f 5f       	subi	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	b0 df       	rcall	.-160    	; 0x6a8 <_ZN6I2Cdev8readByteEhhPhj>
     748:	88 23       	and	r24, r24
     74a:	11 f1       	breq	.+68     	; 0x790 <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     74c:	4d 2d       	mov	r20, r13
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	41 1b       	sub	r20, r17
     752:	51 09       	sbc	r21, r1
     754:	4f 5f       	subi	r20, 0xFF	; 255
     756:	5f 4f       	sbci	r21, 0xFF	; 255
     758:	e1 e0       	ldi	r30, 0x01	; 1
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	1a 95       	dec	r17
     764:	e2 f7       	brpl	.-8      	; 0x75e <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
     766:	31 97       	sbiw	r30, 0x01	; 1
     768:	04 2e       	mov	r0, r20
     76a:	01 c0       	rjmp	.+2      	; 0x76e <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
     76c:	ee 0f       	add	r30, r30
     76e:	0a 94       	dec	r0
     770:	ea f7       	brpl	.-6      	; 0x76c <_ZN6I2Cdev9writeBitsEhhhhh+0x50>
        data <<= (bitStart - length + 1); // shift data into correct position
     772:	01 c0       	rjmp	.+2      	; 0x776 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     774:	00 0f       	add	r16, r16
     776:	4a 95       	dec	r20
     778:	ea f7       	brpl	.-6      	; 0x774 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     77a:	4e 2f       	mov	r20, r30
     77c:	40 95       	com	r20
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	48 23       	and	r20, r24
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     782:	e0 23       	and	r30, r16
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     784:	4e 2b       	or	r20, r30
     786:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     788:	6e 2d       	mov	r22, r14
     78a:	8f 2d       	mov	r24, r15
     78c:	ce de       	rcall	.-612    	; 0x52a <_ZN6I2Cdev9writeByteEhhh>
     78e:	01 c0       	rjmp	.+2      	; 0x792 <_ZN6I2Cdev9writeBitsEhhhhh+0x76>
    } else {
        return false;
     790:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	08 95       	ret

000007a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     7a4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7a6:	03 96       	adiw	r24, 0x03	; 3
     7a8:	92 83       	std	Z+2, r25	; 0x02
     7aa:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7ac:	2f ef       	ldi	r18, 0xFF	; 255
     7ae:	3f ef       	ldi	r19, 0xFF	; 255
     7b0:	34 83       	std	Z+4, r19	; 0x04
     7b2:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7b4:	96 83       	std	Z+6, r25	; 0x06
     7b6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7b8:	90 87       	std	Z+8, r25	; 0x08
     7ba:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     7bc:	10 82       	st	Z, r1
     7be:	08 95       	ret

000007c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     7c0:	fc 01       	movw	r30, r24
     7c2:	11 86       	std	Z+9, r1	; 0x09
     7c4:	10 86       	std	Z+8, r1	; 0x08
     7c6:	08 95       	ret

000007c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	9c 01       	movw	r18, r24
     7ce:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     7d0:	dc 01       	movw	r26, r24
     7d2:	11 96       	adiw	r26, 0x01	; 1
     7d4:	cd 91       	ld	r28, X+
     7d6:	dc 91       	ld	r29, X
     7d8:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     7da:	d3 83       	std	Z+3, r29	; 0x03
     7dc:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     7de:	8c 81       	ldd	r24, Y+4	; 0x04
     7e0:	9d 81       	ldd	r25, Y+5	; 0x05
     7e2:	95 83       	std	Z+5, r25	; 0x05
     7e4:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     7e6:	8c 81       	ldd	r24, Y+4	; 0x04
     7e8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ea:	dc 01       	movw	r26, r24
     7ec:	13 96       	adiw	r26, 0x03	; 3
     7ee:	7c 93       	st	X, r23
     7f0:	6e 93       	st	-X, r22
     7f2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     7f4:	7d 83       	std	Y+5, r23	; 0x05
     7f6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7f8:	31 87       	std	Z+9, r19	; 0x09
     7fa:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     7fc:	f9 01       	movw	r30, r18
     7fe:	80 81       	ld	r24, Z
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 83       	st	Z, r24
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	8c 01       	movw	r16, r24
     814:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     816:	20 81       	ld	r18, Z
     818:	31 81       	ldd	r19, Z+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     81a:	2f 3f       	cpi	r18, 0xFF	; 255
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	38 07       	cpc	r19, r24
     820:	21 f4       	brne	.+8      	; 0x82a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     822:	e8 01       	movw	r28, r16
     824:	af 81       	ldd	r26, Y+7	; 0x07
     826:	b8 85       	ldd	r27, Y+8	; 0x08
     828:	0e c0       	rjmp	.+28     	; 0x846 <vListInsert+0x3c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     82a:	d8 01       	movw	r26, r16
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	12 96       	adiw	r26, 0x02	; 2
     830:	8d 91       	ld	r24, X+
     832:	9c 91       	ld	r25, X
     834:	13 97       	sbiw	r26, 0x03	; 3
     836:	ec 01       	movw	r28, r24
     838:	48 81       	ld	r20, Y
     83a:	59 81       	ldd	r21, Y+1	; 0x01
     83c:	24 17       	cp	r18, r20
     83e:	35 07       	cpc	r19, r21
     840:	10 f0       	brcs	.+4      	; 0x846 <vListInsert+0x3c>
     842:	dc 01       	movw	r26, r24
     844:	f4 cf       	rjmp	.-24     	; 0x82e <vListInsert+0x24>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	13 97       	sbiw	r26, 0x03	; 3
     84e:	93 83       	std	Z+3, r25	; 0x03
     850:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     852:	ec 01       	movw	r28, r24
     854:	fd 83       	std	Y+5, r31	; 0x05
     856:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     858:	b5 83       	std	Z+5, r27	; 0x05
     85a:	a4 83       	std	Z+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     85c:	13 96       	adiw	r26, 0x03	; 3
     85e:	fc 93       	st	X, r31
     860:	ee 93       	st	-X, r30
     862:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     864:	11 87       	std	Z+9, r17	; 0x09
     866:	00 87       	std	Z+8, r16	; 0x08

	( pxList->uxNumberOfItems )++;
     868:	f8 01       	movw	r30, r16
     86a:	80 81       	ld	r24, Z
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	80 83       	st	Z, r24
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     880:	a0 85       	ldd	r26, Z+8	; 0x08
     882:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     884:	82 81       	ldd	r24, Z+2	; 0x02
     886:	93 81       	ldd	r25, Z+3	; 0x03
     888:	24 81       	ldd	r18, Z+4	; 0x04
     88a:	35 81       	ldd	r19, Z+5	; 0x05
     88c:	ec 01       	movw	r28, r24
     88e:	3d 83       	std	Y+5, r19	; 0x05
     890:	2c 83       	std	Y+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     892:	c4 81       	ldd	r28, Z+4	; 0x04
     894:	d5 81       	ldd	r29, Z+5	; 0x05
     896:	9b 83       	std	Y+3, r25	; 0x03
     898:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	8d 91       	ld	r24, X+
     89e:	9c 91       	ld	r25, X
     8a0:	12 97       	sbiw	r26, 0x02	; 2
     8a2:	8e 17       	cp	r24, r30
     8a4:	9f 07       	cpc	r25, r31
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8a8:	12 96       	adiw	r26, 0x02	; 2
     8aa:	dc 93       	st	X, r29
     8ac:	ce 93       	st	-X, r28
     8ae:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     8b0:	11 86       	std	Z+9, r1	; 0x09
     8b2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     8b4:	8c 91       	ld	r24, X
     8b6:	81 50       	subi	r24, 0x01	; 1
     8b8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <_ZN7MPU6050C1Ev>:
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
uint8_t MPU6050::getClockSource() {
    I2Cdev::readBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, buffer);
    return buffer[0];
}
     8c0:	28 e6       	ldi	r18, 0x68	; 104
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	08 95       	ret

000008c8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
     8c8:	0f 93       	push	r16
     8ca:	06 2f       	mov	r16, r22
     8cc:	22 e0       	ldi	r18, 0x02	; 2
     8ce:	44 e0       	ldi	r20, 0x04	; 4
     8d0:	6b e1       	ldi	r22, 0x1B	; 27
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	22 df       	rcall	.-444    	; 0x71c <_ZN6I2Cdev9writeBitsEhhhhh>
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <_ZN7MPU605022setFullScaleAccelRangeEh>:
     8dc:	0f 93       	push	r16
     8de:	06 2f       	mov	r16, r22
     8e0:	22 e0       	ldi	r18, 0x02	; 2
     8e2:	44 e0       	ldi	r20, 0x04	; 4
     8e4:	6c e1       	ldi	r22, 0x1C	; 28
     8e6:	fc 01       	movw	r30, r24
     8e8:	80 81       	ld	r24, Z
     8ea:	18 df       	rcall	.-464    	; 0x71c <_ZN6I2Cdev9writeBitsEhhhhh>
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <_ZN7MPU605015setSleepEnabledEb>:
     8f0:	26 2f       	mov	r18, r22
     8f2:	46 e0       	ldi	r20, 0x06	; 6
     8f4:	6b e6       	ldi	r22, 0x6B	; 107
     8f6:	fc 01       	movw	r30, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	df ce       	rjmp	.-578    	; 0x6ba <_ZN6I2Cdev8writeBitEhhhh>

000008fc <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
     8fc:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
     8fe:	06 2f       	mov	r16, r22
     900:	23 e0       	ldi	r18, 0x03	; 3
     902:	42 e0       	ldi	r20, 0x02	; 2
     904:	6b e6       	ldi	r22, 0x6B	; 107
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	08 df       	rcall	.-496    	; 0x71c <_ZN6I2Cdev9writeBitsEhhhhh>
}
     90c:	0f 91       	pop	r16
     90e:	08 95       	ret

00000910 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	f1 df       	rcall	.-30     	; 0x8fc <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	ce 01       	movw	r24, r28
     91e:	d4 df       	rcall	.-88     	; 0x8c8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	ce 01       	movw	r24, r28
     924:	db df       	rcall	.-74     	; 0x8dc <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	ce 01       	movw	r24, r28
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
 */
void MPU6050::initialize() {
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     92e:	e0 cf       	rjmp	.-64     	; 0x8f0 <_ZN7MPU605015setSleepEnabledEb>

00000930 <_ZN7NewPingC1Ehhi>:
	TIMSK4 = (1<<TOIE4); // Enable Timer4 interrupt.
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
#endif
}
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	dc 01       	movw	r26, r24
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	fb 01       	movw	r30, r22
     93a:	e4 5b       	subi	r30, 0xB4	; 180
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	e4 91       	lpm	r30, Z
     940:	14 96       	adiw	r26, 0x04	; 4
     942:	ec 93       	st	X, r30
     944:	14 97       	sbiw	r26, 0x04	; 4
     946:	84 2f       	mov	r24, r20
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	e4 5b       	subi	r30, 0xB4	; 180
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	e4 91       	lpm	r30, Z
     952:	15 96       	adiw	r26, 0x05	; 5
     954:	ec 93       	st	X, r30
     956:	15 97       	sbiw	r26, 0x05	; 5
     958:	6e 56       	subi	r22, 0x6E	; 110
     95a:	7e 4f       	sbci	r23, 0xFE	; 254
     95c:	fb 01       	movw	r30, r22
     95e:	c4 91       	lpm	r28, Z
     960:	d0 e0       	ldi	r29, 0x00	; 0
     962:	cc 0f       	add	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	ce 50       	subi	r28, 0x0E	; 14
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	fe 01       	movw	r30, r28
     96c:	45 91       	lpm	r20, Z+
     96e:	54 91       	lpm	r21, Z
     970:	17 96       	adiw	r26, 0x07	; 7
     972:	5c 93       	st	X, r21
     974:	4e 93       	st	-X, r20
     976:	16 97       	sbiw	r26, 0x06	; 6
     978:	fc 01       	movw	r30, r24
     97a:	ee 56       	subi	r30, 0x6E	; 110
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	84 91       	lpm	r24, Z
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	88 52       	subi	r24, 0x28	; 40
     988:	9e 4f       	sbci	r25, 0xFE	; 254
     98a:	fc 01       	movw	r30, r24
     98c:	45 91       	lpm	r20, Z+
     98e:	54 91       	lpm	r21, Z
     990:	1b 96       	adiw	r26, 0x0b	; 11
     992:	5c 93       	st	X, r21
     994:	4e 93       	st	-X, r20
     996:	1a 97       	sbiw	r26, 0x0a	; 10
     998:	fb 01       	movw	r30, r22
     99a:	64 91       	lpm	r22, Z
     99c:	e6 2f       	mov	r30, r22
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	e4 5f       	subi	r30, 0xF4	; 244
     9a6:	fd 4f       	sbci	r31, 0xFD	; 253
     9a8:	85 91       	lpm	r24, Z+
     9aa:	94 91       	lpm	r25, Z
     9ac:	19 96       	adiw	r26, 0x09	; 9
     9ae:	9c 93       	st	X, r25
     9b0:	8e 93       	st	-X, r24
     9b2:	18 97       	sbiw	r26, 0x08	; 8
     9b4:	c9 01       	movw	r24, r18
     9b6:	25 3f       	cpi	r18, 0xF5	; 245
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	3f 07       	cpc	r19, r31
     9bc:	14 f0       	brlt	.+4      	; 0x9c2 <_ZN7NewPingC1Ehhi+0x92>
     9be:	84 ef       	ldi	r24, 0xF4	; 244
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	49 e3       	ldi	r20, 0x39	; 57
     9c4:	48 9f       	mul	r20, r24
     9c6:	90 01       	movw	r18, r0
     9c8:	49 9f       	mul	r20, r25
     9ca:	30 0d       	add	r19, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	24 5e       	subi	r18, 0xE4	; 228
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	1d 96       	adiw	r26, 0x0d	; 13
     9d4:	3c 93       	st	X, r19
     9d6:	2e 93       	st	-X, r18
     9d8:	1c 97       	sbiw	r26, 0x0c	; 12
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <_ZN7NewPing12ping_triggerEv>:
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
     9ea:	e8 85       	ldd	r30, Y+8	; 0x08
     9ec:	f9 85       	ldd	r31, Y+9	; 0x09
     9ee:	80 81       	ld	r24, Z
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	89 2b       	or	r24, r25
     9f4:	80 83       	st	Z, r24
     9f6:	ee 81       	ldd	r30, Y+6	; 0x06
     9f8:	ff 81       	ldd	r31, Y+7	; 0x07
     9fa:	90 81       	ld	r25, Z
     9fc:	8c 81       	ldd	r24, Y+4	; 0x04
     9fe:	80 95       	com	r24
     a00:	89 23       	and	r24, r25
     a02:	80 83       	st	Z, r24
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <delayMicroseconds>
     a0c:	ee 81       	ldd	r30, Y+6	; 0x06
     a0e:	ff 81       	ldd	r31, Y+7	; 0x07
     a10:	80 81       	ld	r24, Z
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	89 2b       	or	r24, r25
     a16:	80 83       	st	Z, r24
     a18:	8a e0       	ldi	r24, 0x0A	; 10
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <delayMicroseconds>
     a20:	ee 81       	ldd	r30, Y+6	; 0x06
     a22:	ff 81       	ldd	r31, Y+7	; 0x07
     a24:	90 81       	ld	r25, Z
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	80 95       	com	r24
     a2a:	89 23       	and	r24, r25
     a2c:	80 83       	st	Z, r24
     a2e:	e8 85       	ldd	r30, Y+8	; 0x08
     a30:	f9 85       	ldd	r31, Y+9	; 0x09
     a32:	90 81       	ld	r25, Z
     a34:	8c 81       	ldd	r24, Y+4	; 0x04
     a36:	80 95       	com	r24
     a38:	89 23       	and	r24, r25
     a3a:	80 83       	st	Z, r24
     a3c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     a40:	60 5b       	subi	r22, 0xB0	; 176
     a42:	79 4b       	sbci	r23, 0xB9	; 185
     a44:	8f 4f       	sbci	r24, 0xFF	; 255
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	6e 87       	std	Y+14, r22	; 0x0e
     a4a:	7f 87       	std	Y+15, r23	; 0x0f
     a4c:	88 8b       	std	Y+16, r24	; 0x10
     a4e:	99 8b       	std	Y+17, r25	; 0x11
     a50:	ea 85       	ldd	r30, Y+10	; 0x0a
     a52:	fb 85       	ldd	r31, Y+11	; 0x0b
     a54:	80 81       	ld	r24, Z
     a56:	9d 81       	ldd	r25, Y+5	; 0x05
     a58:	89 23       	and	r24, r25
     a5a:	59 f0       	breq	.+22     	; 0xa72 <_ZN7NewPing12ping_triggerEv+0x92>
     a5c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     a60:	0e 85       	ldd	r16, Y+14	; 0x0e
     a62:	1f 85       	ldd	r17, Y+15	; 0x0f
     a64:	28 89       	ldd	r18, Y+16	; 0x10
     a66:	39 89       	ldd	r19, Y+17	; 0x11
     a68:	06 17       	cp	r16, r22
     a6a:	17 07       	cpc	r17, r23
     a6c:	28 07       	cpc	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	78 f7       	brcc	.-34     	; 0xa50 <_ZN7NewPing12ping_triggerEv+0x70>
     a72:	ea 85       	ldd	r30, Y+10	; 0x0a
     a74:	fb 85       	ldd	r31, Y+11	; 0x0b
     a76:	80 81       	ld	r24, Z
     a78:	9d 81       	ldd	r25, Y+5	; 0x05
     a7a:	89 23       	and	r24, r25
     a7c:	69 f4       	brne	.+26     	; 0xa98 <_ZN7NewPing12ping_triggerEv+0xb8>
     a7e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     a82:	0e 85       	ldd	r16, Y+14	; 0x0e
     a84:	1f 85       	ldd	r17, Y+15	; 0x0f
     a86:	28 89       	ldd	r18, Y+16	; 0x10
     a88:	39 89       	ldd	r19, Y+17	; 0x11
     a8a:	06 17       	cp	r16, r22
     a8c:	17 07       	cpc	r17, r23
     a8e:	28 07       	cpc	r18, r24
     a90:	39 07       	cpc	r19, r25
     a92:	78 f7       	brcc	.-34     	; 0xa72 <_ZN7NewPing12ping_triggerEv+0x92>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0d c0       	rjmp	.+26     	; 0xab2 <_ZN7NewPing12ping_triggerEv+0xd2>
     a98:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     a9c:	2c 85       	ldd	r18, Y+12	; 0x0c
     a9e:	3d 85       	ldd	r19, Y+13	; 0x0d
     aa0:	62 0f       	add	r22, r18
     aa2:	73 1f       	adc	r23, r19
     aa4:	81 1d       	adc	r24, r1
     aa6:	91 1d       	adc	r25, r1
     aa8:	6e 87       	std	Y+14, r22	; 0x0e
     aaa:	7f 87       	std	Y+15, r23	; 0x0f
     aac:	88 8b       	std	Y+16, r24	; 0x10
     aae:	99 8b       	std	Y+17, r25	; 0x11
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <_ZN7NewPing4pingEv>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24
     ac6:	8c df       	rcall	.-232    	; 0x9e0 <_ZN7NewPing12ping_triggerEv>
     ac8:	88 23       	and	r24, r24
     aca:	89 f0       	breq	.+34     	; 0xaee <_ZN7NewPing4pingEv+0x32>
     acc:	ea 85       	ldd	r30, Y+10	; 0x0a
     ace:	fb 85       	ldd	r31, Y+11	; 0x0b
     ad0:	80 81       	ld	r24, Z
     ad2:	9d 81       	ldd	r25, Y+5	; 0x05
     ad4:	89 23       	and	r24, r25
     ad6:	71 f0       	breq	.+28     	; 0xaf4 <_ZN7NewPing4pingEv+0x38>
     ad8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     adc:	0e 85       	ldd	r16, Y+14	; 0x0e
     ade:	1f 85       	ldd	r17, Y+15	; 0x0f
     ae0:	28 89       	ldd	r18, Y+16	; 0x10
     ae2:	39 89       	ldd	r19, Y+17	; 0x11
     ae4:	06 17       	cp	r16, r22
     ae6:	17 07       	cpc	r17, r23
     ae8:	28 07       	cpc	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	78 f7       	brcc	.-34     	; 0xacc <_ZN7NewPing4pingEv+0x10>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	0c c0       	rjmp	.+24     	; 0xb0c <_ZN7NewPing4pingEv+0x50>
     af4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <micros>
     af8:	2c 85       	ldd	r18, Y+12	; 0x0c
     afa:	3d 85       	ldd	r19, Y+13	; 0x0d
     afc:	25 50       	subi	r18, 0x05	; 5
     afe:	31 09       	sbc	r19, r1
     b00:	4e 85       	ldd	r20, Y+14	; 0x0e
     b02:	5f 85       	ldd	r21, Y+15	; 0x0f
     b04:	24 1b       	sub	r18, r20
     b06:	35 0b       	sbc	r19, r21
     b08:	26 0f       	add	r18, r22
     b0a:	37 1f       	adc	r19, r23
     b0c:	c9 01       	movw	r24, r18
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <__vector_13>:


#if defined (__AVR_ATmega32U4__) // Use Timer4 for ATmega32U4 (Teensy/Leonardo).
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_COMPA_vect) {
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	0b b6       	in	r0, 0x3b	; 59
     b24:	0f 92       	push	r0
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	4f 93       	push	r20
     b2c:	5f 93       	push	r21
     b2e:	6f 93       	push	r22
     b30:	7f 93       	push	r23
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
#endif
	if(intFunc) intFunc(); // If wrapped function is set, call it.
     b3e:	e0 91 25 17 	lds	r30, 0x1725
     b42:	f0 91 26 17 	lds	r31, 0x1726
     b46:	30 97       	sbiw	r30, 0x00	; 0
     b48:	09 f0       	breq	.+2      	; 0xb4c <__vector_13+0x34>
     b4a:	19 95       	eicall
}
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	0f 90       	pop	r0
     b66:	0b be       	out	0x3b, r0	; 59
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b72:	31 e1       	ldi	r19, 0x11	; 17
     b74:	fc 01       	movw	r30, r24
     b76:	30 83       	st	Z, r19
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	22 e2       	ldi	r18, 0x22	; 34
     b7c:	20 83       	st	Z, r18
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	a3 e3       	ldi	r26, 0x33	; 51
     b82:	a0 83       	st	Z, r26
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	60 83       	st	Z, r22
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	70 83       	st	Z, r23
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	10 82       	st	Z, r1
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	10 82       	st	Z, r1
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	60 e8       	ldi	r22, 0x80	; 128
     b98:	60 83       	st	Z, r22
     b9a:	31 97       	sbiw	r30, 0x01	; 1
     b9c:	10 82       	st	Z, r1
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	10 82       	st	Z, r1
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	10 82       	st	Z, r1
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	60 83       	st	Z, r22
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	63 e0       	ldi	r22, 0x03	; 3
     bb0:	60 83       	st	Z, r22
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	64 e0       	ldi	r22, 0x04	; 4
     bb6:	60 83       	st	Z, r22
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	65 e0       	ldi	r22, 0x05	; 5
     bbc:	60 83       	st	Z, r22
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	66 e0       	ldi	r22, 0x06	; 6
     bc2:	60 83       	st	Z, r22
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	60 83       	st	Z, r22
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	68 e0       	ldi	r22, 0x08	; 8
     bce:	60 83       	st	Z, r22
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	69 e0       	ldi	r22, 0x09	; 9
     bd4:	60 83       	st	Z, r22
     bd6:	31 97       	sbiw	r30, 0x01	; 1
     bd8:	60 e1       	ldi	r22, 0x10	; 16
     bda:	60 83       	st	Z, r22
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	30 83       	st	Z, r19
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	32 e1       	ldi	r19, 0x12	; 18
     be4:	30 83       	st	Z, r19
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	33 e1       	ldi	r19, 0x13	; 19
     bea:	30 83       	st	Z, r19
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	34 e1       	ldi	r19, 0x14	; 20
     bf0:	30 83       	st	Z, r19
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	35 e1       	ldi	r19, 0x15	; 21
     bf6:	30 83       	st	Z, r19
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	36 e1       	ldi	r19, 0x16	; 22
     bfc:	30 83       	st	Z, r19
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	37 e1       	ldi	r19, 0x17	; 23
     c02:	30 83       	st	Z, r19
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	38 e1       	ldi	r19, 0x18	; 24
     c08:	30 83       	st	Z, r19
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	39 e1       	ldi	r19, 0x19	; 25
     c0e:	30 83       	st	Z, r19
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	30 e2       	ldi	r19, 0x20	; 32
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	31 e2       	ldi	r19, 0x21	; 33
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	20 83       	st	Z, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	23 e2       	ldi	r18, 0x23	; 35
     c24:	20 83       	st	Z, r18
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	40 83       	st	Z, r20
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	50 83       	st	Z, r21
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	26 e2       	ldi	r18, 0x26	; 38
     c32:	20 83       	st	Z, r18
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	27 e2       	ldi	r18, 0x27	; 39
     c38:	20 83       	st	Z, r18
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	28 e2       	ldi	r18, 0x28	; 40
     c3e:	20 83       	st	Z, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	29 e2       	ldi	r18, 0x29	; 41
     c44:	20 83       	st	Z, r18
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	20 e3       	ldi	r18, 0x30	; 48
     c4a:	20 83       	st	Z, r18
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	21 e3       	ldi	r18, 0x31	; 49
     c50:	20 83       	st	Z, r18
     c52:	89 97       	sbiw	r24, 0x29	; 41
     c54:	08 95       	ret

00000c56 <xPortStartScheduler>:
     c56:	10 92 80 00 	sts	0x0080, r1
     c5a:	81 e1       	ldi	r24, 0x11	; 17
     c5c:	80 93 81 00 	sts	0x0081, r24
     c60:	80 e4       	ldi	r24, 0x40	; 64
     c62:	9f e1       	ldi	r25, 0x1F	; 31
     c64:	90 93 87 00 	sts	0x0087, r25
     c68:	80 93 86 00 	sts	0x0086, r24
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 6f 00 	sts	0x006F, r24
     c72:	a0 91 87 17 	lds	r26, 0x1787
     c76:	b0 91 88 17 	lds	r27, 0x1788
     c7a:	cd 91       	ld	r28, X+
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	dd 91       	ld	r29, X+
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	4f 90       	pop	r4
     cba:	3f 90       	pop	r3
     cbc:	2f 90       	pop	r2
     cbe:	1f 90       	pop	r1
     cc0:	0f 90       	pop	r0
     cc2:	0c be       	out	0x3c, r0	; 60
     cc4:	0f 90       	pop	r0
     cc6:	0b be       	out	0x3b, r0	; 59
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	08 95       	ret
     cd0:	08 95       	ret

00000cd2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	0f 92       	push	r0
     cda:	0c b6       	in	r0, 0x3c	; 60
     cdc:	0f 92       	push	r0
     cde:	0b b6       	in	r0, 0x3b	; 59
     ce0:	0f 92       	push	r0
     ce2:	1f 92       	push	r1
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 92       	push	r2
     ce8:	3f 92       	push	r3
     cea:	4f 92       	push	r4
     cec:	5f 92       	push	r5
     cee:	6f 92       	push	r6
     cf0:	7f 92       	push	r7
     cf2:	8f 92       	push	r8
     cf4:	9f 92       	push	r9
     cf6:	af 92       	push	r10
     cf8:	bf 92       	push	r11
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	a0 91 87 17 	lds	r26, 0x1787
     d26:	b0 91 88 17 	lds	r27, 0x1788
     d2a:	0d b6       	in	r0, 0x3d	; 61
     d2c:	0d 92       	st	X+, r0
     d2e:	0e b6       	in	r0, 0x3e	; 62
     d30:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d32:	73 d5       	rcall	.+2790   	; 0x181a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d34:	a0 91 87 17 	lds	r26, 0x1787
     d38:	b0 91 88 17 	lds	r27, 0x1788
     d3c:	cd 91       	ld	r28, X+
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	dd 91       	ld	r29, X+
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	7f 91       	pop	r23
     d56:	6f 91       	pop	r22
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	8f 90       	pop	r8
     d74:	7f 90       	pop	r7
     d76:	6f 90       	pop	r6
     d78:	5f 90       	pop	r5
     d7a:	4f 90       	pop	r4
     d7c:	3f 90       	pop	r3
     d7e:	2f 90       	pop	r2
     d80:	1f 90       	pop	r1
     d82:	0f 90       	pop	r0
     d84:	0c be       	out	0x3c, r0	; 60
     d86:	0f 90       	pop	r0
     d88:	0b be       	out	0x3b, r0	; 59
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d90:	08 95       	ret

00000d92 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	0f 92       	push	r0
     d9a:	0c b6       	in	r0, 0x3c	; 60
     d9c:	0f 92       	push	r0
     d9e:	0b b6       	in	r0, 0x3b	; 59
     da0:	0f 92       	push	r0
     da2:	1f 92       	push	r1
     da4:	11 24       	eor	r1, r1
     da6:	2f 92       	push	r2
     da8:	3f 92       	push	r3
     daa:	4f 92       	push	r4
     dac:	5f 92       	push	r5
     dae:	6f 92       	push	r6
     db0:	7f 92       	push	r7
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	a0 91 87 17 	lds	r26, 0x1787
     de6:	b0 91 88 17 	lds	r27, 0x1788
     dea:	0d b6       	in	r0, 0x3d	; 61
     dec:	0d 92       	st	X+, r0
     dee:	0e b6       	in	r0, 0x3e	; 62
     df0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     df2:	ac d3       	rcall	.+1880   	; 0x154c <xTaskIncrementTick>
     df4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     df6:	11 d5       	rcall	.+2594   	; 0x181a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     df8:	a0 91 87 17 	lds	r26, 0x1787
     dfc:	b0 91 88 17 	lds	r27, 0x1788
     e00:	cd 91       	ld	r28, X+
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	dd 91       	ld	r29, X+
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	7f 90       	pop	r7
     e3a:	6f 90       	pop	r6
     e3c:	5f 90       	pop	r5
     e3e:	4f 90       	pop	r4
     e40:	3f 90       	pop	r3
     e42:	2f 90       	pop	r2
     e44:	1f 90       	pop	r1
     e46:	0f 90       	pop	r0
     e48:	0c be       	out	0x3c, r0	; 60
     e4a:	0f 90       	pop	r0
     e4c:	0b be       	out	0x3b, r0	; 59
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e54:	08 95       	ret

00000e56 <__vector_20>:
	 * count is incremented after the context is saved.
	 */
	
	ISR (TIMER1_OVF_vect, ISR_NAKED)
	{
		vPortYieldFromTick();
     e56:	9d df       	rcall	.-198    	; 0xd92 <vPortYieldFromTick>
		asm volatile ( "reti" );
     e58:	18 95       	reti

00000e5a <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ec 01       	movw	r28, r24
     e62:	14 2f       	mov	r17, r20
     e64:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e66:	41 11       	cpse	r20, r1
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <prvCopyDataToQueue+0x26>
     e6a:	88 81       	ld	r24, Y
     e6c:	99 81       	ldd	r25, Y+1	; 0x01
     e6e:	89 2b       	or	r24, r25
     e70:	09 f0       	breq	.+2      	; 0xe74 <prvCopyDataToQueue+0x1a>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <prvCopyDataToQueue+0x9a>
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	10 d6       	rcall	.+3104   	; 0x1a9a <xTaskPriorityDisinherit>
     e7a:	1b 82       	std	Y+3, r1	; 0x03
     e7c:	1a 82       	std	Y+2, r1	; 0x02
     e7e:	3b c0       	rjmp	.+118    	; 0xef6 <prvCopyDataToQueue+0x9c>
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	11 11       	cpse	r17, r1
     e84:	15 c0       	rjmp	.+42     	; 0xeb0 <prvCopyDataToQueue+0x56>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <memcpy>
     e8e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	82 0f       	add	r24, r18
     e96:	91 1d       	adc	r25, r1
     e98:	9d 83       	std	Y+5, r25	; 0x05
     e9a:	8c 83       	std	Y+4, r24	; 0x04
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	38 f1       	brcs	.+78     	; 0xef4 <prvCopyDataToQueue+0x9a>
     ea6:	88 81       	ld	r24, Y
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	9d 83       	std	Y+5, r25	; 0x05
     eac:	8c 83       	std	Y+4, r24	; 0x04
     eae:	22 c0       	rjmp	.+68     	; 0xef4 <prvCopyDataToQueue+0x9a>
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <memcpy>
     eb8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	31 95       	neg	r19
     ebe:	21 95       	neg	r18
     ec0:	31 09       	sbc	r19, r1
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	9f 83       	std	Y+7, r25	; 0x07
     ecc:	8e 83       	std	Y+6, r24	; 0x06
     ece:	68 81       	ld	r22, Y
     ed0:	79 81       	ldd	r23, Y+1	; 0x01
     ed2:	86 17       	cp	r24, r22
     ed4:	97 07       	cpc	r25, r23
     ed6:	30 f4       	brcc	.+12     	; 0xee4 <prvCopyDataToQueue+0x8a>
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	9f 83       	std	Y+7, r25	; 0x07
     ee2:	8e 83       	std	Y+6, r24	; 0x06
     ee4:	12 30       	cpi	r17, 0x02	; 2
     ee6:	31 f4       	brne	.+12     	; 0xef4 <prvCopyDataToQueue+0x9a>
     ee8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eea:	88 23       	and	r24, r24
     eec:	19 f0       	breq	.+6      	; 0xef4 <prvCopyDataToQueue+0x9a>
     eee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ef0:	81 50       	subi	r24, 0x01	; 1
     ef2:	8a 8f       	std	Y+26, r24	; 0x1a
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
     efa:	9a 8f       	std	Y+26, r25	; 0x1a
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	08 95       	ret

00000f04 <prvCopyDataFromQueue>:
     f04:	fc 01       	movw	r30, r24
     f06:	cb 01       	movw	r24, r22
     f08:	44 8d       	ldd	r20, Z+28	; 0x1c
     f0a:	44 23       	and	r20, r20
     f0c:	a1 f0       	breq	.+40     	; 0xf36 <prvCopyDataFromQueue+0x32>
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	26 81       	ldd	r18, Z+6	; 0x06
     f12:	37 81       	ldd	r19, Z+7	; 0x07
     f14:	24 0f       	add	r18, r20
     f16:	35 1f       	adc	r19, r21
     f18:	37 83       	std	Z+7, r19	; 0x07
     f1a:	26 83       	std	Z+6, r18	; 0x06
     f1c:	62 81       	ldd	r22, Z+2	; 0x02
     f1e:	73 81       	ldd	r23, Z+3	; 0x03
     f20:	26 17       	cp	r18, r22
     f22:	37 07       	cpc	r19, r23
     f24:	20 f0       	brcs	.+8      	; 0xf2e <prvCopyDataFromQueue+0x2a>
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	37 83       	std	Z+7, r19	; 0x07
     f2c:	26 83       	std	Z+6, r18	; 0x06
     f2e:	66 81       	ldd	r22, Z+6	; 0x06
     f30:	77 81       	ldd	r23, Z+7	; 0x07
     f32:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <memcpy>
     f36:	08 95       	ret

00000f38 <prvUnlockQueue>:
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	0f 92       	push	r0
     f48:	8c 01       	movw	r16, r24
     f4a:	0f 5e       	subi	r16, 0xEF	; 239
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f50:	18 16       	cp	r1, r24
     f52:	5c f4       	brge	.+22     	; 0xf6a <prvUnlockQueue+0x32>
     f54:	89 89       	ldd	r24, Y+17	; 0x11
     f56:	88 23       	and	r24, r24
     f58:	41 f0       	breq	.+16     	; 0xf6a <prvUnlockQueue+0x32>
     f5a:	c8 01       	movw	r24, r16
     f5c:	c9 d4       	rcall	.+2450   	; 0x18f0 <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	43 d5       	rcall	.+2694   	; 0x19e8 <vTaskMissedYield>
     f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	8e 8f       	std	Y+30, r24	; 0x1e
     f68:	f2 cf       	rjmp	.-28     	; 0xf4e <prvUnlockQueue+0x16>
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	8e 8f       	std	Y+30, r24	; 0x1e
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	0f 92       	push	r0
     f78:	8e 01       	movw	r16, r28
     f7a:	08 5f       	subi	r16, 0xF8	; 248
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f80:	18 16       	cp	r1, r24
     f82:	5c f4       	brge	.+22     	; 0xf9a <prvUnlockQueue+0x62>
     f84:	88 85       	ldd	r24, Y+8	; 0x08
     f86:	88 23       	and	r24, r24
     f88:	41 f0       	breq	.+16     	; 0xf9a <prvUnlockQueue+0x62>
     f8a:	c8 01       	movw	r24, r16
     f8c:	b1 d4       	rcall	.+2402   	; 0x18f0 <xTaskRemoveFromEventList>
     f8e:	81 11       	cpse	r24, r1
     f90:	2b d5       	rcall	.+2646   	; 0x19e8 <vTaskMissedYield>
     f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	8d 8f       	std	Y+29, r24	; 0x1d
     f98:	f2 cf       	rjmp	.-28     	; 0xf7e <prvUnlockQueue+0x46>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	8d 8f       	std	Y+29, r24	; 0x1d
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <xQueueGenericSend>:
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <xQueueGenericSend+0x14>
     fc0:	1f 92       	push	r1
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8c 01       	movw	r16, r24
     fca:	6b 01       	movw	r12, r22
     fcc:	5d 83       	std	Y+5, r21	; 0x05
     fce:	4c 83       	std	Y+4, r20	; 0x04
     fd0:	b2 2e       	mov	r11, r18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	7c 01       	movw	r14, r24
     fd6:	88 e0       	ldi	r24, 0x08	; 8
     fd8:	e8 0e       	add	r14, r24
     fda:	f1 1c       	adc	r15, r1
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	0f 92       	push	r0
     fe2:	f8 01       	movw	r30, r16
     fe4:	92 8d       	ldd	r25, Z+26	; 0x1a
     fe6:	83 8d       	ldd	r24, Z+27	; 0x1b
     fe8:	98 17       	cp	r25, r24
     fea:	18 f0       	brcs	.+6      	; 0xff2 <xQueueGenericSend+0x46>
     fec:	f2 e0       	ldi	r31, 0x02	; 2
     fee:	bf 12       	cpse	r11, r31
     ff0:	15 c0       	rjmp	.+42     	; 0x101c <xQueueGenericSend+0x70>
     ff2:	4b 2d       	mov	r20, r11
     ff4:	b6 01       	movw	r22, r12
     ff6:	c8 01       	movw	r24, r16
     ff8:	30 df       	rcall	.-416    	; 0xe5a <prvCopyDataToQueue>
     ffa:	f8 01       	movw	r30, r16
     ffc:	91 89       	ldd	r25, Z+17	; 0x11
     ffe:	99 23       	and	r25, r25
    1000:	39 f0       	breq	.+14     	; 0x1010 <xQueueGenericSend+0x64>
    1002:	c8 01       	movw	r24, r16
    1004:	41 96       	adiw	r24, 0x11	; 17
    1006:	74 d4       	rcall	.+2280   	; 0x18f0 <xTaskRemoveFromEventList>
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	21 f4       	brne	.+8      	; 0x1014 <xQueueGenericSend+0x68>
    100c:	62 de       	rcall	.-828    	; 0xcd2 <vPortYield>
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <xQueueGenericSend+0x68>
    1010:	81 11       	cpse	r24, r1
    1012:	fc cf       	rjmp	.-8      	; 0x100c <xQueueGenericSend+0x60>
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	46 c0       	rjmp	.+140    	; 0x10a8 <xQueueGenericSend+0xfc>
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	89 2b       	or	r24, r25
    1022:	19 f4       	brne	.+6      	; 0x102a <xQueueGenericSend+0x7e>
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	3e c0       	rjmp	.+124    	; 0x10a6 <xQueueGenericSend+0xfa>
    102a:	21 11       	cpse	r18, r1
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <xQueueGenericSend+0x88>
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9e d4       	rcall	.+2364   	; 0x1970 <vTaskSetTimeOutState>
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	83 d2       	rcall	.+1286   	; 0x1540 <vTaskSuspendAll>
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	0f 92       	push	r0
    1040:	f8 01       	movw	r30, r16
    1042:	85 8d       	ldd	r24, Z+29	; 0x1d
    1044:	8f 3f       	cpi	r24, 0xFF	; 255
    1046:	09 f4       	brne	.+2      	; 0x104a <xQueueGenericSend+0x9e>
    1048:	15 8e       	std	Z+29, r1	; 0x1d
    104a:	f8 01       	movw	r30, r16
    104c:	86 8d       	ldd	r24, Z+30	; 0x1e
    104e:	8f 3f       	cpi	r24, 0xFF	; 255
    1050:	09 f4       	brne	.+2      	; 0x1054 <xQueueGenericSend+0xa8>
    1052:	16 8e       	std	Z+30, r1	; 0x1e
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	be 01       	movw	r22, r28
    105a:	6c 5f       	subi	r22, 0xFC	; 252
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	91 d4       	rcall	.+2338   	; 0x1986 <xTaskCheckForTimeOut>
    1064:	81 11       	cpse	r24, r1
    1066:	1c c0       	rjmp	.+56     	; 0x10a0 <xQueueGenericSend+0xf4>
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	0f 92       	push	r0
    106e:	f8 01       	movw	r30, r16
    1070:	92 8d       	ldd	r25, Z+26	; 0x1a
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	f8 01       	movw	r30, r16
    1078:	83 8d       	ldd	r24, Z+27	; 0x1b
    107a:	98 13       	cpse	r25, r24
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <xQueueGenericSend+0xec>
    107e:	6c 81       	ldd	r22, Y+4	; 0x04
    1080:	7d 81       	ldd	r23, Y+5	; 0x05
    1082:	c7 01       	movw	r24, r14
    1084:	0a d4       	rcall	.+2068   	; 0x189a <vTaskPlaceOnEventList>
    1086:	c8 01       	movw	r24, r16
    1088:	57 df       	rcall	.-338    	; 0xf38 <prvUnlockQueue>
    108a:	0c d3       	rcall	.+1560   	; 0x16a4 <xTaskResumeAll>
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <xQueueGenericSend+0xe8>
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	a4 cf       	rjmp	.-184    	; 0xfdc <xQueueGenericSend+0x30>
    1094:	1e de       	rcall	.-964    	; 0xcd2 <vPortYield>
    1096:	fc cf       	rjmp	.-8      	; 0x1090 <xQueueGenericSend+0xe4>
    1098:	c8 01       	movw	r24, r16
    109a:	4e df       	rcall	.-356    	; 0xf38 <prvUnlockQueue>
    109c:	03 d3       	rcall	.+1542   	; 0x16a4 <xTaskResumeAll>
    109e:	f8 cf       	rjmp	.-16     	; 0x1090 <xQueueGenericSend+0xe4>
    10a0:	c8 01       	movw	r24, r16
    10a2:	4a df       	rcall	.-364    	; 0xf38 <prvUnlockQueue>
    10a4:	ff d2       	rcall	.+1534   	; 0x16a4 <xTaskResumeAll>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	08 95       	ret

000010c6 <xQueueCreateMutex>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	8f e1       	ldi	r24, 0x1F	; 31
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	c3 d9       	rcall	.-3194   	; 0x456 <pvPortMalloc>
    10d0:	ec 01       	movw	r28, r24
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	e1 f0       	breq	.+56     	; 0x110e <xQueueCreateMutex+0x48>
    10d6:	1b 82       	std	Y+3, r1	; 0x03
    10d8:	1a 82       	std	Y+2, r1	; 0x02
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	18 82       	st	Y, r1
    10de:	1d 82       	std	Y+5, r1	; 0x05
    10e0:	1c 82       	std	Y+4, r1	; 0x04
    10e2:	1f 82       	std	Y+7, r1	; 0x07
    10e4:	1e 82       	std	Y+6, r1	; 0x06
    10e6:	1a 8e       	std	Y+26, r1	; 0x1a
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8b 8f       	std	Y+27, r24	; 0x1b
    10ec:	1c 8e       	std	Y+28, r1	; 0x1c
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	8d 8f       	std	Y+29, r24	; 0x1d
    10f2:	8e 8f       	std	Y+30, r24	; 0x1e
    10f4:	ce 01       	movw	r24, r28
    10f6:	08 96       	adiw	r24, 0x08	; 8
    10f8:	55 db       	rcall	.-2390   	; 0x7a4 <vListInitialise>
    10fa:	ce 01       	movw	r24, r28
    10fc:	41 96       	adiw	r24, 0x11	; 17
    10fe:	52 db       	rcall	.-2396   	; 0x7a4 <vListInitialise>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	ce 01       	movw	r24, r28
    110c:	4f df       	rcall	.-354    	; 0xfac <xQueueGenericSend>
    110e:	ce 01       	movw	r24, r28
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	00 d0       	rcall	.+0      	; 0x112a <xQueueGenericReceive+0x14>
    112a:	1f 92       	push	r1
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8c 01       	movw	r16, r24
    1134:	6b 01       	movw	r12, r22
    1136:	5d 83       	std	Y+5, r21	; 0x05
    1138:	4c 83       	std	Y+4, r20	; 0x04
    113a:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    113c:	30 e0       	ldi	r19, 0x00	; 0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    113e:	7c 01       	movw	r14, r24
    1140:	81 e1       	ldi	r24, 0x11	; 17
    1142:	e8 0e       	add	r14, r24
    1144:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    114c:	f8 01       	movw	r30, r16
    114e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1150:	88 23       	and	r24, r24
    1152:	61 f1       	breq	.+88     	; 0x11ac <xQueueGenericReceive+0x96>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1154:	e6 80       	ldd	r14, Z+6	; 0x06
    1156:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1158:	b6 01       	movw	r22, r12
    115a:	c8 01       	movw	r24, r16
    115c:	d3 de       	rcall	.-602    	; 0xf04 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    115e:	f8 01       	movw	r30, r16
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    1160:	b1 10       	cpse	r11, r1
    1162:	16 c0       	rjmp	.+44     	; 0x1190 <xQueueGenericReceive+0x7a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1164:	82 8d       	ldd	r24, Z+26	; 0x1a
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	89 2b       	or	r24, r25
    1170:	21 f4       	brne	.+8      	; 0x117a <xQueueGenericReceive+0x64>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1172:	cc d4       	rcall	.+2456   	; 0x1b0c <pvTaskIncrementMutexHeldCount>
    1174:	f8 01       	movw	r30, r16
    1176:	93 83       	std	Z+3, r25	; 0x03
    1178:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    117a:	f8 01       	movw	r30, r16
    117c:	80 85       	ldd	r24, Z+8	; 0x08
    117e:	88 23       	and	r24, r24
    1180:	89 f0       	breq	.+34     	; 0x11a4 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1182:	c8 01       	movw	r24, r16
    1184:	08 96       	adiw	r24, 0x08	; 8
    1186:	b4 d3       	rcall	.+1896   	; 0x18f0 <xTaskRemoveFromEventList>
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	61 f4       	brne	.+24     	; 0x11a4 <xQueueGenericReceive+0x8e>
						{
							queueYIELD_IF_USING_PREEMPTION();
    118c:	a2 dd       	rcall	.-1212   	; 0xcd2 <vPortYield>
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1190:	f7 82       	std	Z+7, r15	; 0x07
    1192:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1194:	81 89       	ldd	r24, Z+17	; 0x11
    1196:	88 23       	and	r24, r24
    1198:	29 f0       	breq	.+10     	; 0x11a4 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    119a:	c8 01       	movw	r24, r16
    119c:	41 96       	adiw	r24, 0x11	; 17
    119e:	a8 d3       	rcall	.+1872   	; 0x18f0 <xTaskRemoveFromEventList>
    11a0:	81 11       	cpse	r24, r1
    11a2:	f4 cf       	rjmp	.-24     	; 0x118c <xQueueGenericReceive+0x76>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	52 c0       	rjmp	.+164    	; 0x1250 <xQueueGenericReceive+0x13a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	89 2b       	or	r24, r25
    11b2:	19 f4       	brne	.+6      	; 0x11ba <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	4a c0       	rjmp	.+148    	; 0x124e <xQueueGenericReceive+0x138>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    11ba:	31 11       	cpse	r19, r1
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <xQueueGenericReceive+0xae>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	d6 d3       	rcall	.+1964   	; 0x1970 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    11c8:	bb d1       	rcall	.+886    	; 0x1540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	0f 92       	push	r0
    11d0:	f8 01       	movw	r30, r16
    11d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    11d4:	8f 3f       	cpi	r24, 0xFF	; 255
    11d6:	09 f4       	brne	.+2      	; 0x11da <xQueueGenericReceive+0xc4>
    11d8:	15 8e       	std	Z+29, r1	; 0x1d
    11da:	f8 01       	movw	r30, r16
    11dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <xQueueGenericReceive+0xce>
    11e2:	16 8e       	std	Z+30, r1	; 0x1e
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    11e8:	be 01       	movw	r22, r28
    11ea:	6c 5f       	subi	r22, 0xFC	; 252
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	c9 d3       	rcall	.+1938   	; 0x1986 <xTaskCheckForTimeOut>
    11f4:	81 11       	cpse	r24, r1
    11f6:	28 c0       	rjmp	.+80     	; 0x1248 <xQueueGenericReceive+0x132>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    11fe:	f8 01       	movw	r30, r16
    1200:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1206:	81 11       	cpse	r24, r1
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <xQueueGenericReceive+0x12a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    120a:	f8 01       	movw	r30, r16
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	89 2b       	or	r24, r25
    1212:	49 f4       	brne	.+18     	; 0x1226 <xQueueGenericReceive+0x110>
					{
						taskENTER_CRITICAL();
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    121a:	f8 01       	movw	r30, r16
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	e7 d3       	rcall	.+1998   	; 0x19f0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1226:	6c 81       	ldd	r22, Y+4	; 0x04
    1228:	7d 81       	ldd	r23, Y+5	; 0x05
    122a:	c7 01       	movw	r24, r14
    122c:	36 d3       	rcall	.+1644   	; 0x189a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    122e:	c8 01       	movw	r24, r16
    1230:	83 de       	rcall	.-762    	; 0xf38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1232:	38 d2       	rcall	.+1136   	; 0x16a4 <xTaskResumeAll>
    1234:	88 23       	and	r24, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <xQueueGenericReceive+0x126>
    1238:	31 e0       	ldi	r19, 0x01	; 1
    123a:	85 cf       	rjmp	.-246    	; 0x1146 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    123c:	4a dd       	rcall	.-1388   	; 0xcd2 <vPortYield>
    123e:	fc cf       	rjmp	.-8      	; 0x1238 <xQueueGenericReceive+0x122>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1240:	c8 01       	movw	r24, r16
    1242:	7a de       	rcall	.-780    	; 0xf38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1244:	2f d2       	rcall	.+1118   	; 0x16a4 <xTaskResumeAll>
    1246:	f8 cf       	rjmp	.-16     	; 0x1238 <xQueueGenericReceive+0x122>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1248:	c8 01       	movw	r24, r16
    124a:	76 de       	rcall	.-788    	; 0xf38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    124c:	2b d2       	rcall	.+1110   	; 0x16a4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    124e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	08 95       	ret

0000126e <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    126e:	e0 91 4f 17 	lds	r30, 0x174F
    1272:	f0 91 50 17 	lds	r31, 0x1750
    1276:	80 81       	ld	r24, Z
    1278:	81 11       	cpse	r24, r1
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <prvResetNextTaskUnblockTime+0x14>
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	9f ef       	ldi	r25, 0xFF	; 255
    1280:	0c c0       	rjmp	.+24     	; 0x129a <prvResetNextTaskUnblockTime+0x2c>
    1282:	e0 91 4f 17 	lds	r30, 0x174F
    1286:	f0 91 50 17 	lds	r31, 0x1750
    128a:	05 80       	ldd	r0, Z+5	; 0x05
    128c:	f6 81       	ldd	r31, Z+6	; 0x06
    128e:	e0 2d       	mov	r30, r0
    1290:	06 80       	ldd	r0, Z+6	; 0x06
    1292:	f7 81       	ldd	r31, Z+7	; 0x07
    1294:	e0 2d       	mov	r30, r0
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	90 93 09 02 	sts	0x0209, r25
    129e:	80 93 08 02 	sts	0x0208, r24
    12a2:	08 95       	ret

000012a4 <prvAddCurrentTaskToDelayedList>:
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
    12aa:	e0 91 87 17 	lds	r30, 0x1787
    12ae:	f0 91 88 17 	lds	r31, 0x1788
    12b2:	93 83       	std	Z+3, r25	; 0x03
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	80 91 2e 17 	lds	r24, 0x172E
    12ba:	90 91 2f 17 	lds	r25, 0x172F
    12be:	60 91 87 17 	lds	r22, 0x1787
    12c2:	70 91 88 17 	lds	r23, 0x1788
    12c6:	c8 17       	cp	r28, r24
    12c8:	d9 07       	cpc	r29, r25
    12ca:	48 f4       	brcc	.+18     	; 0x12de <prvAddCurrentTaskToDelayedList+0x3a>
    12cc:	80 91 4d 17 	lds	r24, 0x174D
    12d0:	90 91 4e 17 	lds	r25, 0x174E
    12d4:	6e 5f       	subi	r22, 0xFE	; 254
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	96 ca       	rjmp	.-2772   	; 0x80a <vListInsert>
    12de:	80 91 4f 17 	lds	r24, 0x174F
    12e2:	90 91 50 17 	lds	r25, 0x1750
    12e6:	6e 5f       	subi	r22, 0xFE	; 254
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f da       	rcall	.-2786   	; 0x80a <vListInsert>
    12ec:	80 91 08 02 	lds	r24, 0x0208
    12f0:	90 91 09 02 	lds	r25, 0x0209
    12f4:	c8 17       	cp	r28, r24
    12f6:	d9 07       	cpc	r29, r25
    12f8:	20 f4       	brcc	.+8      	; 0x1302 <prvAddCurrentTaskToDelayedList+0x5e>
    12fa:	d0 93 09 02 	sts	0x0209, r29
    12fe:	c0 93 08 02 	sts	0x0208, r28
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <xTaskGenericCreate>:
    1308:	5f 92       	push	r5
    130a:	6f 92       	push	r6
    130c:	7f 92       	push	r7
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	4c 01       	movw	r8, r24
    1328:	16 2f       	mov	r17, r22
    132a:	57 2e       	mov	r5, r23
    132c:	5a 01       	movw	r10, r20
    132e:	39 01       	movw	r6, r18
    1330:	83 e2       	ldi	r24, 0x23	; 35
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	90 d8       	rcall	.-3808   	; 0x456 <pvPortMalloc>
    1336:	ec 01       	movw	r28, r24
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	09 f4       	brne	.+2      	; 0x133e <xTaskGenericCreate+0x36>
    133c:	c0 c0       	rjmp	.+384    	; 0x14be <xTaskGenericCreate+0x1b6>
    133e:	c1 14       	cp	r12, r1
    1340:	d1 04       	cpc	r13, r1
    1342:	19 f4       	brne	.+6      	; 0x134a <xTaskGenericCreate+0x42>
    1344:	c5 01       	movw	r24, r10
    1346:	87 d8       	rcall	.-3826   	; 0x456 <pvPortMalloc>
    1348:	01 c0       	rjmp	.+2      	; 0x134c <xTaskGenericCreate+0x44>
    134a:	c6 01       	movw	r24, r12
    134c:	98 8f       	std	Y+24, r25	; 0x18
    134e:	8f 8b       	std	Y+23, r24	; 0x17
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	19 f4       	brne	.+6      	; 0x135a <xTaskGenericCreate+0x52>
    1354:	ce 01       	movw	r24, r28
    1356:	b1 d8       	rcall	.-3742   	; 0x4ba <vPortFree>
    1358:	b2 c0       	rjmp	.+356    	; 0x14be <xTaskGenericCreate+0x1b6>
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	a2 1a       	sub	r10, r18
    135e:	b1 08       	sbc	r11, r1
    1360:	a8 0e       	add	r10, r24
    1362:	b9 1e       	adc	r11, r25
    1364:	e1 2f       	mov	r30, r17
    1366:	f5 2d       	mov	r31, r5
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	bf 01       	movw	r22, r30
    136e:	41 91       	ld	r20, Z+
    1370:	9e 01       	movw	r18, r28
    1372:	28 0f       	add	r18, r24
    1374:	39 1f       	adc	r19, r25
    1376:	d9 01       	movw	r26, r18
    1378:	59 96       	adiw	r26, 0x19	; 25
    137a:	4c 93       	st	X, r20
    137c:	db 01       	movw	r26, r22
    137e:	2c 91       	ld	r18, X
    1380:	22 23       	and	r18, r18
    1382:	21 f0       	breq	.+8      	; 0x138c <xTaskGenericCreate+0x84>
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	91 05       	cpc	r25, r1
    138a:	81 f7       	brne	.-32     	; 0x136c <xTaskGenericCreate+0x64>
    138c:	18 a2       	std	Y+32, r1	; 0x20
    138e:	10 2f       	mov	r17, r16
    1390:	04 30       	cpi	r16, 0x04	; 4
    1392:	08 f0       	brcs	.+2      	; 0x1396 <xTaskGenericCreate+0x8e>
    1394:	13 e0       	ldi	r17, 0x03	; 3
    1396:	1e 8b       	std	Y+22, r17	; 0x16
    1398:	19 a3       	std	Y+33, r17	; 0x21
    139a:	1a a2       	std	Y+34, r1	; 0x22
    139c:	6e 01       	movw	r12, r28
    139e:	b2 e0       	ldi	r27, 0x02	; 2
    13a0:	cb 0e       	add	r12, r27
    13a2:	d1 1c       	adc	r13, r1
    13a4:	c6 01       	movw	r24, r12
    13a6:	0c da       	rcall	.-3048   	; 0x7c0 <vListInitialiseItem>
    13a8:	ce 01       	movw	r24, r28
    13aa:	0c 96       	adiw	r24, 0x0c	; 12
    13ac:	09 da       	rcall	.-3054   	; 0x7c0 <vListInitialiseItem>
    13ae:	d9 87       	std	Y+9, r29	; 0x09
    13b0:	c8 87       	std	Y+8, r28	; 0x08
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	81 1b       	sub	r24, r17
    13b8:	91 09       	sbc	r25, r1
    13ba:	9d 87       	std	Y+13, r25	; 0x0d
    13bc:	8c 87       	std	Y+12, r24	; 0x0c
    13be:	db 8b       	std	Y+19, r29	; 0x13
    13c0:	ca 8b       	std	Y+18, r28	; 0x12
    13c2:	a3 01       	movw	r20, r6
    13c4:	b4 01       	movw	r22, r8
    13c6:	c5 01       	movw	r24, r10
    13c8:	d4 db       	rcall	.-2136   	; 0xb72 <pxPortInitialiseStack>
    13ca:	99 83       	std	Y+1, r25	; 0x01
    13cc:	88 83       	st	Y, r24
    13ce:	e1 14       	cp	r14, r1
    13d0:	f1 04       	cpc	r15, r1
    13d2:	19 f0       	breq	.+6      	; 0x13da <xTaskGenericCreate+0xd2>
    13d4:	f7 01       	movw	r30, r14
    13d6:	d1 83       	std	Z+1, r29	; 0x01
    13d8:	c0 83       	st	Z, r28
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	0f 92       	push	r0
    13e0:	80 91 30 17 	lds	r24, 0x1730
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	80 93 30 17 	sts	0x1730, r24
    13ea:	80 91 87 17 	lds	r24, 0x1787
    13ee:	90 91 88 17 	lds	r25, 0x1788
    13f2:	89 2b       	or	r24, r25
    13f4:	89 f5       	brne	.+98     	; 0x1458 <xTaskGenericCreate+0x150>
    13f6:	d0 93 88 17 	sts	0x1788, r29
    13fa:	c0 93 87 17 	sts	0x1787, r28
    13fe:	80 91 30 17 	lds	r24, 0x1730
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	09 f0       	breq	.+2      	; 0x1408 <xTaskGenericCreate+0x100>
    1406:	37 c0       	rjmp	.+110    	; 0x1476 <xTaskGenericCreate+0x16e>
    1408:	83 e6       	ldi	r24, 0x63	; 99
    140a:	97 e1       	ldi	r25, 0x17	; 23
    140c:	cb d9       	rcall	.-3178   	; 0x7a4 <vListInitialise>
    140e:	8c e6       	ldi	r24, 0x6C	; 108
    1410:	97 e1       	ldi	r25, 0x17	; 23
    1412:	c8 d9       	rcall	.-3184   	; 0x7a4 <vListInitialise>
    1414:	85 e7       	ldi	r24, 0x75	; 117
    1416:	97 e1       	ldi	r25, 0x17	; 23
    1418:	c5 d9       	rcall	.-3190   	; 0x7a4 <vListInitialise>
    141a:	8e e7       	ldi	r24, 0x7E	; 126
    141c:	97 e1       	ldi	r25, 0x17	; 23
    141e:	c2 d9       	rcall	.-3196   	; 0x7a4 <vListInitialise>
    1420:	8a e5       	ldi	r24, 0x5A	; 90
    1422:	97 e1       	ldi	r25, 0x17	; 23
    1424:	bf d9       	rcall	.-3202   	; 0x7a4 <vListInitialise>
    1426:	81 e5       	ldi	r24, 0x51	; 81
    1428:	97 e1       	ldi	r25, 0x17	; 23
    142a:	bc d9       	rcall	.-3208   	; 0x7a4 <vListInitialise>
    142c:	84 e4       	ldi	r24, 0x44	; 68
    142e:	97 e1       	ldi	r25, 0x17	; 23
    1430:	b9 d9       	rcall	.-3214   	; 0x7a4 <vListInitialise>
    1432:	8b e3       	ldi	r24, 0x3B	; 59
    1434:	97 e1       	ldi	r25, 0x17	; 23
    1436:	b6 d9       	rcall	.-3220   	; 0x7a4 <vListInitialise>
    1438:	81 e3       	ldi	r24, 0x31	; 49
    143a:	97 e1       	ldi	r25, 0x17	; 23
    143c:	b3 d9       	rcall	.-3226   	; 0x7a4 <vListInitialise>
    143e:	8a e5       	ldi	r24, 0x5A	; 90
    1440:	97 e1       	ldi	r25, 0x17	; 23
    1442:	90 93 50 17 	sts	0x1750, r25
    1446:	80 93 4f 17 	sts	0x174F, r24
    144a:	81 e5       	ldi	r24, 0x51	; 81
    144c:	97 e1       	ldi	r25, 0x17	; 23
    144e:	90 93 4e 17 	sts	0x174E, r25
    1452:	80 93 4d 17 	sts	0x174D, r24
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <xTaskGenericCreate+0x16e>
    1458:	80 91 2c 17 	lds	r24, 0x172C
    145c:	81 11       	cpse	r24, r1
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <xTaskGenericCreate+0x16e>
    1460:	e0 91 87 17 	lds	r30, 0x1787
    1464:	f0 91 88 17 	lds	r31, 0x1788
    1468:	86 89       	ldd	r24, Z+22	; 0x16
    146a:	08 17       	cp	r16, r24
    146c:	20 f0       	brcs	.+8      	; 0x1476 <xTaskGenericCreate+0x16e>
    146e:	d0 93 88 17 	sts	0x1788, r29
    1472:	c0 93 87 17 	sts	0x1787, r28
    1476:	80 91 28 17 	lds	r24, 0x1728
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	80 93 28 17 	sts	0x1728, r24
    1480:	8e 89       	ldd	r24, Y+22	; 0x16
    1482:	90 91 2d 17 	lds	r25, 0x172D
    1486:	98 17       	cp	r25, r24
    1488:	10 f4       	brcc	.+4      	; 0x148e <xTaskGenericCreate+0x186>
    148a:	80 93 2d 17 	sts	0x172D, r24
    148e:	f9 e0       	ldi	r31, 0x09	; 9
    1490:	8f 9f       	mul	r24, r31
    1492:	c0 01       	movw	r24, r0
    1494:	11 24       	eor	r1, r1
    1496:	b6 01       	movw	r22, r12
    1498:	8d 59       	subi	r24, 0x9D	; 157
    149a:	98 4e       	sbci	r25, 0xE8	; 232
    149c:	95 d9       	rcall	.-3286   	; 0x7c8 <vListInsertEnd>
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	80 91 2c 17 	lds	r24, 0x172C
    14a6:	88 23       	and	r24, r24
    14a8:	41 f0       	breq	.+16     	; 0x14ba <xTaskGenericCreate+0x1b2>
    14aa:	e0 91 87 17 	lds	r30, 0x1787
    14ae:	f0 91 88 17 	lds	r31, 0x1788
    14b2:	86 89       	ldd	r24, Z+22	; 0x16
    14b4:	80 17       	cp	r24, r16
    14b6:	08 f4       	brcc	.+2      	; 0x14ba <xTaskGenericCreate+0x1b2>
    14b8:	0c dc       	rcall	.-2024   	; 0xcd2 <vPortYield>
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <xTaskGenericCreate+0x1b8>
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	bf 90       	pop	r11
    14d2:	af 90       	pop	r10
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	7f 90       	pop	r7
    14da:	6f 90       	pop	r6
    14dc:	5f 90       	pop	r5
    14de:	08 95       	ret

000014e0 <vTaskStartScheduler>:
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	a1 2c       	mov	r10, r1
    14f0:	b1 2c       	mov	r11, r1
    14f2:	c1 2c       	mov	r12, r1
    14f4:	d1 2c       	mov	r13, r1
    14f6:	e1 2c       	mov	r14, r1
    14f8:	f1 2c       	mov	r15, r1
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	45 e5       	ldi	r20, 0x55	; 85
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	66 ec       	ldi	r22, 0xC6	; 198
    1506:	72 e0       	ldi	r23, 0x02	; 2
    1508:	8d ed       	ldi	r24, 0xDD	; 221
    150a:	9b e0       	ldi	r25, 0x0B	; 11
    150c:	fd de       	rcall	.-518    	; 0x1308 <xTaskGenericCreate>
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	79 f4       	brne	.+30     	; 0x1530 <vTaskStartScheduler+0x50>
    1512:	f8 94       	cli
    1514:	80 93 2c 17 	sts	0x172C, r24
    1518:	10 92 2f 17 	sts	0x172F, r1
    151c:	10 92 2e 17 	sts	0x172E, r1
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	93 cb       	rjmp	.-2266   	; 0xc56 <xPortStartScheduler>
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	08 95       	ret

00001540 <vTaskSuspendAll>:
    1540:	80 91 27 17 	lds	r24, 0x1727
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 27 17 	sts	0x1727, r24
    154a:	08 95       	ret

0000154c <xTaskIncrementTick>:
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	80 91 27 17 	lds	r24, 0x1727
    1560:	81 11       	cpse	r24, r1
    1562:	8a c0       	rjmp	.+276    	; 0x1678 <xTaskIncrementTick+0x12c>
    1564:	80 91 2e 17 	lds	r24, 0x172E
    1568:	90 91 2f 17 	lds	r25, 0x172F
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	90 93 2f 17 	sts	0x172F, r25
    1572:	80 93 2e 17 	sts	0x172E, r24
    1576:	00 91 2e 17 	lds	r16, 0x172E
    157a:	10 91 2f 17 	lds	r17, 0x172F
    157e:	01 15       	cp	r16, r1
    1580:	11 05       	cpc	r17, r1
    1582:	b1 f4       	brne	.+44     	; 0x15b0 <xTaskIncrementTick+0x64>
    1584:	80 91 4f 17 	lds	r24, 0x174F
    1588:	90 91 50 17 	lds	r25, 0x1750
    158c:	20 91 4d 17 	lds	r18, 0x174D
    1590:	30 91 4e 17 	lds	r19, 0x174E
    1594:	30 93 50 17 	sts	0x1750, r19
    1598:	20 93 4f 17 	sts	0x174F, r18
    159c:	90 93 4e 17 	sts	0x174E, r25
    15a0:	80 93 4d 17 	sts	0x174D, r24
    15a4:	80 91 29 17 	lds	r24, 0x1729
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	80 93 29 17 	sts	0x1729, r24
    15ae:	5f de       	rcall	.-834    	; 0x126e <prvResetNextTaskUnblockTime>
    15b0:	80 91 08 02 	lds	r24, 0x0208
    15b4:	90 91 09 02 	lds	r25, 0x0209
    15b8:	d1 2c       	mov	r13, r1
    15ba:	08 17       	cp	r16, r24
    15bc:	19 07       	cpc	r17, r25
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <xTaskIncrementTick+0x76>
    15c0:	4a c0       	rjmp	.+148    	; 0x1656 <xTaskIncrementTick+0x10a>
    15c2:	89 e0       	ldi	r24, 0x09	; 9
    15c4:	c8 2e       	mov	r12, r24
    15c6:	e0 91 4f 17 	lds	r30, 0x174F
    15ca:	f0 91 50 17 	lds	r31, 0x1750
    15ce:	80 81       	ld	r24, Z
    15d0:	81 11       	cpse	r24, r1
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <xTaskIncrementTick+0x96>
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	9f ef       	ldi	r25, 0xFF	; 255
    15d8:	90 93 09 02 	sts	0x0209, r25
    15dc:	80 93 08 02 	sts	0x0208, r24
    15e0:	3a c0       	rjmp	.+116    	; 0x1656 <xTaskIncrementTick+0x10a>
    15e2:	e0 91 4f 17 	lds	r30, 0x174F
    15e6:	f0 91 50 17 	lds	r31, 0x1750
    15ea:	05 80       	ldd	r0, Z+5	; 0x05
    15ec:	f6 81       	ldd	r31, Z+6	; 0x06
    15ee:	e0 2d       	mov	r30, r0
    15f0:	c6 81       	ldd	r28, Z+6	; 0x06
    15f2:	d7 81       	ldd	r29, Z+7	; 0x07
    15f4:	2a 81       	ldd	r18, Y+2	; 0x02
    15f6:	3b 81       	ldd	r19, Y+3	; 0x03
    15f8:	02 17       	cp	r16, r18
    15fa:	13 07       	cpc	r17, r19
    15fc:	28 f4       	brcc	.+10     	; 0x1608 <xTaskIncrementTick+0xbc>
    15fe:	30 93 09 02 	sts	0x0209, r19
    1602:	20 93 08 02 	sts	0x0208, r18
    1606:	27 c0       	rjmp	.+78     	; 0x1656 <xTaskIncrementTick+0x10a>
    1608:	7e 01       	movw	r14, r28
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	e8 0e       	add	r14, r24
    160e:	f1 1c       	adc	r15, r1
    1610:	c7 01       	movw	r24, r14
    1612:	33 d9       	rcall	.-3482   	; 0x87a <uxListRemove>
    1614:	2c 89       	ldd	r18, Y+20	; 0x14
    1616:	3d 89       	ldd	r19, Y+21	; 0x15
    1618:	23 2b       	or	r18, r19
    161a:	19 f0       	breq	.+6      	; 0x1622 <xTaskIncrementTick+0xd6>
    161c:	ce 01       	movw	r24, r28
    161e:	0c 96       	adiw	r24, 0x0c	; 12
    1620:	2c d9       	rcall	.-3496   	; 0x87a <uxListRemove>
    1622:	2e 89       	ldd	r18, Y+22	; 0x16
    1624:	80 91 2d 17 	lds	r24, 0x172D
    1628:	82 17       	cp	r24, r18
    162a:	10 f4       	brcc	.+4      	; 0x1630 <xTaskIncrementTick+0xe4>
    162c:	20 93 2d 17 	sts	0x172D, r18
    1630:	c2 9e       	mul	r12, r18
    1632:	c0 01       	movw	r24, r0
    1634:	11 24       	eor	r1, r1
    1636:	b7 01       	movw	r22, r14
    1638:	8d 59       	subi	r24, 0x9D	; 157
    163a:	98 4e       	sbci	r25, 0xE8	; 232
    163c:	c5 d8       	rcall	.-3702   	; 0x7c8 <vListInsertEnd>
    163e:	e0 91 87 17 	lds	r30, 0x1787
    1642:	f0 91 88 17 	lds	r31, 0x1788
    1646:	9e 89       	ldd	r25, Y+22	; 0x16
    1648:	86 89       	ldd	r24, Z+22	; 0x16
    164a:	98 17       	cp	r25, r24
    164c:	08 f4       	brcc	.+2      	; 0x1650 <xTaskIncrementTick+0x104>
    164e:	bb cf       	rjmp	.-138    	; 0x15c6 <xTaskIncrementTick+0x7a>
    1650:	dd 24       	eor	r13, r13
    1652:	d3 94       	inc	r13
    1654:	b8 cf       	rjmp	.-144    	; 0x15c6 <xTaskIncrementTick+0x7a>
    1656:	e0 91 87 17 	lds	r30, 0x1787
    165a:	f0 91 88 17 	lds	r31, 0x1788
    165e:	e6 89       	ldd	r30, Z+22	; 0x16
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	e8 9f       	mul	r30, r24
    1664:	f0 01       	movw	r30, r0
    1666:	11 24       	eor	r1, r1
    1668:	ed 59       	subi	r30, 0x9D	; 157
    166a:	f8 4e       	sbci	r31, 0xE8	; 232
    166c:	80 81       	ld	r24, Z
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	48 f0       	brcs	.+18     	; 0x1684 <xTaskIncrementTick+0x138>
    1672:	dd 24       	eor	r13, r13
    1674:	d3 94       	inc	r13
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <xTaskIncrementTick+0x138>
    1678:	80 91 2b 17 	lds	r24, 0x172B
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	80 93 2b 17 	sts	0x172B, r24
    1682:	d1 2c       	mov	r13, r1
    1684:	80 91 2a 17 	lds	r24, 0x172A
    1688:	88 23       	and	r24, r24
    168a:	11 f0       	breq	.+4      	; 0x1690 <xTaskIncrementTick+0x144>
    168c:	dd 24       	eor	r13, r13
    168e:	d3 94       	inc	r13
    1690:	8d 2d       	mov	r24, r13
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	08 95       	ret

000016a4 <xTaskResumeAll>:
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	0f 92       	push	r0
    16b6:	80 91 27 17 	lds	r24, 0x1727
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	80 93 27 17 	sts	0x1727, r24
    16c0:	80 91 27 17 	lds	r24, 0x1727
    16c4:	88 23       	and	r24, r24
    16c6:	11 f0       	breq	.+4      	; 0x16cc <xTaskResumeAll+0x28>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	4e c0       	rjmp	.+156    	; 0x1768 <xTaskResumeAll+0xc4>
    16cc:	80 91 30 17 	lds	r24, 0x1730
    16d0:	88 23       	and	r24, r24
    16d2:	d1 f3       	breq	.-12     	; 0x16c8 <xTaskResumeAll+0x24>
    16d4:	99 e0       	ldi	r25, 0x09	; 9
    16d6:	f9 2e       	mov	r15, r25
    16d8:	ee 24       	eor	r14, r14
    16da:	e3 94       	inc	r14
    16dc:	80 91 44 17 	lds	r24, 0x1744
    16e0:	88 23       	and	r24, r24
    16e2:	39 f1       	breq	.+78     	; 0x1732 <xTaskResumeAll+0x8e>
    16e4:	e0 91 49 17 	lds	r30, 0x1749
    16e8:	f0 91 4a 17 	lds	r31, 0x174A
    16ec:	c6 81       	ldd	r28, Z+6	; 0x06
    16ee:	d7 81       	ldd	r29, Z+7	; 0x07
    16f0:	ce 01       	movw	r24, r28
    16f2:	0c 96       	adiw	r24, 0x0c	; 12
    16f4:	c2 d8       	rcall	.-3708   	; 0x87a <uxListRemove>
    16f6:	8e 01       	movw	r16, r28
    16f8:	0e 5f       	subi	r16, 0xFE	; 254
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	c8 01       	movw	r24, r16
    16fe:	bd d8       	rcall	.-3718   	; 0x87a <uxListRemove>
    1700:	8e 89       	ldd	r24, Y+22	; 0x16
    1702:	90 91 2d 17 	lds	r25, 0x172D
    1706:	98 17       	cp	r25, r24
    1708:	10 f4       	brcc	.+4      	; 0x170e <xTaskResumeAll+0x6a>
    170a:	80 93 2d 17 	sts	0x172D, r24
    170e:	f8 9e       	mul	r15, r24
    1710:	c0 01       	movw	r24, r0
    1712:	11 24       	eor	r1, r1
    1714:	b8 01       	movw	r22, r16
    1716:	8d 59       	subi	r24, 0x9D	; 157
    1718:	98 4e       	sbci	r25, 0xE8	; 232
    171a:	56 d8       	rcall	.-3924   	; 0x7c8 <vListInsertEnd>
    171c:	e0 91 87 17 	lds	r30, 0x1787
    1720:	f0 91 88 17 	lds	r31, 0x1788
    1724:	9e 89       	ldd	r25, Y+22	; 0x16
    1726:	86 89       	ldd	r24, Z+22	; 0x16
    1728:	98 17       	cp	r25, r24
    172a:	c0 f2       	brcs	.-80     	; 0x16dc <xTaskResumeAll+0x38>
    172c:	e0 92 2a 17 	sts	0x172A, r14
    1730:	d5 cf       	rjmp	.-86     	; 0x16dc <xTaskResumeAll+0x38>
    1732:	80 91 2b 17 	lds	r24, 0x172B
    1736:	81 11       	cpse	r24, r1
    1738:	08 c0       	rjmp	.+16     	; 0x174a <xTaskResumeAll+0xa6>
    173a:	80 91 2a 17 	lds	r24, 0x172A
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	09 f0       	breq	.+2      	; 0x1744 <xTaskResumeAll+0xa0>
    1742:	c2 cf       	rjmp	.-124    	; 0x16c8 <xTaskResumeAll+0x24>
    1744:	c6 da       	rcall	.-2676   	; 0xcd2 <vPortYield>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <xTaskResumeAll+0xc4>
    174a:	c1 e0       	ldi	r28, 0x01	; 1
    174c:	80 91 2b 17 	lds	r24, 0x172B
    1750:	88 23       	and	r24, r24
    1752:	99 f3       	breq	.-26     	; 0x173a <xTaskResumeAll+0x96>
    1754:	fb de       	rcall	.-522    	; 0x154c <xTaskIncrementTick>
    1756:	81 11       	cpse	r24, r1
    1758:	c0 93 2a 17 	sts	0x172A, r28
    175c:	80 91 2b 17 	lds	r24, 0x172B
    1760:	81 50       	subi	r24, 0x01	; 1
    1762:	80 93 2b 17 	sts	0x172B, r24
    1766:	f2 cf       	rjmp	.-28     	; 0x174c <xTaskResumeAll+0xa8>
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	08 95       	ret

0000177a <vTaskDelay>:
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	8c 01       	movw	r16, r24
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	11 f4       	brne	.+4      	; 0x178c <vTaskDelay+0x12>
    1788:	a4 da       	rcall	.-2744   	; 0xcd2 <vPortYield>
    178a:	12 c0       	rjmp	.+36     	; 0x17b0 <vTaskDelay+0x36>
    178c:	d9 de       	rcall	.-590    	; 0x1540 <vTaskSuspendAll>
    178e:	c0 91 2e 17 	lds	r28, 0x172E
    1792:	d0 91 2f 17 	lds	r29, 0x172F
    1796:	c0 0f       	add	r28, r16
    1798:	d1 1f       	adc	r29, r17
    179a:	80 91 87 17 	lds	r24, 0x1787
    179e:	90 91 88 17 	lds	r25, 0x1788
    17a2:	02 96       	adiw	r24, 0x02	; 2
    17a4:	6a d8       	rcall	.-3884   	; 0x87a <uxListRemove>
    17a6:	ce 01       	movw	r24, r28
    17a8:	7d dd       	rcall	.-1286   	; 0x12a4 <prvAddCurrentTaskToDelayedList>
    17aa:	7c df       	rcall	.-264    	; 0x16a4 <xTaskResumeAll>
    17ac:	88 23       	and	r24, r24
    17ae:	61 f3       	breq	.-40     	; 0x1788 <vTaskDelay+0xe>
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <prvIdleTask>:
    17ba:	80 91 3a 17 	lds	r24, 0x173A
    17be:	88 23       	and	r24, r24
    17c0:	31 f1       	breq	.+76     	; 0x180e <prvIdleTask+0x54>
    17c2:	be de       	rcall	.-644    	; 0x1540 <vTaskSuspendAll>
    17c4:	c0 91 3b 17 	lds	r28, 0x173B
    17c8:	6d df       	rcall	.-294    	; 0x16a4 <xTaskResumeAll>
    17ca:	cc 23       	and	r28, r28
    17cc:	b1 f3       	breq	.-20     	; 0x17ba <prvIdleTask>
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	0f 92       	push	r0
    17d4:	e0 91 40 17 	lds	r30, 0x1740
    17d8:	f0 91 41 17 	lds	r31, 0x1741
    17dc:	c6 81       	ldd	r28, Z+6	; 0x06
    17de:	d7 81       	ldd	r29, Z+7	; 0x07
    17e0:	ce 01       	movw	r24, r28
    17e2:	02 96       	adiw	r24, 0x02	; 2
    17e4:	4a d8       	rcall	.-3948   	; 0x87a <uxListRemove>
    17e6:	80 91 30 17 	lds	r24, 0x1730
    17ea:	81 50       	subi	r24, 0x01	; 1
    17ec:	80 93 30 17 	sts	0x1730, r24
    17f0:	80 91 3a 17 	lds	r24, 0x173A
    17f4:	81 50       	subi	r24, 0x01	; 1
    17f6:	80 93 3a 17 	sts	0x173A, r24
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vPortFree>
    1806:	ce 01       	movw	r24, r28
    1808:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vPortFree>
    180c:	d6 cf       	rjmp	.-84     	; 0x17ba <prvIdleTask>
    180e:	80 91 63 17 	lds	r24, 0x1763
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	90 f2       	brcs	.-92     	; 0x17ba <prvIdleTask>
    1816:	5d da       	rcall	.-2886   	; 0xcd2 <vPortYield>
    1818:	d0 cf       	rjmp	.-96     	; 0x17ba <prvIdleTask>

0000181a <vTaskSwitchContext>:
    181a:	80 91 27 17 	lds	r24, 0x1727
    181e:	88 23       	and	r24, r24
    1820:	21 f0       	breq	.+8      	; 0x182a <vTaskSwitchContext+0x10>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 2a 17 	sts	0x172A, r24
    1828:	08 95       	ret
    182a:	10 92 2a 17 	sts	0x172A, r1
    182e:	99 e0       	ldi	r25, 0x09	; 9
    1830:	e0 91 2d 17 	lds	r30, 0x172D
    1834:	9e 9f       	mul	r25, r30
    1836:	f0 01       	movw	r30, r0
    1838:	11 24       	eor	r1, r1
    183a:	ed 59       	subi	r30, 0x9D	; 157
    183c:	f8 4e       	sbci	r31, 0xE8	; 232
    183e:	80 81       	ld	r24, Z
    1840:	81 11       	cpse	r24, r1
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vTaskSwitchContext+0x36>
    1844:	80 91 2d 17 	lds	r24, 0x172D
    1848:	81 50       	subi	r24, 0x01	; 1
    184a:	80 93 2d 17 	sts	0x172D, r24
    184e:	f0 cf       	rjmp	.-32     	; 0x1830 <vTaskSwitchContext+0x16>
    1850:	e0 91 2d 17 	lds	r30, 0x172D
    1854:	89 e0       	ldi	r24, 0x09	; 9
    1856:	e8 9f       	mul	r30, r24
    1858:	f0 01       	movw	r30, r0
    185a:	11 24       	eor	r1, r1
    185c:	ed 59       	subi	r30, 0x9D	; 157
    185e:	f8 4e       	sbci	r31, 0xE8	; 232
    1860:	a1 81       	ldd	r26, Z+1	; 0x01
    1862:	b2 81       	ldd	r27, Z+2	; 0x02
    1864:	12 96       	adiw	r26, 0x02	; 2
    1866:	0d 90       	ld	r0, X+
    1868:	bc 91       	ld	r27, X
    186a:	a0 2d       	mov	r26, r0
    186c:	b2 83       	std	Z+2, r27	; 0x02
    186e:	a1 83       	std	Z+1, r26	; 0x01
    1870:	cf 01       	movw	r24, r30
    1872:	03 96       	adiw	r24, 0x03	; 3
    1874:	a8 17       	cp	r26, r24
    1876:	b9 07       	cpc	r27, r25
    1878:	31 f4       	brne	.+12     	; 0x1886 <vTaskSwitchContext+0x6c>
    187a:	12 96       	adiw	r26, 0x02	; 2
    187c:	8d 91       	ld	r24, X+
    187e:	9c 91       	ld	r25, X
    1880:	13 97       	sbiw	r26, 0x03	; 3
    1882:	92 83       	std	Z+2, r25	; 0x02
    1884:	81 83       	std	Z+1, r24	; 0x01
    1886:	01 80       	ldd	r0, Z+1	; 0x01
    1888:	f2 81       	ldd	r31, Z+2	; 0x02
    188a:	e0 2d       	mov	r30, r0
    188c:	86 81       	ldd	r24, Z+6	; 0x06
    188e:	97 81       	ldd	r25, Z+7	; 0x07
    1890:	90 93 88 17 	sts	0x1788, r25
    1894:	80 93 87 17 	sts	0x1787, r24
    1898:	08 95       	ret

0000189a <vTaskPlaceOnEventList>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	eb 01       	movw	r28, r22
    18a0:	60 91 87 17 	lds	r22, 0x1787
    18a4:	70 91 88 17 	lds	r23, 0x1788
    18a8:	64 5f       	subi	r22, 0xF4	; 244
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	0e 94 05 04 	call	0x80a	; 0x80a <vListInsert>
    18b0:	80 91 87 17 	lds	r24, 0x1787
    18b4:	90 91 88 17 	lds	r25, 0x1788
    18b8:	02 96       	adiw	r24, 0x02	; 2
    18ba:	0e 94 3d 04 	call	0x87a	; 0x87a <uxListRemove>
    18be:	cf 3f       	cpi	r28, 0xFF	; 255
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	d8 07       	cpc	r29, r24
    18c4:	61 f4       	brne	.+24     	; 0x18de <vTaskPlaceOnEventList+0x44>
    18c6:	60 91 87 17 	lds	r22, 0x1787
    18ca:	70 91 88 17 	lds	r23, 0x1788
    18ce:	6e 5f       	subi	r22, 0xFE	; 254
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	81 e3       	ldi	r24, 0x31	; 49
    18d4:	97 e1       	ldi	r25, 0x17	; 23
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <vListInsertEnd>
    18de:	80 91 2e 17 	lds	r24, 0x172E
    18e2:	90 91 2f 17 	lds	r25, 0x172F
    18e6:	8c 0f       	add	r24, r28
    18e8:	9d 1f       	adc	r25, r29
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	da cc       	rjmp	.-1612   	; 0x12a4 <prvAddCurrentTaskToDelayedList>

000018f0 <xTaskRemoveFromEventList>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	dc 01       	movw	r26, r24
    18fa:	15 96       	adiw	r26, 0x05	; 5
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	16 97       	sbiw	r26, 0x06	; 6
    1902:	c6 81       	ldd	r28, Z+6	; 0x06
    1904:	d7 81       	ldd	r29, Z+7	; 0x07
    1906:	8e 01       	movw	r16, r28
    1908:	04 5f       	subi	r16, 0xF4	; 244
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	c8 01       	movw	r24, r16
    190e:	0e 94 3d 04 	call	0x87a	; 0x87a <uxListRemove>
    1912:	80 91 27 17 	lds	r24, 0x1727
    1916:	81 11       	cpse	r24, r1
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <xTaskRemoveFromEventList+0x52>
    191a:	0a 50       	subi	r16, 0x0A	; 10
    191c:	11 09       	sbc	r17, r1
    191e:	c8 01       	movw	r24, r16
    1920:	0e 94 3d 04 	call	0x87a	; 0x87a <uxListRemove>
    1924:	8e 89       	ldd	r24, Y+22	; 0x16
    1926:	90 91 2d 17 	lds	r25, 0x172D
    192a:	98 17       	cp	r25, r24
    192c:	10 f4       	brcc	.+4      	; 0x1932 <xTaskRemoveFromEventList+0x42>
    192e:	80 93 2d 17 	sts	0x172D, r24
    1932:	b9 e0       	ldi	r27, 0x09	; 9
    1934:	8b 9f       	mul	r24, r27
    1936:	c0 01       	movw	r24, r0
    1938:	11 24       	eor	r1, r1
    193a:	b8 01       	movw	r22, r16
    193c:	8d 59       	subi	r24, 0x9D	; 157
    193e:	98 4e       	sbci	r25, 0xE8	; 232
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <xTaskRemoveFromEventList+0x58>
    1942:	b8 01       	movw	r22, r16
    1944:	84 e4       	ldi	r24, 0x44	; 68
    1946:	97 e1       	ldi	r25, 0x17	; 23
    1948:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <vListInsertEnd>
    194c:	e0 91 87 17 	lds	r30, 0x1787
    1950:	f0 91 88 17 	lds	r31, 0x1788
    1954:	9e 89       	ldd	r25, Y+22	; 0x16
    1956:	86 89       	ldd	r24, Z+22	; 0x16
    1958:	89 17       	cp	r24, r25
    195a:	20 f4       	brcc	.+8      	; 0x1964 <xTaskRemoveFromEventList+0x74>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	80 93 2a 17 	sts	0x172A, r24
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <xTaskRemoveFromEventList+0x76>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <vTaskSetTimeOutState>:
    1970:	20 91 29 17 	lds	r18, 0x1729
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
    1978:	20 91 2e 17 	lds	r18, 0x172E
    197c:	30 91 2f 17 	lds	r19, 0x172F
    1980:	32 83       	std	Z+2, r19	; 0x02
    1982:	21 83       	std	Z+1, r18	; 0x01
    1984:	08 95       	ret

00001986 <xTaskCheckForTimeOut>:
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	0f 92       	push	r0
    1990:	e0 91 2e 17 	lds	r30, 0x172E
    1994:	f0 91 2f 17 	lds	r31, 0x172F
    1998:	db 01       	movw	r26, r22
    199a:	4d 91       	ld	r20, X+
    199c:	5c 91       	ld	r21, X
    199e:	4f 3f       	cpi	r20, 0xFF	; 255
    19a0:	bf ef       	ldi	r27, 0xFF	; 255
    19a2:	5b 07       	cpc	r21, r27
    19a4:	c9 f0       	breq	.+50     	; 0x19d8 <xTaskCheckForTimeOut+0x52>
    19a6:	b0 91 29 17 	lds	r27, 0x1729
    19aa:	ec 01       	movw	r28, r24
    19ac:	a8 81       	ld	r26, Y
    19ae:	29 81       	ldd	r18, Y+1	; 0x01
    19b0:	3a 81       	ldd	r19, Y+2	; 0x02
    19b2:	ba 17       	cp	r27, r26
    19b4:	19 f0       	breq	.+6      	; 0x19bc <xTaskCheckForTimeOut+0x36>
    19b6:	e2 17       	cp	r30, r18
    19b8:	f3 07       	cpc	r31, r19
    19ba:	80 f4       	brcc	.+32     	; 0x19dc <xTaskCheckForTimeOut+0x56>
    19bc:	df 01       	movw	r26, r30
    19be:	a2 1b       	sub	r26, r18
    19c0:	b3 0b       	sbc	r27, r19
    19c2:	a4 17       	cp	r26, r20
    19c4:	b5 07       	cpc	r27, r21
    19c6:	50 f4       	brcc	.+20     	; 0x19dc <xTaskCheckForTimeOut+0x56>
    19c8:	2e 1b       	sub	r18, r30
    19ca:	3f 0b       	sbc	r19, r31
    19cc:	24 0f       	add	r18, r20
    19ce:	35 1f       	adc	r19, r21
    19d0:	fb 01       	movw	r30, r22
    19d2:	31 83       	std	Z+1, r19	; 0x01
    19d4:	20 83       	st	Z, r18
    19d6:	cc df       	rcall	.-104    	; 0x1970 <vTaskSetTimeOutState>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	01 c0       	rjmp	.+2      	; 0x19de <xTaskCheckForTimeOut+0x58>
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	08 95       	ret

000019e8 <vTaskMissedYield>:
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 2a 17 	sts	0x172A, r24
    19ee:	08 95       	ret

000019f0 <vTaskPriorityInherit>:
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	ec 01       	movw	r28, r24
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <vTaskPriorityInherit+0x10>
    19fe:	48 c0       	rjmp	.+144    	; 0x1a90 <vTaskPriorityInherit+0xa0>
    1a00:	8e 89       	ldd	r24, Y+22	; 0x16
    1a02:	e0 91 87 17 	lds	r30, 0x1787
    1a06:	f0 91 88 17 	lds	r31, 0x1788
    1a0a:	96 89       	ldd	r25, Z+22	; 0x16
    1a0c:	89 17       	cp	r24, r25
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <vTaskPriorityInherit+0x22>
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <vTaskPriorityInherit+0xa0>
    1a12:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a14:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a16:	37 fd       	sbrc	r19, 7
    1a18:	0b c0       	rjmp	.+22     	; 0x1a30 <vTaskPriorityInherit+0x40>
    1a1a:	e0 91 87 17 	lds	r30, 0x1787
    1a1e:	f0 91 88 17 	lds	r31, 0x1788
    1a22:	96 89       	ldd	r25, Z+22	; 0x16
    1a24:	24 e0       	ldi	r18, 0x04	; 4
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	29 1b       	sub	r18, r25
    1a2a:	31 09       	sbc	r19, r1
    1a2c:	3d 87       	std	Y+13, r19	; 0x0d
    1a2e:	2c 87       	std	Y+12, r18	; 0x0c
    1a30:	29 e0       	ldi	r18, 0x09	; 9
    1a32:	82 9f       	mul	r24, r18
    1a34:	c0 01       	movw	r24, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	8d 59       	subi	r24, 0x9D	; 157
    1a3a:	98 4e       	sbci	r25, 0xE8	; 232
    1a3c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a3e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a40:	28 17       	cp	r18, r24
    1a42:	39 07       	cpc	r19, r25
    1a44:	f9 f4       	brne	.+62     	; 0x1a84 <vTaskPriorityInherit+0x94>
    1a46:	8e 01       	movw	r16, r28
    1a48:	0e 5f       	subi	r16, 0xFE	; 254
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 3d 04 	call	0x87a	; 0x87a <uxListRemove>
    1a52:	e0 91 87 17 	lds	r30, 0x1787
    1a56:	f0 91 88 17 	lds	r31, 0x1788
    1a5a:	86 89       	ldd	r24, Z+22	; 0x16
    1a5c:	8e 8b       	std	Y+22, r24	; 0x16
    1a5e:	90 91 2d 17 	lds	r25, 0x172D
    1a62:	98 17       	cp	r25, r24
    1a64:	10 f4       	brcc	.+4      	; 0x1a6a <vTaskPriorityInherit+0x7a>
    1a66:	80 93 2d 17 	sts	0x172D, r24
    1a6a:	29 e0       	ldi	r18, 0x09	; 9
    1a6c:	82 9f       	mul	r24, r18
    1a6e:	c0 01       	movw	r24, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	b8 01       	movw	r22, r16
    1a74:	8d 59       	subi	r24, 0x9D	; 157
    1a76:	98 4e       	sbci	r25, 0xE8	; 232
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <vListInsertEnd>
    1a84:	e0 91 87 17 	lds	r30, 0x1787
    1a88:	f0 91 88 17 	lds	r31, 0x1788
    1a8c:	86 89       	ldd	r24, Z+22	; 0x16
    1a8e:	8e 8b       	std	Y+22, r24	; 0x16
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <xTaskPriorityDisinherit>:
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	ec 01       	movw	r28, r24
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <xTaskPriorityDisinherit+0x12>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	2b c0       	rjmp	.+86     	; 0x1b02 <xTaskPriorityDisinherit+0x68>
    1aac:	8a a1       	ldd	r24, Y+34	; 0x22
    1aae:	81 50       	subi	r24, 0x01	; 1
    1ab0:	8a a3       	std	Y+34, r24	; 0x22
    1ab2:	2e 89       	ldd	r18, Y+22	; 0x16
    1ab4:	99 a1       	ldd	r25, Y+33	; 0x21
    1ab6:	29 17       	cp	r18, r25
    1ab8:	b9 f3       	breq	.-18     	; 0x1aa8 <xTaskPriorityDisinherit+0xe>
    1aba:	81 11       	cpse	r24, r1
    1abc:	f5 cf       	rjmp	.-22     	; 0x1aa8 <xTaskPriorityDisinherit+0xe>
    1abe:	8e 01       	movw	r16, r28
    1ac0:	0e 5f       	subi	r16, 0xFE	; 254
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	0e 94 3d 04 	call	0x87a	; 0x87a <uxListRemove>
    1aca:	89 a1       	ldd	r24, Y+33	; 0x21
    1acc:	8e 8b       	std	Y+22, r24	; 0x16
    1ace:	48 2f       	mov	r20, r24
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	24 e0       	ldi	r18, 0x04	; 4
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	24 1b       	sub	r18, r20
    1ad8:	35 0b       	sbc	r19, r21
    1ada:	3d 87       	std	Y+13, r19	; 0x0d
    1adc:	2c 87       	std	Y+12, r18	; 0x0c
    1ade:	90 91 2d 17 	lds	r25, 0x172D
    1ae2:	98 17       	cp	r25, r24
    1ae4:	10 f4       	brcc	.+4      	; 0x1aea <xTaskPriorityDisinherit+0x50>
    1ae6:	80 93 2d 17 	sts	0x172D, r24
    1aea:	29 e0       	ldi	r18, 0x09	; 9
    1aec:	24 9f       	mul	r18, r20
    1aee:	c0 01       	movw	r24, r0
    1af0:	25 9f       	mul	r18, r21
    1af2:	90 0d       	add	r25, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	b8 01       	movw	r22, r16
    1af8:	8d 59       	subi	r24, 0x9D	; 157
    1afa:	98 4e       	sbci	r25, 0xE8	; 232
    1afc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <vListInsertEnd>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    1b0c:	80 91 87 17 	lds	r24, 0x1787
    1b10:	90 91 88 17 	lds	r25, 0x1788
    1b14:	89 2b       	or	r24, r25
    1b16:	39 f0       	breq	.+14     	; 0x1b26 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    1b18:	e0 91 87 17 	lds	r30, 0x1787
    1b1c:	f0 91 88 17 	lds	r31, 0x1788
    1b20:	82 a1       	ldd	r24, Z+34	; 0x22
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    1b26:	80 91 87 17 	lds	r24, 0x1787
    1b2a:	90 91 88 17 	lds	r25, 0x1788
	}
    1b2e:	08 95       	ret

00001b30 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b30:	10 92 f6 17 	sts	0x17F6, r1
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 93 f4 17 	sts	0x17F4, r24
    1b3a:	10 92 f3 17 	sts	0x17F3, r1
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	84 e1       	ldi	r24, 0x14	; 20
    1b42:	0e 94 db 16 	call	0x2db6	; 0x2db6 <digitalWrite>
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	85 e1       	ldi	r24, 0x15	; 21
    1b4a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <digitalWrite>
    1b4e:	e9 eb       	ldi	r30, 0xB9	; 185
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 7f       	andi	r24, 0xFE	; 254
    1b56:	80 83       	st	Z, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	8d 7f       	andi	r24, 0xFD	; 253
    1b5c:	80 83       	st	Z, r24
    1b5e:	88 e4       	ldi	r24, 0x48	; 72
    1b60:	80 93 b8 00 	sts	0x00B8, r24
    1b64:	85 e4       	ldi	r24, 0x45	; 69
    1b66:	80 93 bc 00 	sts	0x00BC, r24
    1b6a:	08 95       	ret

00001b6c <twi_readFrom>:
    1b6c:	41 32       	cpi	r20, 0x21	; 33
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <twi_readFrom+0x6>
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <twi_readFrom+0x84>
    1b72:	90 91 f6 17 	lds	r25, 0x17F6
    1b76:	91 11       	cpse	r25, r1
    1b78:	fc cf       	rjmp	.-8      	; 0x1b72 <twi_readFrom+0x6>
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	90 93 f6 17 	sts	0x17F6, r25
    1b80:	20 93 f4 17 	sts	0x17F4, r18
    1b84:	2f ef       	ldi	r18, 0xFF	; 255
    1b86:	20 93 89 17 	sts	0x1789, r18
    1b8a:	10 92 ce 17 	sts	0x17CE, r1
    1b8e:	24 0f       	add	r18, r20
    1b90:	20 93 cd 17 	sts	0x17CD, r18
    1b94:	90 93 f5 17 	sts	0x17F5, r25
    1b98:	90 91 f5 17 	lds	r25, 0x17F5
    1b9c:	88 0f       	add	r24, r24
    1b9e:	89 2b       	or	r24, r25
    1ba0:	80 93 f5 17 	sts	0x17F5, r24
    1ba4:	80 91 f3 17 	lds	r24, 0x17F3
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	41 f4       	brne	.+16     	; 0x1bbc <twi_readFrom+0x50>
    1bac:	10 92 f3 17 	sts	0x17F3, r1
    1bb0:	80 91 f5 17 	lds	r24, 0x17F5
    1bb4:	80 93 bb 00 	sts	0x00BB, r24
    1bb8:	85 ec       	ldi	r24, 0xC5	; 197
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <twi_readFrom+0x52>
    1bbc:	85 ee       	ldi	r24, 0xE5	; 229
    1bbe:	80 93 bc 00 	sts	0x00BC, r24
    1bc2:	80 91 f6 17 	lds	r24, 0x17F6
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	e1 f3       	breq	.-8      	; 0x1bc2 <twi_readFrom+0x56>
    1bca:	80 91 ce 17 	lds	r24, 0x17CE
    1bce:	84 17       	cp	r24, r20
    1bd0:	10 f4       	brcc	.+4      	; 0x1bd6 <twi_readFrom+0x6a>
    1bd2:	40 91 ce 17 	lds	r20, 0x17CE
    1bd6:	2f ec       	ldi	r18, 0xCF	; 207
    1bd8:	37 e1       	ldi	r19, 0x17	; 23
    1bda:	fb 01       	movw	r30, r22
    1bdc:	d9 01       	movw	r26, r18
    1bde:	8a 2f       	mov	r24, r26
    1be0:	82 1b       	sub	r24, r18
    1be2:	84 17       	cp	r24, r20
    1be4:	18 f4       	brcc	.+6      	; 0x1bec <twi_readFrom+0x80>
    1be6:	8d 91       	ld	r24, X+
    1be8:	81 93       	st	Z+, r24
    1bea:	f9 cf       	rjmp	.-14     	; 0x1bde <twi_readFrom+0x72>
    1bec:	84 2f       	mov	r24, r20
    1bee:	08 95       	ret
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	08 95       	ret

00001bf4 <twi_writeTo>:
    1bf4:	0f 93       	push	r16
    1bf6:	41 32       	cpi	r20, 0x21	; 33
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <twi_writeTo+0x8>
    1bfa:	46 c0       	rjmp	.+140    	; 0x1c88 <twi_writeTo+0x94>
    1bfc:	90 91 f6 17 	lds	r25, 0x17F6
    1c00:	91 11       	cpse	r25, r1
    1c02:	fc cf       	rjmp	.-8      	; 0x1bfc <twi_writeTo+0x8>
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	90 93 f6 17 	sts	0x17F6, r25
    1c0a:	00 93 f4 17 	sts	0x17F4, r16
    1c0e:	9f ef       	ldi	r25, 0xFF	; 255
    1c10:	90 93 89 17 	sts	0x1789, r25
    1c14:	10 92 ce 17 	sts	0x17CE, r1
    1c18:	40 93 cd 17 	sts	0x17CD, r20
    1c1c:	fb 01       	movw	r30, r22
    1c1e:	6f ec       	ldi	r22, 0xCF	; 207
    1c20:	77 e1       	ldi	r23, 0x17	; 23
    1c22:	db 01       	movw	r26, r22
    1c24:	9a 2f       	mov	r25, r26
    1c26:	96 1b       	sub	r25, r22
    1c28:	94 17       	cp	r25, r20
    1c2a:	18 f4       	brcc	.+6      	; 0x1c32 <twi_writeTo+0x3e>
    1c2c:	91 91       	ld	r25, Z+
    1c2e:	9d 93       	st	X+, r25
    1c30:	f9 cf       	rjmp	.-14     	; 0x1c24 <twi_writeTo+0x30>
    1c32:	10 92 f5 17 	sts	0x17F5, r1
    1c36:	90 91 f5 17 	lds	r25, 0x17F5
    1c3a:	88 0f       	add	r24, r24
    1c3c:	89 2b       	or	r24, r25
    1c3e:	80 93 f5 17 	sts	0x17F5, r24
    1c42:	80 91 f3 17 	lds	r24, 0x17F3
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	41 f4       	brne	.+16     	; 0x1c5a <twi_writeTo+0x66>
    1c4a:	10 92 f3 17 	sts	0x17F3, r1
    1c4e:	80 91 f5 17 	lds	r24, 0x17F5
    1c52:	80 93 bb 00 	sts	0x00BB, r24
    1c56:	85 ec       	ldi	r24, 0xC5	; 197
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <twi_writeTo+0x68>
    1c5a:	85 ee       	ldi	r24, 0xE5	; 229
    1c5c:	80 93 bc 00 	sts	0x00BC, r24
    1c60:	22 23       	and	r18, r18
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <twi_writeTo+0x78>
    1c64:	80 91 f6 17 	lds	r24, 0x17F6
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	e1 f3       	breq	.-8      	; 0x1c64 <twi_writeTo+0x70>
    1c6c:	80 91 89 17 	lds	r24, 0x1789
    1c70:	8f 3f       	cpi	r24, 0xFF	; 255
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <twi_writeTo+0x98>
    1c74:	80 91 89 17 	lds	r24, 0x1789
    1c78:	80 32       	cpi	r24, 0x20	; 32
    1c7a:	51 f0       	breq	.+20     	; 0x1c90 <twi_writeTo+0x9c>
    1c7c:	80 91 89 17 	lds	r24, 0x1789
    1c80:	80 33       	cpi	r24, 0x30	; 48
    1c82:	41 f4       	brne	.+16     	; 0x1c94 <twi_writeTo+0xa0>
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	07 c0       	rjmp	.+14     	; 0x1c96 <twi_writeTo+0xa2>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <twi_writeTo+0xa2>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <twi_writeTo+0xa2>
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <twi_writeTo+0xa2>
    1c94:	84 e0       	ldi	r24, 0x04	; 4
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <twi_transmit>:
    1c9a:	61 32       	cpi	r22, 0x21	; 33
    1c9c:	98 f4       	brcc	.+38     	; 0x1cc4 <twi_transmit+0x2a>
    1c9e:	20 91 f6 17 	lds	r18, 0x17F6
    1ca2:	24 30       	cpi	r18, 0x04	; 4
    1ca4:	89 f4       	brne	.+34     	; 0x1cc8 <twi_transmit+0x2e>
    1ca6:	60 93 ab 17 	sts	0x17AB, r22
    1caa:	fc 01       	movw	r30, r24
    1cac:	8d ea       	ldi	r24, 0xAD	; 173
    1cae:	97 e1       	ldi	r25, 0x17	; 23
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	2a 2f       	mov	r18, r26
    1cb4:	28 1b       	sub	r18, r24
    1cb6:	26 17       	cp	r18, r22
    1cb8:	18 f4       	brcc	.+6      	; 0x1cc0 <twi_transmit+0x26>
    1cba:	21 91       	ld	r18, Z+
    1cbc:	2d 93       	st	X+, r18
    1cbe:	f9 cf       	rjmp	.-14     	; 0x1cb2 <twi_transmit+0x18>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	08 95       	ret
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	08 95       	ret
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	08 95       	ret

00001ccc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1ccc:	85 ed       	ldi	r24, 0xD5	; 213
    1cce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1cd2:	80 91 bc 00 	lds	r24, 0x00BC
    1cd6:	84 fd       	sbrc	r24, 4
    1cd8:	fc cf       	rjmp	.-8      	; 0x1cd2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1cda:	10 92 f6 17 	sts	0x17F6, r1
    1cde:	08 95       	ret

00001ce0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1ce0:	85 ec       	ldi	r24, 0xC5	; 197
    1ce2:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1ce6:	10 92 f6 17 	sts	0x17F6, r1
    1cea:	08 95       	ret

00001cec <__vector_39>:
}

ISR(TWI_vect)
{
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	0b b6       	in	r0, 0x3b	; 59
    1cf8:	0f 92       	push	r0
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
  switch(TW_STATUS){
    1d12:	80 91 b9 00 	lds	r24, 0x00B9
    1d16:	88 7f       	andi	r24, 0xF8	; 248
    1d18:	80 36       	cpi	r24, 0x60	; 96
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <__vector_39+0x32>
    1d1c:	9c c0       	rjmp	.+312    	; 0x1e56 <__vector_39+0x16a>
    1d1e:	68 f5       	brcc	.+90     	; 0x1d7a <__vector_39+0x8e>
    1d20:	88 32       	cpi	r24, 0x28	; 40
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <__vector_39+0x3a>
    1d24:	5b c0       	rjmp	.+182    	; 0x1ddc <__vector_39+0xf0>
    1d26:	90 f4       	brcc	.+36     	; 0x1d4c <__vector_39+0x60>
    1d28:	80 31       	cpi	r24, 0x10	; 16
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <__vector_39+0x42>
    1d2c:	54 c0       	rjmp	.+168    	; 0x1dd6 <__vector_39+0xea>
    1d2e:	38 f4       	brcc	.+14     	; 0x1d3e <__vector_39+0x52>
    1d30:	88 23       	and	r24, r24
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <__vector_39+0x4a>
    1d34:	f3 c0       	rjmp	.+486    	; 0x1f1c <__vector_39+0x230>
    1d36:	88 30       	cpi	r24, 0x08	; 8
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__vector_39+0x50>
    1d3a:	4d c0       	rjmp	.+154    	; 0x1dd6 <__vector_39+0xea>
    1d3c:	f2 c0       	rjmp	.+484    	; 0x1f22 <__vector_39+0x236>
    1d3e:	88 31       	cpi	r24, 0x18	; 24
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <__vector_39+0x58>
    1d42:	4c c0       	rjmp	.+152    	; 0x1ddc <__vector_39+0xf0>
    1d44:	80 32       	cpi	r24, 0x20	; 32
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__vector_39+0x5e>
    1d48:	5d c0       	rjmp	.+186    	; 0x1e04 <__vector_39+0x118>
    1d4a:	eb c0       	rjmp	.+470    	; 0x1f22 <__vector_39+0x236>
    1d4c:	80 34       	cpi	r24, 0x40	; 64
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <__vector_39+0x66>
    1d50:	68 c0       	rjmp	.+208    	; 0x1e22 <__vector_39+0x136>
    1d52:	48 f4       	brcc	.+18     	; 0x1d66 <__vector_39+0x7a>
    1d54:	80 33       	cpi	r24, 0x30	; 48
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <__vector_39+0x6e>
    1d58:	55 c0       	rjmp	.+170    	; 0x1e04 <__vector_39+0x118>
    1d5a:	88 33       	cpi	r24, 0x38	; 56
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_39+0x74>
    1d5e:	e1 c0       	rjmp	.+450    	; 0x1f22 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d60:	80 93 89 17 	sts	0x1789, r24
    1d64:	a7 c0       	rjmp	.+334    	; 0x1eb4 <__vector_39+0x1c8>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d66:	80 35       	cpi	r24, 0x50	; 80
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_39+0x80>
    1d6a:	4f c0       	rjmp	.+158    	; 0x1e0a <__vector_39+0x11e>
    1d6c:	88 35       	cpi	r24, 0x58	; 88
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <__vector_39+0x86>
    1d70:	5d c0       	rjmp	.+186    	; 0x1e2c <__vector_39+0x140>
    1d72:	88 34       	cpi	r24, 0x48	; 72
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <__vector_39+0x8c>
    1d76:	d5 c0       	rjmp	.+426    	; 0x1f22 <__vector_39+0x236>
    1d78:	d3 c0       	rjmp	.+422    	; 0x1f20 <__vector_39+0x234>
    1d7a:	88 39       	cpi	r24, 0x98	; 152
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <__vector_39+0x94>
    1d7e:	c4 c0       	rjmp	.+392    	; 0x1f08 <__vector_39+0x21c>
    1d80:	a8 f4       	brcc	.+42     	; 0x1dac <__vector_39+0xc0>
    1d82:	88 37       	cpi	r24, 0x78	; 120
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <__vector_39+0x9c>
    1d86:	67 c0       	rjmp	.+206    	; 0x1e56 <__vector_39+0x16a>
    1d88:	38 f4       	brcc	.+14     	; 0x1d98 <__vector_39+0xac>
    1d8a:	88 36       	cpi	r24, 0x68	; 104
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <__vector_39+0xa4>
    1d8e:	63 c0       	rjmp	.+198    	; 0x1e56 <__vector_39+0x16a>
    1d90:	80 37       	cpi	r24, 0x70	; 112
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <__vector_39+0xaa>
    1d94:	60 c0       	rjmp	.+192    	; 0x1e56 <__vector_39+0x16a>
    1d96:	c5 c0       	rjmp	.+394    	; 0x1f22 <__vector_39+0x236>
    1d98:	88 38       	cpi	r24, 0x88	; 136
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__vector_39+0xb2>
    1d9c:	b5 c0       	rjmp	.+362    	; 0x1f08 <__vector_39+0x21c>
    1d9e:	80 39       	cpi	r24, 0x90	; 144
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <__vector_39+0xb8>
    1da2:	5f c0       	rjmp	.+190    	; 0x1e62 <__vector_39+0x176>
    1da4:	80 38       	cpi	r24, 0x80	; 128
    1da6:	09 f0       	breq	.+2      	; 0x1daa <__vector_39+0xbe>
    1da8:	bc c0       	rjmp	.+376    	; 0x1f22 <__vector_39+0x236>
    1daa:	5b c0       	rjmp	.+182    	; 0x1e62 <__vector_39+0x176>
    1dac:	80 3b       	cpi	r24, 0xB0	; 176
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__vector_39+0xc6>
    1db0:	83 c0       	rjmp	.+262    	; 0x1eb8 <__vector_39+0x1cc>
    1db2:	38 f4       	brcc	.+14     	; 0x1dc2 <__vector_39+0xd6>
    1db4:	80 3a       	cpi	r24, 0xA0	; 160
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__vector_39+0xce>
    1db8:	66 c0       	rjmp	.+204    	; 0x1e86 <__vector_39+0x19a>
    1dba:	88 3a       	cpi	r24, 0xA8	; 168
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__vector_39+0xd4>
    1dbe:	7c c0       	rjmp	.+248    	; 0x1eb8 <__vector_39+0x1cc>
    1dc0:	b0 c0       	rjmp	.+352    	; 0x1f22 <__vector_39+0x236>
    1dc2:	80 3c       	cpi	r24, 0xC0	; 192
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <__vector_39+0xdc>
    1dc6:	a4 c0       	rjmp	.+328    	; 0x1f10 <__vector_39+0x224>
    1dc8:	88 3c       	cpi	r24, 0xC8	; 200
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__vector_39+0xe2>
    1dcc:	a1 c0       	rjmp	.+322    	; 0x1f10 <__vector_39+0x224>
    1dce:	88 3b       	cpi	r24, 0xB8	; 184
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <__vector_39+0xe8>
    1dd2:	87 c0       	rjmp	.+270    	; 0x1ee2 <__vector_39+0x1f6>
    1dd4:	a6 c0       	rjmp	.+332    	; 0x1f22 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1dd6:	80 91 f5 17 	lds	r24, 0x17F5
    1dda:	10 c0       	rjmp	.+32     	; 0x1dfc <__vector_39+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ddc:	90 91 ce 17 	lds	r25, 0x17CE
    1de0:	80 91 cd 17 	lds	r24, 0x17CD
    1de4:	98 17       	cp	r25, r24
    1de6:	70 f5       	brcc	.+92     	; 0x1e44 <__vector_39+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1de8:	e0 91 ce 17 	lds	r30, 0x17CE
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	8e 0f       	add	r24, r30
    1df0:	80 93 ce 17 	sts	0x17CE, r24
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e1 53       	subi	r30, 0x31	; 49
    1df8:	f8 4e       	sbci	r31, 0xE8	; 232
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e00:	85 ec       	ldi	r24, 0xC5	; 197
    1e02:	83 c0       	rjmp	.+262    	; 0x1f0a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e04:	80 93 89 17 	sts	0x1789, r24
    1e08:	8b c0       	rjmp	.+278    	; 0x1f20 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e0a:	e0 91 ce 17 	lds	r30, 0x17CE
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8e 0f       	add	r24, r30
    1e12:	80 93 ce 17 	sts	0x17CE, r24
    1e16:	80 91 bb 00 	lds	r24, 0x00BB
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	e1 53       	subi	r30, 0x31	; 49
    1e1e:	f8 4e       	sbci	r31, 0xE8	; 232
    1e20:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e22:	90 91 ce 17 	lds	r25, 0x17CE
    1e26:	80 91 cd 17 	lds	r24, 0x17CD
    1e2a:	6b c0       	rjmp	.+214    	; 0x1f02 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e2c:	e0 91 ce 17 	lds	r30, 0x17CE
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	8e 0f       	add	r24, r30
    1e34:	80 93 ce 17 	sts	0x17CE, r24
    1e38:	80 91 bb 00 	lds	r24, 0x00BB
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	e1 53       	subi	r30, 0x31	; 49
    1e40:	f8 4e       	sbci	r31, 0xE8	; 232
    1e42:	80 83       	st	Z, r24
	if (twi_sendStop)
    1e44:	80 91 f4 17 	lds	r24, 0x17F4
    1e48:	81 11       	cpse	r24, r1
    1e4a:	6a c0       	rjmp	.+212    	; 0x1f20 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 f3 17 	sts	0x17F3, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e52:	84 ea       	ldi	r24, 0xA4	; 164
    1e54:	5e c0       	rjmp	.+188    	; 0x1f12 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	80 93 f6 17 	sts	0x17F6, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e5c:	10 92 8a 17 	sts	0x178A, r1
    1e60:	cf cf       	rjmp	.-98     	; 0x1e00 <__vector_39+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e62:	80 91 8a 17 	lds	r24, 0x178A
    1e66:	80 32       	cpi	r24, 0x20	; 32
    1e68:	08 f0       	brcs	.+2      	; 0x1e6c <__vector_39+0x180>
    1e6a:	4e c0       	rjmp	.+156    	; 0x1f08 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1e6c:	e0 91 8a 17 	lds	r30, 0x178A
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8e 0f       	add	r24, r30
    1e74:	80 93 8a 17 	sts	0x178A, r24
    1e78:	80 91 bb 00 	lds	r24, 0x00BB
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	e5 57       	subi	r30, 0x75	; 117
    1e80:	f8 4e       	sbci	r31, 0xE8	; 232
    1e82:	80 83       	st	Z, r24
    1e84:	bd cf       	rjmp	.-134    	; 0x1e00 <__vector_39+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e86:	80 91 8a 17 	lds	r24, 0x178A
    1e8a:	80 32       	cpi	r24, 0x20	; 32
    1e8c:	30 f4       	brcc	.+12     	; 0x1e9a <__vector_39+0x1ae>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1e8e:	e0 91 8a 17 	lds	r30, 0x178A
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	e5 57       	subi	r30, 0x75	; 117
    1e96:	f8 4e       	sbci	r31, 0xE8	; 232
    1e98:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1e9a:	18 df       	rcall	.-464    	; 0x1ccc <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1e9c:	60 91 8a 17 	lds	r22, 0x178A
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	e0 91 ef 17 	lds	r30, 0x17EF
    1ea6:	f0 91 f0 17 	lds	r31, 0x17F0
    1eaa:	8b e8       	ldi	r24, 0x8B	; 139
    1eac:	97 e1       	ldi	r25, 0x17	; 23
    1eae:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1eb0:	10 92 8a 17 	sts	0x178A, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1eb4:	15 df       	rcall	.-470    	; 0x1ce0 <twi_releaseBus>
      break;
    1eb6:	35 c0       	rjmp	.+106    	; 0x1f22 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	80 93 f6 17 	sts	0x17F6, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ebe:	10 92 ac 17 	sts	0x17AC, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ec2:	10 92 ab 17 	sts	0x17AB, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ec6:	e0 91 f1 17 	lds	r30, 0x17F1
    1eca:	f0 91 f2 17 	lds	r31, 0x17F2
    1ece:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1ed0:	80 91 ab 17 	lds	r24, 0x17AB
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 ab 17 	sts	0x17AB, r24
        twi_txBuffer[0] = 0x00;
    1ede:	10 92 ad 17 	sts	0x17AD, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ee2:	e0 91 ac 17 	lds	r30, 0x17AC
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	8e 0f       	add	r24, r30
    1eea:	80 93 ac 17 	sts	0x17AC, r24
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	e3 55       	subi	r30, 0x53	; 83
    1ef2:	f8 4e       	sbci	r31, 0xE8	; 232
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1efa:	90 91 ac 17 	lds	r25, 0x17AC
    1efe:	80 91 ab 17 	lds	r24, 0x17AB
    1f02:	98 17       	cp	r25, r24
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <__vector_39+0x21c>
    1f06:	7c cf       	rjmp	.-264    	; 0x1e00 <__vector_39+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f08:	85 e8       	ldi	r24, 0x85	; 133
    1f0a:	80 93 bc 00 	sts	0x00BC, r24
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f10:	85 ec       	ldi	r24, 0xC5	; 197
    1f12:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1f16:	10 92 f6 17 	sts	0x17F6, r1
      break;
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1f1c:	10 92 89 17 	sts	0x1789, r1
      twi_stop();
    1f20:	d5 de       	rcall	.-598    	; 0x1ccc <twi_stop>
      break;
  }
}
    1f22:	ff 91       	pop	r31
    1f24:	ef 91       	pop	r30
    1f26:	bf 91       	pop	r27
    1f28:	af 91       	pop	r26
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	7f 91       	pop	r23
    1f30:	6f 91       	pop	r22
    1f32:	5f 91       	pop	r21
    1f34:	4f 91       	pop	r20
    1f36:	3f 91       	pop	r19
    1f38:	2f 91       	pop	r18
    1f3a:	0f 90       	pop	r0
    1f3c:	0b be       	out	0x3b, r0	; 59
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1f48:	80 91 27 18 	lds	r24, 0x1827
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	20 91 28 18 	lds	r18, 0x1828
    1f52:	82 1b       	sub	r24, r18
    1f54:	91 09       	sbc	r25, r1
    1f56:	08 95       	ret

00001f58 <_ZN7TwoWire4readEv>:
    1f58:	20 91 28 18 	lds	r18, 0x1828
    1f5c:	80 91 27 18 	lds	r24, 0x1827
    1f60:	28 17       	cp	r18, r24
    1f62:	50 f4       	brcc	.+20     	; 0x1f78 <_ZN7TwoWire4readEv+0x20>
    1f64:	e2 2f       	mov	r30, r18
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	e7 5d       	subi	r30, 0xD7	; 215
    1f6a:	f7 4e       	sbci	r31, 0xE7	; 231
    1f6c:	80 81       	ld	r24, Z
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	2f 5f       	subi	r18, 0xFF	; 255
    1f72:	20 93 28 18 	sts	0x1828, r18
    1f76:	08 95       	ret
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	9f ef       	ldi	r25, 0xFF	; 255
    1f7c:	08 95       	ret

00001f7e <_ZN7TwoWire4peekEv>:
    1f7e:	e0 91 28 18 	lds	r30, 0x1828
    1f82:	80 91 27 18 	lds	r24, 0x1827
    1f86:	e8 17       	cp	r30, r24
    1f88:	30 f4       	brcc	.+12     	; 0x1f96 <_ZN7TwoWire4peekEv+0x18>
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	e7 5d       	subi	r30, 0xD7	; 215
    1f8e:	f7 4e       	sbci	r31, 0xE7	; 231
    1f90:	80 81       	ld	r24, Z
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	08 95       	ret
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	9f ef       	ldi	r25, 0xFF	; 255
    1f9a:	08 95       	ret

00001f9c <_ZN7TwoWire5flushEv>:
    1f9c:	08 95       	ret

00001f9e <_ZN7TwoWire5writeEPKhj>:
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	7c 01       	movw	r14, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8a 01       	movw	r16, r20
    1fb4:	20 91 03 18 	lds	r18, 0x1803
    1fb8:	22 23       	and	r18, r18
    1fba:	89 f0       	breq	.+34     	; 0x1fde <_ZN7TwoWire5writeEPKhj+0x40>
    1fbc:	eb 01       	movw	r28, r22
    1fbe:	6b 01       	movw	r12, r22
    1fc0:	c4 0e       	add	r12, r20
    1fc2:	d5 1e       	adc	r13, r21
    1fc4:	cc 15       	cp	r28, r12
    1fc6:	dd 05       	cpc	r29, r13
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <_ZN7TwoWire5writeEPKhj+0x44>
    1fca:	69 91       	ld	r22, Y+
    1fcc:	d7 01       	movw	r26, r14
    1fce:	ed 91       	ld	r30, X+
    1fd0:	fc 91       	ld	r31, X
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	f0 81       	ld	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	c7 01       	movw	r24, r14
    1fda:	19 95       	eicall
    1fdc:	f3 cf       	rjmp	.-26     	; 0x1fc4 <_ZN7TwoWire5writeEPKhj+0x26>
    1fde:	64 2f       	mov	r22, r20
    1fe0:	5c de       	rcall	.-840    	; 0x1c9a <twi_transmit>
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <_ZN7TwoWire5writeEh>:
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	1f 92       	push	r1
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	69 83       	std	Y+1, r22	; 0x01
    2002:	20 91 03 18 	lds	r18, 0x1803
    2006:	22 23       	and	r18, r18
    2008:	d1 f0       	breq	.+52     	; 0x203e <_ZN7TwoWire5writeEh+0x48>
    200a:	20 91 04 18 	lds	r18, 0x1804
    200e:	20 32       	cpi	r18, 0x20	; 32
    2010:	40 f0       	brcs	.+16     	; 0x2022 <_ZN7TwoWire5writeEh+0x2c>
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	33 83       	std	Z+3, r19	; 0x03
    201a:	22 83       	std	Z+2, r18	; 0x02
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	14 c0       	rjmp	.+40     	; 0x204a <_ZN7TwoWire5writeEh+0x54>
    2022:	80 91 05 18 	lds	r24, 0x1805
    2026:	e8 2f       	mov	r30, r24
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	ea 5f       	subi	r30, 0xFA	; 250
    202c:	f7 4e       	sbci	r31, 0xE7	; 231
    202e:	99 81       	ldd	r25, Y+1	; 0x01
    2030:	90 83       	st	Z, r25
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	80 93 05 18 	sts	0x1805, r24
    2038:	80 93 04 18 	sts	0x1804, r24
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <_ZN7TwoWire5writeEh+0x50>
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	2a de       	rcall	.-940    	; 0x1c9a <twi_transmit>
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0f 90       	pop	r0
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <_ZN7TwoWireC1Ev>:
    2052:	fc 01       	movw	r30, r24
    2054:	13 82       	std	Z+3, r1	; 0x03
    2056:	12 82       	std	Z+2, r1	; 0x02
    2058:	48 ee       	ldi	r20, 0xE8	; 232
    205a:	53 e0       	ldi	r21, 0x03	; 3
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	44 83       	std	Z+4, r20	; 0x04
    2062:	55 83       	std	Z+5, r21	; 0x05
    2064:	66 83       	std	Z+6, r22	; 0x06
    2066:	77 83       	std	Z+7, r23	; 0x07
    2068:	8f ec       	ldi	r24, 0xCF	; 207
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	08 95       	ret

00002072 <_ZN7TwoWire5beginEv>:
    2072:	10 92 28 18 	sts	0x1828, r1
    2076:	10 92 27 18 	sts	0x1827, r1
    207a:	10 92 05 18 	sts	0x1805, r1
    207e:	10 92 04 18 	sts	0x1804, r1
    2082:	56 cd       	rjmp	.-1364   	; 0x1b30 <twi_init>

00002084 <_ZN7TwoWire11requestFromEhhh>:
    2084:	86 2f       	mov	r24, r22
    2086:	41 32       	cpi	r20, 0x21	; 33
    2088:	08 f0       	brcs	.+2      	; 0x208c <_ZN7TwoWire11requestFromEhhh+0x8>
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	69 e2       	ldi	r22, 0x29	; 41
    208e:	78 e1       	ldi	r23, 0x18	; 24
    2090:	6d dd       	rcall	.-1318   	; 0x1b6c <twi_readFrom>
    2092:	10 92 28 18 	sts	0x1828, r1
    2096:	80 93 27 18 	sts	0x1827, r24
    209a:	08 95       	ret

0000209c <_ZN7TwoWire11requestFromEhh>:
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	f2 cf       	rjmp	.-28     	; 0x2084 <_ZN7TwoWire11requestFromEhhh>

000020a0 <_ZN7TwoWire17beginTransmissionEh>:
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 93 03 18 	sts	0x1803, r24
    20a6:	60 93 26 18 	sts	0x1826, r22
    20aa:	10 92 05 18 	sts	0x1805, r1
    20ae:	10 92 04 18 	sts	0x1804, r1
    20b2:	08 95       	ret

000020b4 <_ZN7TwoWire15endTransmissionEh>:
    20b4:	0f 93       	push	r16
    20b6:	06 2f       	mov	r16, r22
    20b8:	21 e0       	ldi	r18, 0x01	; 1
    20ba:	40 91 04 18 	lds	r20, 0x1804
    20be:	66 e0       	ldi	r22, 0x06	; 6
    20c0:	78 e1       	ldi	r23, 0x18	; 24
    20c2:	80 91 26 18 	lds	r24, 0x1826
    20c6:	96 dd       	rcall	.-1236   	; 0x1bf4 <twi_writeTo>
    20c8:	10 92 05 18 	sts	0x1805, r1
    20cc:	10 92 04 18 	sts	0x1804, r1
    20d0:	10 92 03 18 	sts	0x1803, r1
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <_ZN7TwoWire15endTransmissionEv>:
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	ec cf       	rjmp	.-40     	; 0x20b4 <_ZN7TwoWire15endTransmissionEh>

000020dc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    20dc:	87 ef       	ldi	r24, 0xF7	; 247
    20de:	97 e1       	ldi	r25, 0x17	; 23
    20e0:	b8 cf       	rjmp	.-144    	; 0x2052 <_ZN7TwoWireC1Ev>

000020e2 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    20e2:	fc 01       	movw	r30, r24
    20e4:	24 85       	ldd	r18, Z+12	; 0x0c
    20e6:	35 85       	ldd	r19, Z+13	; 0x0d
    20e8:	f9 01       	movw	r30, r18
    20ea:	e0 5c       	subi	r30, 0xC0	; 192
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	32 96       	adiw	r30, 0x02	; 2
    20f4:	20 81       	ld	r18, Z
    20f6:	31 81       	ldd	r19, Z+1	; 0x01
    20f8:	82 1b       	sub	r24, r18
    20fa:	93 0b       	sbc	r25, r19
    20fc:	8f 73       	andi	r24, 0x3F	; 63
    20fe:	99 27       	eor	r25, r25
    2100:	08 95       	ret

00002102 <_ZN14HardwareSerial4peekEv>:
    2102:	fc 01       	movw	r30, r24
    2104:	84 85       	ldd	r24, Z+12	; 0x0c
    2106:	95 85       	ldd	r25, Z+13	; 0x0d
    2108:	fc 01       	movw	r30, r24
    210a:	e0 5c       	subi	r30, 0xC0	; 192
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	40 81       	ld	r20, Z
    2110:	51 81       	ldd	r21, Z+1	; 0x01
    2112:	32 96       	adiw	r30, 0x02	; 2
    2114:	20 81       	ld	r18, Z
    2116:	31 81       	ldd	r19, Z+1	; 0x01
    2118:	42 17       	cp	r20, r18
    211a:	53 07       	cpc	r21, r19
    211c:	41 f0       	breq	.+16     	; 0x212e <_ZN14HardwareSerial4peekEv+0x2c>
    211e:	20 81       	ld	r18, Z
    2120:	31 81       	ldd	r19, Z+1	; 0x01
    2122:	fc 01       	movw	r30, r24
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	80 81       	ld	r24, Z
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	08 95       	ret
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	08 95       	ret

00002134 <_ZN14HardwareSerial4readEv>:
    2134:	fc 01       	movw	r30, r24
    2136:	84 85       	ldd	r24, Z+12	; 0x0c
    2138:	95 85       	ldd	r25, Z+13	; 0x0d
    213a:	fc 01       	movw	r30, r24
    213c:	e0 5c       	subi	r30, 0xC0	; 192
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	40 81       	ld	r20, Z
    2142:	51 81       	ldd	r21, Z+1	; 0x01
    2144:	32 96       	adiw	r30, 0x02	; 2
    2146:	20 81       	ld	r18, Z
    2148:	31 81       	ldd	r19, Z+1	; 0x01
    214a:	42 17       	cp	r20, r18
    214c:	53 07       	cpc	r21, r19
    214e:	81 f0       	breq	.+32     	; 0x2170 <_ZN14HardwareSerial4readEv+0x3c>
    2150:	20 81       	ld	r18, Z
    2152:	31 81       	ldd	r19, Z+1	; 0x01
    2154:	dc 01       	movw	r26, r24
    2156:	a2 0f       	add	r26, r18
    2158:	b3 1f       	adc	r27, r19
    215a:	8c 91       	ld	r24, X
    215c:	20 81       	ld	r18, Z
    215e:	31 81       	ldd	r19, Z+1	; 0x01
    2160:	2f 5f       	subi	r18, 0xFF	; 255
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	2f 73       	andi	r18, 0x3F	; 63
    2166:	33 27       	eor	r19, r19
    2168:	31 83       	std	Z+1, r19	; 0x01
    216a:	20 83       	st	Z, r18
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	08 95       	ret
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	08 95       	ret

00002176 <_ZN14HardwareSerial5flushEv>:
    2176:	fc 01       	movw	r30, r24
    2178:	81 a1       	ldd	r24, Z+33	; 0x21
    217a:	88 23       	and	r24, r24
    217c:	29 f0       	breq	.+10     	; 0x2188 <_ZN14HardwareSerial5flushEv+0x12>
    217e:	a4 89       	ldd	r26, Z+20	; 0x14
    2180:	b5 89       	ldd	r27, Z+21	; 0x15
    2182:	8c 91       	ld	r24, X
    2184:	86 ff       	sbrs	r24, 6
    2186:	fb cf       	rjmp	.-10     	; 0x217e <_ZN14HardwareSerial5flushEv+0x8>
    2188:	11 a2       	std	Z+33, r1	; 0x21
    218a:	08 95       	ret

0000218c <_ZN14HardwareSerial5writeEh>:
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	ec 01       	movw	r28, r24
    2194:	8e 85       	ldd	r24, Y+14	; 0x0e
    2196:	9f 85       	ldd	r25, Y+15	; 0x0f
    2198:	fc 01       	movw	r30, r24
    219a:	e0 5c       	subi	r30, 0xC0	; 192
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	01 90       	ld	r0, Z+
    21a0:	f0 81       	ld	r31, Z
    21a2:	e0 2d       	mov	r30, r0
    21a4:	31 96       	adiw	r30, 0x01	; 1
    21a6:	ef 73       	andi	r30, 0x3F	; 63
    21a8:	ff 27       	eor	r31, r31
    21aa:	1e 2f       	mov	r17, r30
    21ac:	7f 2f       	mov	r23, r31
    21ae:	dc 01       	movw	r26, r24
    21b0:	ae 5b       	subi	r26, 0xBE	; 190
    21b2:	bf 4f       	sbci	r27, 0xFF	; 255
    21b4:	21 2f       	mov	r18, r17
    21b6:	37 2f       	mov	r19, r23
    21b8:	4d 91       	ld	r20, X+
    21ba:	5c 91       	ld	r21, X
    21bc:	11 97       	sbiw	r26, 0x01	; 1
    21be:	e4 17       	cp	r30, r20
    21c0:	f5 07       	cpc	r31, r21
    21c2:	c1 f3       	breq	.-16     	; 0x21b4 <_ZN14HardwareSerial5writeEh+0x28>
    21c4:	fc 01       	movw	r30, r24
    21c6:	e0 5c       	subi	r30, 0xC0	; 192
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	40 81       	ld	r20, Z
    21cc:	51 81       	ldd	r21, Z+1	; 0x01
    21ce:	fc 01       	movw	r30, r24
    21d0:	e4 0f       	add	r30, r20
    21d2:	f5 1f       	adc	r31, r21
    21d4:	60 83       	st	Z, r22
    21d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    21d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    21da:	e0 5c       	subi	r30, 0xC0	; 192
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	31 83       	std	Z+1, r19	; 0x01
    21e0:	20 83       	st	Z, r18
    21e2:	ee 89       	ldd	r30, Y+22	; 0x16
    21e4:	ff 89       	ldd	r31, Y+23	; 0x17
    21e6:	40 81       	ld	r20, Z
    21e8:	21 e0       	ldi	r18, 0x01	; 1
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	c9 01       	movw	r24, r18
    21ee:	0f 8c       	ldd	r0, Y+31	; 0x1f
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <_ZN14HardwareSerial5writeEh+0x6a>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <_ZN14HardwareSerial5writeEh+0x66>
    21fa:	84 2b       	or	r24, r20
    21fc:	80 83       	st	Z, r24
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	ec 89       	ldd	r30, Y+20	; 0x14
    2204:	fd 89       	ldd	r31, Y+21	; 0x15
    2206:	80 81       	ld	r24, Z
    2208:	80 64       	ori	r24, 0x40	; 64
    220a:	80 83       	st	Z, r24
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	08 95       	ret

00002218 <__vector_25>:
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	0b b6       	in	r0, 0x3b	; 59
    2224:	0f 92       	push	r0
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	8f 93       	push	r24
    222e:	9f 93       	push	r25
    2230:	af 93       	push	r26
    2232:	bf 93       	push	r27
    2234:	ef 93       	push	r30
    2236:	ff 93       	push	r31
    2238:	80 91 c0 00 	lds	r24, 0x00C0
    223c:	82 fd       	sbrc	r24, 2
    223e:	1a c0       	rjmp	.+52     	; 0x2274 <__vector_25+0x5c>
    2240:	40 91 c6 00 	lds	r20, 0x00C6
    2244:	80 91 ed 1a 	lds	r24, 0x1AED
    2248:	90 91 ee 1a 	lds	r25, 0x1AEE
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	8f 73       	andi	r24, 0x3F	; 63
    2250:	99 27       	eor	r25, r25
    2252:	20 91 ef 1a 	lds	r18, 0x1AEF
    2256:	30 91 f0 1a 	lds	r19, 0x1AF0
    225a:	82 17       	cp	r24, r18
    225c:	93 07       	cpc	r25, r19
    225e:	61 f0       	breq	.+24     	; 0x2278 <__vector_25+0x60>
    2260:	ed ee       	ldi	r30, 0xED	; 237
    2262:	fa e1       	ldi	r31, 0x1A	; 26
    2264:	a0 81       	ld	r26, Z
    2266:	b1 81       	ldd	r27, Z+1	; 0x01
    2268:	a3 55       	subi	r26, 0x53	; 83
    226a:	b5 4e       	sbci	r27, 0xE5	; 229
    226c:	4c 93       	st	X, r20
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <__vector_25+0x60>
    2274:	80 91 c6 00 	lds	r24, 0x00C6
    2278:	ff 91       	pop	r31
    227a:	ef 91       	pop	r30
    227c:	bf 91       	pop	r27
    227e:	af 91       	pop	r26
    2280:	9f 91       	pop	r25
    2282:	8f 91       	pop	r24
    2284:	4f 91       	pop	r20
    2286:	3f 91       	pop	r19
    2288:	2f 91       	pop	r18
    228a:	0f 90       	pop	r0
    228c:	0b be       	out	0x3b, r0	; 59
    228e:	0f 90       	pop	r0
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	0f 90       	pop	r0
    2294:	1f 90       	pop	r1
    2296:	18 95       	reti

00002298 <__vector_36>:
    2298:	1f 92       	push	r1
    229a:	0f 92       	push	r0
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	0f 92       	push	r0
    22a0:	11 24       	eor	r1, r1
    22a2:	0b b6       	in	r0, 0x3b	; 59
    22a4:	0f 92       	push	r0
    22a6:	2f 93       	push	r18
    22a8:	3f 93       	push	r19
    22aa:	4f 93       	push	r20
    22ac:	8f 93       	push	r24
    22ae:	9f 93       	push	r25
    22b0:	af 93       	push	r26
    22b2:	bf 93       	push	r27
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
    22b8:	80 91 c8 00 	lds	r24, 0x00C8
    22bc:	82 fd       	sbrc	r24, 2
    22be:	1a c0       	rjmp	.+52     	; 0x22f4 <__vector_36+0x5c>
    22c0:	40 91 ce 00 	lds	r20, 0x00CE
    22c4:	80 91 65 1a 	lds	r24, 0x1A65
    22c8:	90 91 66 1a 	lds	r25, 0x1A66
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	8f 73       	andi	r24, 0x3F	; 63
    22d0:	99 27       	eor	r25, r25
    22d2:	20 91 67 1a 	lds	r18, 0x1A67
    22d6:	30 91 68 1a 	lds	r19, 0x1A68
    22da:	82 17       	cp	r24, r18
    22dc:	93 07       	cpc	r25, r19
    22de:	61 f0       	breq	.+24     	; 0x22f8 <__vector_36+0x60>
    22e0:	e5 e6       	ldi	r30, 0x65	; 101
    22e2:	fa e1       	ldi	r31, 0x1A	; 26
    22e4:	a0 81       	ld	r26, Z
    22e6:	b1 81       	ldd	r27, Z+1	; 0x01
    22e8:	ab 5d       	subi	r26, 0xDB	; 219
    22ea:	b5 4e       	sbci	r27, 0xE5	; 229
    22ec:	4c 93       	st	X, r20
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <__vector_36+0x60>
    22f4:	80 91 ce 00 	lds	r24, 0x00CE
    22f8:	ff 91       	pop	r31
    22fa:	ef 91       	pop	r30
    22fc:	bf 91       	pop	r27
    22fe:	af 91       	pop	r26
    2300:	9f 91       	pop	r25
    2302:	8f 91       	pop	r24
    2304:	4f 91       	pop	r20
    2306:	3f 91       	pop	r19
    2308:	2f 91       	pop	r18
    230a:	0f 90       	pop	r0
    230c:	0b be       	out	0x3b, r0	; 59
    230e:	0f 90       	pop	r0
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	0f 90       	pop	r0
    2314:	1f 90       	pop	r1
    2316:	18 95       	reti

00002318 <__vector_51>:
    2318:	1f 92       	push	r1
    231a:	0f 92       	push	r0
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	0f 92       	push	r0
    2320:	11 24       	eor	r1, r1
    2322:	0b b6       	in	r0, 0x3b	; 59
    2324:	0f 92       	push	r0
    2326:	2f 93       	push	r18
    2328:	3f 93       	push	r19
    232a:	4f 93       	push	r20
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	af 93       	push	r26
    2332:	bf 93       	push	r27
    2334:	ef 93       	push	r30
    2336:	ff 93       	push	r31
    2338:	80 91 d0 00 	lds	r24, 0x00D0
    233c:	82 fd       	sbrc	r24, 2
    233e:	1a c0       	rjmp	.+52     	; 0x2374 <__vector_51+0x5c>
    2340:	40 91 d6 00 	lds	r20, 0x00D6
    2344:	80 91 dd 19 	lds	r24, 0x19DD
    2348:	90 91 de 19 	lds	r25, 0x19DE
    234c:	01 96       	adiw	r24, 0x01	; 1
    234e:	8f 73       	andi	r24, 0x3F	; 63
    2350:	99 27       	eor	r25, r25
    2352:	20 91 df 19 	lds	r18, 0x19DF
    2356:	30 91 e0 19 	lds	r19, 0x19E0
    235a:	82 17       	cp	r24, r18
    235c:	93 07       	cpc	r25, r19
    235e:	61 f0       	breq	.+24     	; 0x2378 <__vector_51+0x60>
    2360:	ed ed       	ldi	r30, 0xDD	; 221
    2362:	f9 e1       	ldi	r31, 0x19	; 25
    2364:	a0 81       	ld	r26, Z
    2366:	b1 81       	ldd	r27, Z+1	; 0x01
    2368:	a3 56       	subi	r26, 0x63	; 99
    236a:	b6 4e       	sbci	r27, 0xE6	; 230
    236c:	4c 93       	st	X, r20
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <__vector_51+0x60>
    2374:	80 91 d6 00 	lds	r24, 0x00D6
    2378:	ff 91       	pop	r31
    237a:	ef 91       	pop	r30
    237c:	bf 91       	pop	r27
    237e:	af 91       	pop	r26
    2380:	9f 91       	pop	r25
    2382:	8f 91       	pop	r24
    2384:	4f 91       	pop	r20
    2386:	3f 91       	pop	r19
    2388:	2f 91       	pop	r18
    238a:	0f 90       	pop	r0
    238c:	0b be       	out	0x3b, r0	; 59
    238e:	0f 90       	pop	r0
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	0f 90       	pop	r0
    2394:	1f 90       	pop	r1
    2396:	18 95       	reti

00002398 <__vector_54>:
    2398:	1f 92       	push	r1
    239a:	0f 92       	push	r0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	0f 92       	push	r0
    23a0:	11 24       	eor	r1, r1
    23a2:	0b b6       	in	r0, 0x3b	; 59
    23a4:	0f 92       	push	r0
    23a6:	2f 93       	push	r18
    23a8:	3f 93       	push	r19
    23aa:	4f 93       	push	r20
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
    23b8:	80 91 30 01 	lds	r24, 0x0130
    23bc:	82 fd       	sbrc	r24, 2
    23be:	1a c0       	rjmp	.+52     	; 0x23f4 <__vector_54+0x5c>
    23c0:	40 91 36 01 	lds	r20, 0x0136
    23c4:	80 91 55 19 	lds	r24, 0x1955
    23c8:	90 91 56 19 	lds	r25, 0x1956
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	8f 73       	andi	r24, 0x3F	; 63
    23d0:	99 27       	eor	r25, r25
    23d2:	20 91 57 19 	lds	r18, 0x1957
    23d6:	30 91 58 19 	lds	r19, 0x1958
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	61 f0       	breq	.+24     	; 0x23f8 <__vector_54+0x60>
    23e0:	e5 e5       	ldi	r30, 0x55	; 85
    23e2:	f9 e1       	ldi	r31, 0x19	; 25
    23e4:	a0 81       	ld	r26, Z
    23e6:	b1 81       	ldd	r27, Z+1	; 0x01
    23e8:	ab 5e       	subi	r26, 0xEB	; 235
    23ea:	b6 4e       	sbci	r27, 0xE6	; 230
    23ec:	4c 93       	st	X, r20
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <__vector_54+0x60>
    23f4:	80 91 36 01 	lds	r24, 0x0136
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0b be       	out	0x3b, r0	; 59
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	0f 90       	pop	r0
    2414:	1f 90       	pop	r1
    2416:	18 95       	reti

00002418 <__vector_26>:
    2418:	1f 92       	push	r1
    241a:	0f 92       	push	r0
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	0f 92       	push	r0
    2420:	11 24       	eor	r1, r1
    2422:	0b b6       	in	r0, 0x3b	; 59
    2424:	0f 92       	push	r0
    2426:	2f 93       	push	r18
    2428:	3f 93       	push	r19
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	20 91 a9 1a 	lds	r18, 0x1AA9
    243a:	30 91 aa 1a 	lds	r19, 0x1AAA
    243e:	80 91 ab 1a 	lds	r24, 0x1AAB
    2442:	90 91 ac 1a 	lds	r25, 0x1AAC
    2446:	28 17       	cp	r18, r24
    2448:	39 07       	cpc	r19, r25
    244a:	31 f4       	brne	.+12     	; 0x2458 <__vector_26+0x40>
    244c:	e1 ec       	ldi	r30, 0xC1	; 193
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8f 7d       	andi	r24, 0xDF	; 223
    2454:	80 83       	st	Z, r24
    2456:	10 c0       	rjmp	.+32     	; 0x2478 <__vector_26+0x60>
    2458:	eb ea       	ldi	r30, 0xAB	; 171
    245a:	fa e1       	ldi	r31, 0x1A	; 26
    245c:	a0 81       	ld	r26, Z
    245e:	b1 81       	ldd	r27, Z+1	; 0x01
    2460:	a7 59       	subi	r26, 0x97	; 151
    2462:	b5 4e       	sbci	r27, 0xE5	; 229
    2464:	2c 91       	ld	r18, X
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	8f 73       	andi	r24, 0x3F	; 63
    246e:	99 27       	eor	r25, r25
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	20 93 c6 00 	sts	0x00C6, r18
    2478:	ff 91       	pop	r31
    247a:	ef 91       	pop	r30
    247c:	bf 91       	pop	r27
    247e:	af 91       	pop	r26
    2480:	9f 91       	pop	r25
    2482:	8f 91       	pop	r24
    2484:	3f 91       	pop	r19
    2486:	2f 91       	pop	r18
    2488:	0f 90       	pop	r0
    248a:	0b be       	out	0x3b, r0	; 59
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <__vector_37>:
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	0b b6       	in	r0, 0x3b	; 59
    24a2:	0f 92       	push	r0
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
    24b4:	20 91 21 1a 	lds	r18, 0x1A21
    24b8:	30 91 22 1a 	lds	r19, 0x1A22
    24bc:	80 91 23 1a 	lds	r24, 0x1A23
    24c0:	90 91 24 1a 	lds	r25, 0x1A24
    24c4:	28 17       	cp	r18, r24
    24c6:	39 07       	cpc	r19, r25
    24c8:	31 f4       	brne	.+12     	; 0x24d6 <__vector_37+0x40>
    24ca:	e9 ec       	ldi	r30, 0xC9	; 201
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8f 7d       	andi	r24, 0xDF	; 223
    24d2:	80 83       	st	Z, r24
    24d4:	10 c0       	rjmp	.+32     	; 0x24f6 <__vector_37+0x60>
    24d6:	e3 e2       	ldi	r30, 0x23	; 35
    24d8:	fa e1       	ldi	r31, 0x1A	; 26
    24da:	a0 81       	ld	r26, Z
    24dc:	b1 81       	ldd	r27, Z+1	; 0x01
    24de:	af 51       	subi	r26, 0x1F	; 31
    24e0:	b6 4e       	sbci	r27, 0xE6	; 230
    24e2:	2c 91       	ld	r18, X
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	8f 73       	andi	r24, 0x3F	; 63
    24ec:	99 27       	eor	r25, r25
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
    24f2:	20 93 ce 00 	sts	0x00CE, r18
    24f6:	ff 91       	pop	r31
    24f8:	ef 91       	pop	r30
    24fa:	bf 91       	pop	r27
    24fc:	af 91       	pop	r26
    24fe:	9f 91       	pop	r25
    2500:	8f 91       	pop	r24
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	0f 90       	pop	r0
    2508:	0b be       	out	0x3b, r0	; 59
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	0f 90       	pop	r0
    2510:	1f 90       	pop	r1
    2512:	18 95       	reti

00002514 <__vector_52>:
    2514:	1f 92       	push	r1
    2516:	0f 92       	push	r0
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	0b b6       	in	r0, 0x3b	; 59
    2520:	0f 92       	push	r0
    2522:	2f 93       	push	r18
    2524:	3f 93       	push	r19
    2526:	8f 93       	push	r24
    2528:	9f 93       	push	r25
    252a:	af 93       	push	r26
    252c:	bf 93       	push	r27
    252e:	ef 93       	push	r30
    2530:	ff 93       	push	r31
    2532:	20 91 99 19 	lds	r18, 0x1999
    2536:	30 91 9a 19 	lds	r19, 0x199A
    253a:	80 91 9b 19 	lds	r24, 0x199B
    253e:	90 91 9c 19 	lds	r25, 0x199C
    2542:	28 17       	cp	r18, r24
    2544:	39 07       	cpc	r19, r25
    2546:	31 f4       	brne	.+12     	; 0x2554 <__vector_52+0x40>
    2548:	e1 ed       	ldi	r30, 0xD1	; 209
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8f 7d       	andi	r24, 0xDF	; 223
    2550:	80 83       	st	Z, r24
    2552:	10 c0       	rjmp	.+32     	; 0x2574 <__vector_52+0x60>
    2554:	eb e9       	ldi	r30, 0x9B	; 155
    2556:	f9 e1       	ldi	r31, 0x19	; 25
    2558:	a0 81       	ld	r26, Z
    255a:	b1 81       	ldd	r27, Z+1	; 0x01
    255c:	a7 5a       	subi	r26, 0xA7	; 167
    255e:	b6 4e       	sbci	r27, 0xE6	; 230
    2560:	2c 91       	ld	r18, X
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	8f 73       	andi	r24, 0x3F	; 63
    256a:	99 27       	eor	r25, r25
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	20 93 d6 00 	sts	0x00D6, r18
    2574:	ff 91       	pop	r31
    2576:	ef 91       	pop	r30
    2578:	bf 91       	pop	r27
    257a:	af 91       	pop	r26
    257c:	9f 91       	pop	r25
    257e:	8f 91       	pop	r24
    2580:	3f 91       	pop	r19
    2582:	2f 91       	pop	r18
    2584:	0f 90       	pop	r0
    2586:	0b be       	out	0x3b, r0	; 59
    2588:	0f 90       	pop	r0
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	0f 90       	pop	r0
    258e:	1f 90       	pop	r1
    2590:	18 95       	reti

00002592 <__vector_55>:
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	0f 92       	push	r0
    259a:	11 24       	eor	r1, r1
    259c:	0b b6       	in	r0, 0x3b	; 59
    259e:	0f 92       	push	r0
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
    25b0:	20 91 11 19 	lds	r18, 0x1911
    25b4:	30 91 12 19 	lds	r19, 0x1912
    25b8:	80 91 13 19 	lds	r24, 0x1913
    25bc:	90 91 14 19 	lds	r25, 0x1914
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	31 f4       	brne	.+12     	; 0x25d2 <__vector_55+0x40>
    25c6:	e1 e3       	ldi	r30, 0x31	; 49
    25c8:	f1 e0       	ldi	r31, 0x01	; 1
    25ca:	80 81       	ld	r24, Z
    25cc:	8f 7d       	andi	r24, 0xDF	; 223
    25ce:	80 83       	st	Z, r24
    25d0:	10 c0       	rjmp	.+32     	; 0x25f2 <__vector_55+0x60>
    25d2:	e3 e1       	ldi	r30, 0x13	; 19
    25d4:	f9 e1       	ldi	r31, 0x19	; 25
    25d6:	a0 81       	ld	r26, Z
    25d8:	b1 81       	ldd	r27, Z+1	; 0x01
    25da:	af 52       	subi	r26, 0x2F	; 47
    25dc:	b7 4e       	sbci	r27, 0xE7	; 231
    25de:	2c 91       	ld	r18, X
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	8f 73       	andi	r24, 0x3F	; 63
    25e8:	99 27       	eor	r25, r25
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	20 93 36 01 	sts	0x0136, r18
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0b be       	out	0x3b, r0	; 59
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	0f 90       	pop	r0
    260c:	1f 90       	pop	r1
    260e:	18 95       	reti

00002610 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    2610:	8f 92       	push	r8
    2612:	9f 92       	push	r9
    2614:	af 92       	push	r10
    2616:	bf 92       	push	r11
    2618:	cf 92       	push	r12
    261a:	df 92       	push	r13
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	fc 01       	movw	r30, r24
    262e:	13 82       	std	Z+3, r1	; 0x03
    2630:	12 82       	std	Z+2, r1	; 0x02
    2632:	88 ee       	ldi	r24, 0xE8	; 232
    2634:	93 e0       	ldi	r25, 0x03	; 3
    2636:	a0 e0       	ldi	r26, 0x00	; 0
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	84 83       	std	Z+4, r24	; 0x04
    263c:	95 83       	std	Z+5, r25	; 0x05
    263e:	a6 83       	std	Z+6, r26	; 0x06
    2640:	b7 83       	std	Z+7, r27	; 0x07
    2642:	8f ed       	ldi	r24, 0xDF	; 223
    2644:	92 e0       	ldi	r25, 0x02	; 2
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	75 87       	std	Z+13, r23	; 0x0d
    264c:	64 87       	std	Z+12, r22	; 0x0c
    264e:	57 87       	std	Z+15, r21	; 0x0f
    2650:	46 87       	std	Z+14, r20	; 0x0e
    2652:	31 8b       	std	Z+17, r19	; 0x11
    2654:	20 8b       	std	Z+16, r18	; 0x10
    2656:	13 8b       	std	Z+19, r17	; 0x13
    2658:	02 8b       	std	Z+18, r16	; 0x12
    265a:	f5 8a       	std	Z+21, r15	; 0x15
    265c:	e4 8a       	std	Z+20, r14	; 0x14
    265e:	d7 8a       	std	Z+23, r13	; 0x17
    2660:	c6 8a       	std	Z+22, r12	; 0x16
    2662:	b1 8e       	std	Z+25, r11	; 0x19
    2664:	a0 8e       	std	Z+24, r10	; 0x18
    2666:	93 8e       	std	Z+27, r9	; 0x1b
    2668:	82 8e       	std	Z+26, r8	; 0x1a
    266a:	88 89       	ldd	r24, Y+16	; 0x10
    266c:	84 8f       	std	Z+28, r24	; 0x1c
    266e:	89 89       	ldd	r24, Y+17	; 0x11
    2670:	85 8f       	std	Z+29, r24	; 0x1d
    2672:	8a 89       	ldd	r24, Y+18	; 0x12
    2674:	86 8f       	std	Z+30, r24	; 0x1e
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	87 8f       	std	Z+31, r24	; 0x1f
    267a:	8c 89       	ldd	r24, Y+20	; 0x14
    267c:	80 a3       	std	Z+32, r24	; 0x20
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	08 95       	ret

00002698 <_ZN14HardwareSerial5beginEm>:
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	ec 01       	movw	r28, r24
    26a6:	6a 01       	movw	r12, r20
    26a8:	7b 01       	movw	r14, r22
    26aa:	41 15       	cp	r20, r1
    26ac:	81 ee       	ldi	r24, 0xE1	; 225
    26ae:	58 07       	cpc	r21, r24
    26b0:	61 05       	cpc	r22, r1
    26b2:	71 05       	cpc	r23, r1
    26b4:	01 f1       	breq	.+64     	; 0x26f6 <_ZN14HardwareSerial5beginEm+0x5e>
    26b6:	ec 89       	ldd	r30, Y+20	; 0x14
    26b8:	fd 89       	ldd	r31, Y+21	; 0x15
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	08 a0       	ldd	r0, Y+32	; 0x20
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <_ZN14HardwareSerial5beginEm+0x2e>
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	0a 94       	dec	r0
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <_ZN14HardwareSerial5beginEm+0x2a>
    26ca:	80 83       	st	Z, r24
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	79 e0       	ldi	r23, 0x09	; 9
    26d0:	8d e3       	ldi	r24, 0x3D	; 61
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a7 01       	movw	r20, r14
    26d6:	96 01       	movw	r18, r12
    26d8:	b2 d3       	rcall	.+1892   	; 0x2e3e <__udivmodsi4>
    26da:	ba 01       	movw	r22, r20
    26dc:	a9 01       	movw	r20, r18
    26de:	41 50       	subi	r20, 0x01	; 1
    26e0:	51 09       	sbc	r21, r1
    26e2:	61 09       	sbc	r22, r1
    26e4:	71 09       	sbc	r23, r1
    26e6:	76 95       	lsr	r23
    26e8:	67 95       	ror	r22
    26ea:	57 95       	ror	r21
    26ec:	47 95       	ror	r20
    26ee:	41 15       	cp	r20, r1
    26f0:	80 e1       	ldi	r24, 0x10	; 16
    26f2:	58 07       	cpc	r21, r24
    26f4:	a0 f0       	brcs	.+40     	; 0x271e <_ZN14HardwareSerial5beginEm+0x86>
    26f6:	ec 89       	ldd	r30, Y+20	; 0x14
    26f8:	fd 89       	ldd	r31, Y+21	; 0x15
    26fa:	10 82       	st	Z, r1
    26fc:	60 e8       	ldi	r22, 0x80	; 128
    26fe:	74 e8       	ldi	r23, 0x84	; 132
    2700:	8e e1       	ldi	r24, 0x1E	; 30
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a7 01       	movw	r20, r14
    2706:	96 01       	movw	r18, r12
    2708:	9a d3       	rcall	.+1844   	; 0x2e3e <__udivmodsi4>
    270a:	ba 01       	movw	r22, r20
    270c:	a9 01       	movw	r20, r18
    270e:	41 50       	subi	r20, 0x01	; 1
    2710:	51 09       	sbc	r21, r1
    2712:	61 09       	sbc	r22, r1
    2714:	71 09       	sbc	r23, r1
    2716:	76 95       	lsr	r23
    2718:	67 95       	ror	r22
    271a:	57 95       	ror	r21
    271c:	47 95       	ror	r20
    271e:	e8 89       	ldd	r30, Y+16	; 0x10
    2720:	f9 89       	ldd	r31, Y+17	; 0x11
    2722:	50 83       	st	Z, r21
    2724:	ea 89       	ldd	r30, Y+18	; 0x12
    2726:	fb 89       	ldd	r31, Y+19	; 0x13
    2728:	40 83       	st	Z, r20
    272a:	19 a2       	std	Y+33, r1	; 0x21
    272c:	ee 89       	ldd	r30, Y+22	; 0x16
    272e:	ff 89       	ldd	r31, Y+23	; 0x17
    2730:	40 81       	ld	r20, Z
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9c 01       	movw	r18, r24
    2738:	0c 8c       	ldd	r0, Y+28	; 0x1c
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <_ZN14HardwareSerial5beginEm+0xa8>
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	0a 94       	dec	r0
    2742:	e2 f7       	brpl	.-8      	; 0x273c <_ZN14HardwareSerial5beginEm+0xa4>
    2744:	24 2b       	or	r18, r20
    2746:	20 83       	st	Z, r18
    2748:	ee 89       	ldd	r30, Y+22	; 0x16
    274a:	ff 89       	ldd	r31, Y+23	; 0x17
    274c:	40 81       	ld	r20, Z
    274e:	9c 01       	movw	r18, r24
    2750:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <_ZN14HardwareSerial5beginEm+0xc0>
    2754:	22 0f       	add	r18, r18
    2756:	33 1f       	adc	r19, r19
    2758:	0a 94       	dec	r0
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <_ZN14HardwareSerial5beginEm+0xbc>
    275c:	24 2b       	or	r18, r20
    275e:	20 83       	st	Z, r18
    2760:	ee 89       	ldd	r30, Y+22	; 0x16
    2762:	ff 89       	ldd	r31, Y+23	; 0x17
    2764:	40 81       	ld	r20, Z
    2766:	9c 01       	movw	r18, r24
    2768:	0e 8c       	ldd	r0, Y+30	; 0x1e
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <_ZN14HardwareSerial5beginEm+0xd8>
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <_ZN14HardwareSerial5beginEm+0xd4>
    2774:	24 2b       	or	r18, r20
    2776:	20 83       	st	Z, r18
    2778:	ee 89       	ldd	r30, Y+22	; 0x16
    277a:	ff 89       	ldd	r31, Y+23	; 0x17
    277c:	20 81       	ld	r18, Z
    277e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <_ZN14HardwareSerial5beginEm+0xee>
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	0a 94       	dec	r0
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <_ZN14HardwareSerial5beginEm+0xea>
    278a:	80 95       	com	r24
    278c:	82 23       	and	r24, r18
    278e:	80 83       	st	Z, r24
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	df 90       	pop	r13
    279a:	cf 90       	pop	r12
    279c:	08 95       	ret

0000279e <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    279e:	5f 92       	push	r5
    27a0:	6f 92       	push	r6
    27a2:	7f 92       	push	r7
    27a4:	8f 92       	push	r8
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    27bc:	55 24       	eor	r5, r5
    27be:	53 94       	inc	r5
    27c0:	5f 92       	push	r5
    27c2:	0f 2e       	mov	r0, r31
    27c4:	f5 e0       	ldi	r31, 0x05	; 5
    27c6:	6f 2e       	mov	r6, r31
    27c8:	f0 2d       	mov	r31, r0
    27ca:	6f 92       	push	r6
    27cc:	0f 2e       	mov	r0, r31
    27ce:	f7 e0       	ldi	r31, 0x07	; 7
    27d0:	7f 2e       	mov	r7, r31
    27d2:	f0 2d       	mov	r31, r0
    27d4:	7f 92       	push	r7
    27d6:	d3 e0       	ldi	r29, 0x03	; 3
    27d8:	df 93       	push	r29
    27da:	c4 e0       	ldi	r28, 0x04	; 4
    27dc:	cf 93       	push	r28
    27de:	0f 2e       	mov	r0, r31
    27e0:	f6 ec       	ldi	r31, 0xC6	; 198
    27e2:	8f 2e       	mov	r8, r31
    27e4:	91 2c       	mov	r9, r1
    27e6:	f0 2d       	mov	r31, r0
    27e8:	0f 2e       	mov	r0, r31
    27ea:	f2 ec       	ldi	r31, 0xC2	; 194
    27ec:	af 2e       	mov	r10, r31
    27ee:	b1 2c       	mov	r11, r1
    27f0:	f0 2d       	mov	r31, r0
    27f2:	0f 2e       	mov	r0, r31
    27f4:	f1 ec       	ldi	r31, 0xC1	; 193
    27f6:	cf 2e       	mov	r12, r31
    27f8:	d1 2c       	mov	r13, r1
    27fa:	f0 2d       	mov	r31, r0
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f0 ec       	ldi	r31, 0xC0	; 192
    2800:	ef 2e       	mov	r14, r31
    2802:	f1 2c       	mov	r15, r1
    2804:	f0 2d       	mov	r31, r0
    2806:	04 ec       	ldi	r16, 0xC4	; 196
    2808:	10 e0       	ldi	r17, 0x00	; 0
    280a:	25 ec       	ldi	r18, 0xC5	; 197
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	49 e6       	ldi	r20, 0x69	; 105
    2810:	5a e1       	ldi	r21, 0x1A	; 26
    2812:	6d ea       	ldi	r22, 0xAD	; 173
    2814:	7a e1       	ldi	r23, 0x1A	; 26
    2816:	8f ea       	ldi	r24, 0xAF	; 175
    2818:	98 e1       	ldi	r25, 0x18	; 24
    281a:	fa de       	rcall	.-524    	; 0x2610 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    281c:	5f 92       	push	r5
    281e:	6f 92       	push	r6
    2820:	7f 92       	push	r7
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	0f 2e       	mov	r0, r31
    2828:	fe ec       	ldi	r31, 0xCE	; 206
    282a:	8f 2e       	mov	r8, r31
    282c:	91 2c       	mov	r9, r1
    282e:	f0 2d       	mov	r31, r0
    2830:	0f 2e       	mov	r0, r31
    2832:	fa ec       	ldi	r31, 0xCA	; 202
    2834:	af 2e       	mov	r10, r31
    2836:	b1 2c       	mov	r11, r1
    2838:	f0 2d       	mov	r31, r0
    283a:	0f 2e       	mov	r0, r31
    283c:	f9 ec       	ldi	r31, 0xC9	; 201
    283e:	cf 2e       	mov	r12, r31
    2840:	d1 2c       	mov	r13, r1
    2842:	f0 2d       	mov	r31, r0
    2844:	0f 2e       	mov	r0, r31
    2846:	f8 ec       	ldi	r31, 0xC8	; 200
    2848:	ef 2e       	mov	r14, r31
    284a:	f1 2c       	mov	r15, r1
    284c:	f0 2d       	mov	r31, r0
    284e:	0c ec       	ldi	r16, 0xCC	; 204
    2850:	10 e0       	ldi	r17, 0x00	; 0
    2852:	2d ec       	ldi	r18, 0xCD	; 205
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	41 ee       	ldi	r20, 0xE1	; 225
    2858:	59 e1       	ldi	r21, 0x19	; 25
    285a:	65 e2       	ldi	r22, 0x25	; 37
    285c:	7a e1       	ldi	r23, 0x1A	; 26
    285e:	8d e8       	ldi	r24, 0x8D	; 141
    2860:	98 e1       	ldi	r25, 0x18	; 24
    2862:	d6 de       	rcall	.-596    	; 0x2610 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    2864:	5f 92       	push	r5
    2866:	6f 92       	push	r6
    2868:	7f 92       	push	r7
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	0f 2e       	mov	r0, r31
    2870:	f6 ed       	ldi	r31, 0xD6	; 214
    2872:	8f 2e       	mov	r8, r31
    2874:	91 2c       	mov	r9, r1
    2876:	f0 2d       	mov	r31, r0
    2878:	0f 2e       	mov	r0, r31
    287a:	f2 ed       	ldi	r31, 0xD2	; 210
    287c:	af 2e       	mov	r10, r31
    287e:	b1 2c       	mov	r11, r1
    2880:	f0 2d       	mov	r31, r0
    2882:	0f 2e       	mov	r0, r31
    2884:	f1 ed       	ldi	r31, 0xD1	; 209
    2886:	cf 2e       	mov	r12, r31
    2888:	d1 2c       	mov	r13, r1
    288a:	f0 2d       	mov	r31, r0
    288c:	0f 2e       	mov	r0, r31
    288e:	f0 ed       	ldi	r31, 0xD0	; 208
    2890:	ef 2e       	mov	r14, r31
    2892:	f1 2c       	mov	r15, r1
    2894:	f0 2d       	mov	r31, r0
    2896:	04 ed       	ldi	r16, 0xD4	; 212
    2898:	10 e0       	ldi	r17, 0x00	; 0
    289a:	25 ed       	ldi	r18, 0xD5	; 213
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	49 e5       	ldi	r20, 0x59	; 89
    28a0:	59 e1       	ldi	r21, 0x19	; 25
    28a2:	6d e9       	ldi	r22, 0x9D	; 157
    28a4:	79 e1       	ldi	r23, 0x19	; 25
    28a6:	8b e6       	ldi	r24, 0x6B	; 107
    28a8:	98 e1       	ldi	r25, 0x18	; 24
    28aa:	b2 de       	rcall	.-668    	; 0x2610 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    28ac:	5f 92       	push	r5
    28ae:	6f 92       	push	r6
    28b0:	7f 92       	push	r7
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	0f 2e       	mov	r0, r31
    28b8:	f6 e3       	ldi	r31, 0x36	; 54
    28ba:	8f 2e       	mov	r8, r31
    28bc:	99 24       	eor	r9, r9
    28be:	93 94       	inc	r9
    28c0:	f0 2d       	mov	r31, r0
    28c2:	0f 2e       	mov	r0, r31
    28c4:	f2 e3       	ldi	r31, 0x32	; 50
    28c6:	af 2e       	mov	r10, r31
    28c8:	bb 24       	eor	r11, r11
    28ca:	b3 94       	inc	r11
    28cc:	f0 2d       	mov	r31, r0
    28ce:	0f 2e       	mov	r0, r31
    28d0:	f1 e3       	ldi	r31, 0x31	; 49
    28d2:	cf 2e       	mov	r12, r31
    28d4:	dd 24       	eor	r13, r13
    28d6:	d3 94       	inc	r13
    28d8:	f0 2d       	mov	r31, r0
    28da:	0f 2e       	mov	r0, r31
    28dc:	f0 e3       	ldi	r31, 0x30	; 48
    28de:	ef 2e       	mov	r14, r31
    28e0:	ff 24       	eor	r15, r15
    28e2:	f3 94       	inc	r15
    28e4:	f0 2d       	mov	r31, r0
    28e6:	04 e3       	ldi	r16, 0x34	; 52
    28e8:	11 e0       	ldi	r17, 0x01	; 1
    28ea:	25 e3       	ldi	r18, 0x35	; 53
    28ec:	31 e0       	ldi	r19, 0x01	; 1
    28ee:	41 ed       	ldi	r20, 0xD1	; 209
    28f0:	58 e1       	ldi	r21, 0x18	; 24
    28f2:	65 e1       	ldi	r22, 0x15	; 21
    28f4:	79 e1       	ldi	r23, 0x19	; 25
    28f6:	89 e4       	ldi	r24, 0x49	; 73
    28f8:	98 e1       	ldi	r25, 0x18	; 24
    28fa:	8a de       	rcall	.-748    	; 0x2610 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    28fc:	8d b7       	in	r24, 0x3d	; 61
    28fe:	9e b7       	in	r25, 0x3e	; 62
    2900:	44 96       	adiw	r24, 0x14	; 20
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	9e bf       	out	0x3e, r25	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	8d bf       	out	0x3d, r24	; 61
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	ff 90       	pop	r15
    2916:	ef 90       	pop	r14
    2918:	df 90       	pop	r13
    291a:	cf 90       	pop	r12
    291c:	bf 90       	pop	r11
    291e:	af 90       	pop	r10
    2920:	9f 90       	pop	r9
    2922:	8f 90       	pop	r8
    2924:	7f 90       	pop	r7
    2926:	6f 90       	pop	r6
    2928:	5f 90       	pop	r5
    292a:	08 95       	ret

0000292c <_ZN5Print5writeEPKhj>:
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	6c 01       	movw	r12, r24
    293e:	41 15       	cp	r20, r1
    2940:	51 05       	cpc	r21, r1
    2942:	b1 f0       	breq	.+44     	; 0x2970 <_ZN5Print5writeEPKhj+0x44>
    2944:	06 2f       	mov	r16, r22
    2946:	17 2f       	mov	r17, r23
    2948:	ea 01       	movw	r28, r20
    294a:	e1 2c       	mov	r14, r1
    294c:	f1 2c       	mov	r15, r1
    294e:	d8 01       	movw	r26, r16
    2950:	6d 91       	ld	r22, X+
    2952:	8d 01       	movw	r16, r26
    2954:	d6 01       	movw	r26, r12
    2956:	ed 91       	ld	r30, X+
    2958:	fc 91       	ld	r31, X
    295a:	01 90       	ld	r0, Z+
    295c:	f0 81       	ld	r31, Z
    295e:	e0 2d       	mov	r30, r0
    2960:	c6 01       	movw	r24, r12
    2962:	19 95       	eicall
    2964:	e8 0e       	add	r14, r24
    2966:	f9 1e       	adc	r15, r25
    2968:	21 97       	sbiw	r28, 0x01	; 1
    296a:	20 97       	sbiw	r28, 0x00	; 0
    296c:	81 f7       	brne	.-32     	; 0x294e <_ZN5Print5writeEPKhj+0x22>
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <_ZN5Print5writeEPKhj+0x48>
    2970:	e1 2c       	mov	r14, r1
    2972:	f1 2c       	mov	r15, r1
    2974:	c7 01       	movw	r24, r14
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	08 95       	ret

00002988 <_ZN5Print5printEPKc>:
    2988:	61 15       	cp	r22, r1
    298a:	71 05       	cpc	r23, r1
    298c:	81 f0       	breq	.+32     	; 0x29ae <_ZN5Print5printEPKc+0x26>
    298e:	fb 01       	movw	r30, r22
    2990:	01 90       	ld	r0, Z+
    2992:	00 20       	and	r0, r0
    2994:	e9 f7       	brne	.-6      	; 0x2990 <_ZN5Print5printEPKc+0x8>
    2996:	31 97       	sbiw	r30, 0x01	; 1
    2998:	af 01       	movw	r20, r30
    299a:	46 1b       	sub	r20, r22
    299c:	57 0b       	sbc	r21, r23
    299e:	dc 01       	movw	r26, r24
    29a0:	ed 91       	ld	r30, X+
    29a2:	fc 91       	ld	r31, X
    29a4:	02 80       	ldd	r0, Z+2	; 0x02
    29a6:	f3 81       	ldd	r31, Z+3	; 0x03
    29a8:	e0 2d       	mov	r30, r0
    29aa:	19 95       	eicall
    29ac:	08 95       	ret
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	08 95       	ret

000029b4 <_ZN5Print5printEc>:
    29b4:	dc 01       	movw	r26, r24
    29b6:	ed 91       	ld	r30, X+
    29b8:	fc 91       	ld	r31, X
    29ba:	01 90       	ld	r0, Z+
    29bc:	f0 81       	ld	r31, Z
    29be:	e0 2d       	mov	r30, r0
    29c0:	19 95       	eicall
    29c2:	08 95       	ret

000029c4 <_ZN5Print7printlnEv>:
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	ec 01       	movw	r28, r24
    29ce:	6d e0       	ldi	r22, 0x0D	; 13
    29d0:	f1 df       	rcall	.-30     	; 0x29b4 <_ZN5Print5printEc>
    29d2:	8c 01       	movw	r16, r24
    29d4:	6a e0       	ldi	r22, 0x0A	; 10
    29d6:	ce 01       	movw	r24, r28
    29d8:	ed df       	rcall	.-38     	; 0x29b4 <_ZN5Print5printEc>
    29da:	80 0f       	add	r24, r16
    29dc:	91 1f       	adc	r25, r17
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	08 95       	ret

000029e8 <_ZN5Print7printlnEPKc>:
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	ec 01       	movw	r28, r24
    29f2:	ca df       	rcall	.-108    	; 0x2988 <_ZN5Print5printEPKc>
    29f4:	8c 01       	movw	r16, r24
    29f6:	ce 01       	movw	r24, r28
    29f8:	e5 df       	rcall	.-54     	; 0x29c4 <_ZN5Print7printlnEv>
    29fa:	80 0f       	add	r24, r16
    29fc:	91 1f       	adc	r25, r17
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

00002a08 <_ZN5Print11printNumberEmh>:
    2a08:	6f 92       	push	r6
    2a0a:	7f 92       	push	r7
    2a0c:	8f 92       	push	r8
    2a0e:	9f 92       	push	r9
    2a10:	af 92       	push	r10
    2a12:	bf 92       	push	r11
    2a14:	cf 92       	push	r12
    2a16:	df 92       	push	r13
    2a18:	ef 92       	push	r14
    2a1a:	ff 92       	push	r15
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	a1 97       	sbiw	r28, 0x21	; 33
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	6c 01       	movw	r12, r24
    2a36:	74 2e       	mov	r7, r20
    2a38:	35 2f       	mov	r19, r21
    2a3a:	86 2f       	mov	r24, r22
    2a3c:	97 2f       	mov	r25, r23
    2a3e:	62 2e       	mov	r6, r18
    2a40:	19 a2       	std	Y+33, r1	; 0x21
    2a42:	21 e0       	ldi	r18, 0x01	; 1
    2a44:	26 15       	cp	r18, r6
    2a46:	20 f0       	brcs	.+8      	; 0x2a50 <_ZN5Print11printNumberEmh+0x48>
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	fa e0       	ldi	r31, 0x0A	; 10
    2a4c:	6f 2e       	mov	r6, r31
    2a4e:	f0 2d       	mov	r31, r0
    2a50:	7e 01       	movw	r14, r28
    2a52:	a1 e2       	ldi	r26, 0x21	; 33
    2a54:	ea 0e       	add	r14, r26
    2a56:	f1 1c       	adc	r15, r1
    2a58:	86 2c       	mov	r8, r6
    2a5a:	91 2c       	mov	r9, r1
    2a5c:	a1 2c       	mov	r10, r1
    2a5e:	b1 2c       	mov	r11, r1
    2a60:	67 2d       	mov	r22, r7
    2a62:	73 2f       	mov	r23, r19
    2a64:	a5 01       	movw	r20, r10
    2a66:	94 01       	movw	r18, r8
    2a68:	ea d1       	rcall	.+980    	; 0x2e3e <__udivmodsi4>
    2a6a:	e2 2f       	mov	r30, r18
    2a6c:	73 2f       	mov	r23, r19
    2a6e:	02 2f       	mov	r16, r18
    2a70:	13 2f       	mov	r17, r19
    2a72:	24 2f       	mov	r18, r20
    2a74:	35 2f       	mov	r19, r21
    2a76:	f7 2d       	mov	r31, r7
    2a78:	6e 9e       	mul	r6, r30
    2a7a:	f0 19       	sub	r31, r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	b1 e0       	ldi	r27, 0x01	; 1
    2a80:	eb 1a       	sub	r14, r27
    2a82:	f1 08       	sbc	r15, r1
    2a84:	fa 30       	cpi	r31, 0x0A	; 10
    2a86:	10 f4       	brcc	.+4      	; 0x2a8c <_ZN5Print11printNumberEmh+0x84>
    2a88:	f0 5d       	subi	r31, 0xD0	; 208
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <_ZN5Print11printNumberEmh+0x86>
    2a8c:	f9 5c       	subi	r31, 0xC9	; 201
    2a8e:	d7 01       	movw	r26, r14
    2a90:	fc 93       	st	X, r31
    2a92:	01 2b       	or	r16, r17
    2a94:	02 2b       	or	r16, r18
    2a96:	03 2b       	or	r16, r19
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <_ZN5Print11printNumberEmh+0x9c>
    2a9a:	7e 2e       	mov	r7, r30
    2a9c:	37 2f       	mov	r19, r23
    2a9e:	84 2f       	mov	r24, r20
    2aa0:	95 2f       	mov	r25, r21
    2aa2:	de cf       	rjmp	.-68     	; 0x2a60 <_ZN5Print11printNumberEmh+0x58>
    2aa4:	e1 14       	cp	r14, r1
    2aa6:	f1 04       	cpc	r15, r1
    2aa8:	91 f0       	breq	.+36     	; 0x2ace <_ZN5Print11printNumberEmh+0xc6>
    2aaa:	f7 01       	movw	r30, r14
    2aac:	01 90       	ld	r0, Z+
    2aae:	00 20       	and	r0, r0
    2ab0:	e9 f7       	brne	.-6      	; 0x2aac <_ZN5Print11printNumberEmh+0xa4>
    2ab2:	31 97       	sbiw	r30, 0x01	; 1
    2ab4:	af 01       	movw	r20, r30
    2ab6:	4e 19       	sub	r20, r14
    2ab8:	5f 09       	sbc	r21, r15
    2aba:	d6 01       	movw	r26, r12
    2abc:	ed 91       	ld	r30, X+
    2abe:	fc 91       	ld	r31, X
    2ac0:	02 80       	ldd	r0, Z+2	; 0x02
    2ac2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ac4:	e0 2d       	mov	r30, r0
    2ac6:	b7 01       	movw	r22, r14
    2ac8:	c6 01       	movw	r24, r12
    2aca:	19 95       	eicall
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <_ZN5Print11printNumberEmh+0xca>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a1 96       	adiw	r28, 0x21	; 33
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	ff 90       	pop	r15
    2ae8:	ef 90       	pop	r14
    2aea:	df 90       	pop	r13
    2aec:	cf 90       	pop	r12
    2aee:	bf 90       	pop	r11
    2af0:	af 90       	pop	r10
    2af2:	9f 90       	pop	r9
    2af4:	8f 90       	pop	r8
    2af6:	7f 90       	pop	r7
    2af8:	6f 90       	pop	r6
    2afa:	08 95       	ret

00002afc <_ZN5Print5printEmi>:
    2afc:	21 15       	cp	r18, r1
    2afe:	31 05       	cpc	r19, r1
    2b00:	49 f4       	brne	.+18     	; 0x2b14 <_ZN5Print5printEmi+0x18>
    2b02:	dc 01       	movw	r26, r24
    2b04:	ed 91       	ld	r30, X+
    2b06:	fc 91       	ld	r31, X
    2b08:	01 90       	ld	r0, Z+
    2b0a:	f0 81       	ld	r31, Z
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	64 2f       	mov	r22, r20
    2b10:	19 95       	eicall
    2b12:	08 95       	ret
    2b14:	79 cf       	rjmp	.-270    	; 0x2a08 <_ZN5Print11printNumberEmh>
    2b16:	08 95       	ret

00002b18 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2b18:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    2b1a:	ab 01       	movw	r20, r22
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	ed cf       	rjmp	.-38     	; 0x2afc <_ZN5Print5printEmi>
}
    2b22:	08 95       	ret

00002b24 <__vector_23>:
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2b24:	1f 92       	push	r1
    2b26:	0f 92       	push	r0
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	0f 92       	push	r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	2f 93       	push	r18
    2b30:	3f 93       	push	r19
    2b32:	8f 93       	push	r24
    2b34:	9f 93       	push	r25
    2b36:	af 93       	push	r26
    2b38:	bf 93       	push	r27
    2b3a:	80 91 f2 1a 	lds	r24, 0x1AF2
    2b3e:	90 91 f3 1a 	lds	r25, 0x1AF3
    2b42:	a0 91 f4 1a 	lds	r26, 0x1AF4
    2b46:	b0 91 f5 1a 	lds	r27, 0x1AF5
    2b4a:	30 91 f1 1a 	lds	r19, 0x1AF1
    2b4e:	23 e0       	ldi	r18, 0x03	; 3
    2b50:	23 0f       	add	r18, r19
    2b52:	2d 37       	cpi	r18, 0x7D	; 125
    2b54:	20 f4       	brcc	.+8      	; 0x2b5e <__vector_23+0x3a>
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	a1 1d       	adc	r26, r1
    2b5a:	b1 1d       	adc	r27, r1
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <__vector_23+0x44>
    2b5e:	26 e8       	ldi	r18, 0x86	; 134
    2b60:	23 0f       	add	r18, r19
    2b62:	02 96       	adiw	r24, 0x02	; 2
    2b64:	a1 1d       	adc	r26, r1
    2b66:	b1 1d       	adc	r27, r1
    2b68:	20 93 f1 1a 	sts	0x1AF1, r18
    2b6c:	80 93 f2 1a 	sts	0x1AF2, r24
    2b70:	90 93 f3 1a 	sts	0x1AF3, r25
    2b74:	a0 93 f4 1a 	sts	0x1AF4, r26
    2b78:	b0 93 f5 1a 	sts	0x1AF5, r27
    2b7c:	80 91 f6 1a 	lds	r24, 0x1AF6
    2b80:	90 91 f7 1a 	lds	r25, 0x1AF7
    2b84:	a0 91 f8 1a 	lds	r26, 0x1AF8
    2b88:	b0 91 f9 1a 	lds	r27, 0x1AF9
    2b8c:	01 96       	adiw	r24, 0x01	; 1
    2b8e:	a1 1d       	adc	r26, r1
    2b90:	b1 1d       	adc	r27, r1
    2b92:	80 93 f6 1a 	sts	0x1AF6, r24
    2b96:	90 93 f7 1a 	sts	0x1AF7, r25
    2b9a:	a0 93 f8 1a 	sts	0x1AF8, r26
    2b9e:	b0 93 f9 1a 	sts	0x1AF9, r27
    2ba2:	bf 91       	pop	r27
    2ba4:	af 91       	pop	r26
    2ba6:	9f 91       	pop	r25
    2ba8:	8f 91       	pop	r24
    2baa:	3f 91       	pop	r19
    2bac:	2f 91       	pop	r18
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	0f 90       	pop	r0
    2bb4:	1f 90       	pop	r1
    2bb6:	18 95       	reti

00002bb8 <millis>:
    2bb8:	2f b7       	in	r18, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	60 91 f2 1a 	lds	r22, 0x1AF2
    2bc0:	70 91 f3 1a 	lds	r23, 0x1AF3
    2bc4:	80 91 f4 1a 	lds	r24, 0x1AF4
    2bc8:	90 91 f5 1a 	lds	r25, 0x1AF5
    2bcc:	2f bf       	out	0x3f, r18	; 63
    2bce:	08 95       	ret

00002bd0 <micros>:
    2bd0:	3f b7       	in	r19, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	80 91 f6 1a 	lds	r24, 0x1AF6
    2bd8:	90 91 f7 1a 	lds	r25, 0x1AF7
    2bdc:	a0 91 f8 1a 	lds	r26, 0x1AF8
    2be0:	b0 91 f9 1a 	lds	r27, 0x1AF9
    2be4:	26 b5       	in	r18, 0x26	; 38
    2be6:	a8 9b       	sbis	0x15, 0	; 21
    2be8:	05 c0       	rjmp	.+10     	; 0x2bf4 <micros+0x24>
    2bea:	2f 3f       	cpi	r18, 0xFF	; 255
    2bec:	19 f0       	breq	.+6      	; 0x2bf4 <micros+0x24>
    2bee:	01 96       	adiw	r24, 0x01	; 1
    2bf0:	a1 1d       	adc	r26, r1
    2bf2:	b1 1d       	adc	r27, r1
    2bf4:	3f bf       	out	0x3f, r19	; 63
    2bf6:	ba 2f       	mov	r27, r26
    2bf8:	a9 2f       	mov	r26, r25
    2bfa:	98 2f       	mov	r25, r24
    2bfc:	88 27       	eor	r24, r24
    2bfe:	82 0f       	add	r24, r18
    2c00:	91 1d       	adc	r25, r1
    2c02:	a1 1d       	adc	r26, r1
    2c04:	b1 1d       	adc	r27, r1
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	66 0f       	add	r22, r22
    2c0c:	77 1f       	adc	r23, r23
    2c0e:	88 1f       	adc	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	08 95       	ret

00002c1c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	39 f0       	breq	.+14     	; 0x2c30 <delayMicroseconds+0x14>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2c2a:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <delayMicroseconds+0x10>
    2c30:	08 95       	ret

00002c32 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c32:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c34:	84 b5       	in	r24, 0x24	; 36
    2c36:	82 60       	ori	r24, 0x02	; 2
    2c38:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c3a:	84 b5       	in	r24, 0x24	; 36
    2c3c:	81 60       	ori	r24, 0x01	; 1
    2c3e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c40:	85 b5       	in	r24, 0x25	; 37
    2c42:	82 60       	ori	r24, 0x02	; 2
    2c44:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2c46:	85 b5       	in	r24, 0x25	; 37
    2c48:	81 60       	ori	r24, 0x01	; 1
    2c4a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2c4c:	ee e6       	ldi	r30, 0x6E	; 110
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	81 60       	ori	r24, 0x01	; 1
    2c54:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2c56:	e1 e8       	ldi	r30, 0x81	; 129
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2c5c:	80 81       	ld	r24, Z
    2c5e:	82 60       	ori	r24, 0x02	; 2
    2c60:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2c62:	80 81       	ld	r24, Z
    2c64:	81 60       	ori	r24, 0x01	; 1
    2c66:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2c68:	e0 e8       	ldi	r30, 0x80	; 128
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	81 60       	ori	r24, 0x01	; 1
    2c70:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2c72:	e1 eb       	ldi	r30, 0xB1	; 177
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	84 60       	ori	r24, 0x04	; 4
    2c7a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2c7c:	e0 eb       	ldi	r30, 0xB0	; 176
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	81 60       	ori	r24, 0x01	; 1
    2c84:	80 83       	st	Z, r24
	#warning Timer 2 not finished (may not be present on this CPU)
#endif


#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2c86:	e1 e9       	ldi	r30, 0x91	; 145
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	82 60       	ori	r24, 0x02	; 2
    2c8e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2c90:	80 81       	ld	r24, Z
    2c92:	81 60       	ori	r24, 0x01	; 1
    2c94:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2c96:	e0 e9       	ldi	r30, 0x90	; 144
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	81 60       	ori	r24, 0x01	; 1
    2c9e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2ca0:	e1 ea       	ldi	r30, 0xA1	; 161
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	82 60       	ori	r24, 0x02	; 2
    2ca8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2caa:	80 81       	ld	r24, Z
    2cac:	81 60       	ori	r24, 0x01	; 1
    2cae:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2cb0:	e0 ea       	ldi	r30, 0xA0	; 160
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	81 60       	ori	r24, 0x01	; 1
    2cb8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2cba:	e1 e2       	ldi	r30, 0x21	; 33
    2cbc:	f1 e0       	ldi	r31, 0x01	; 1
    2cbe:	80 81       	ld	r24, Z
    2cc0:	82 60       	ori	r24, 0x02	; 2
    2cc2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2cc4:	80 81       	ld	r24, Z
    2cc6:	81 60       	ori	r24, 0x01	; 1
    2cc8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2cca:	e0 e2       	ldi	r30, 0x20	; 32
    2ccc:	f1 e0       	ldi	r31, 0x01	; 1
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 60       	ori	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2cd4:	ea e7       	ldi	r30, 0x7A	; 122
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	84 60       	ori	r24, 0x04	; 4
    2cdc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2cde:	80 81       	ld	r24, Z
    2ce0:	82 60       	ori	r24, 0x02	; 2
    2ce2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 60       	ori	r24, 0x01	; 1
    2ce8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2cea:	80 81       	ld	r24, Z
    2cec:	80 68       	ori	r24, 0x80	; 128
    2cee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2cf0:	10 92 c1 00 	sts	0x00C1, r1
    2cf4:	08 95       	ret

00002cf6 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	31 97       	sbiw	r30, 0x01	; 1
    2cfc:	e1 31       	cpi	r30, 0x11	; 17
    2cfe:	f1 05       	cpc	r31, r1
    2d00:	08 f0       	brcs	.+2      	; 0x2d04 <turnOffPWM+0xe>
    2d02:	58 c0       	rjmp	.+176    	; 0x2db4 <turnOffPWM+0xbe>
    2d04:	ee 58       	subi	r30, 0x8E	; 142
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	bc c0       	rjmp	.+376    	; 0x2e82 <__tablejump2__>
    2d0a:	e0 e8       	ldi	r30, 0x80	; 128
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	8f 77       	andi	r24, 0x7F	; 127
    2d12:	80 83       	st	Z, r24
    2d14:	08 95       	ret
    2d16:	e0 e8       	ldi	r30, 0x80	; 128
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8f 7d       	andi	r24, 0xDF	; 223
    2d1e:	80 83       	st	Z, r24
    2d20:	08 95       	ret
    2d22:	84 b5       	in	r24, 0x24	; 36
    2d24:	8f 77       	andi	r24, 0x7F	; 127
    2d26:	84 bd       	out	0x24, r24	; 36
    2d28:	08 95       	ret
    2d2a:	84 b5       	in	r24, 0x24	; 36
    2d2c:	8f 7d       	andi	r24, 0xDF	; 223
    2d2e:	84 bd       	out	0x24, r24	; 36
    2d30:	08 95       	ret
    2d32:	e0 eb       	ldi	r30, 0xB0	; 176
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 77       	andi	r24, 0x7F	; 127
    2d3a:	80 83       	st	Z, r24
    2d3c:	08 95       	ret
    2d3e:	e0 eb       	ldi	r30, 0xB0	; 176
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 7d       	andi	r24, 0xDF	; 223
    2d46:	80 83       	st	Z, r24
    2d48:	08 95       	ret
    2d4a:	e0 e9       	ldi	r30, 0x90	; 144
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	8f 77       	andi	r24, 0x7F	; 127
    2d52:	80 83       	st	Z, r24
    2d54:	08 95       	ret
    2d56:	e0 e9       	ldi	r30, 0x90	; 144
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8f 7d       	andi	r24, 0xDF	; 223
    2d5e:	80 83       	st	Z, r24
    2d60:	08 95       	ret
    2d62:	e0 e9       	ldi	r30, 0x90	; 144
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	87 7f       	andi	r24, 0xF7	; 247
    2d6a:	80 83       	st	Z, r24
    2d6c:	08 95       	ret
    2d6e:	e0 ea       	ldi	r30, 0xA0	; 160
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 77       	andi	r24, 0x7F	; 127
    2d76:	80 83       	st	Z, r24
    2d78:	08 95       	ret
    2d7a:	e0 ea       	ldi	r30, 0xA0	; 160
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8f 7d       	andi	r24, 0xDF	; 223
    2d82:	80 83       	st	Z, r24
    2d84:	08 95       	ret
    2d86:	e0 ea       	ldi	r30, 0xA0	; 160
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	87 7f       	andi	r24, 0xF7	; 247
    2d8e:	80 83       	st	Z, r24
    2d90:	08 95       	ret
    2d92:	e0 e2       	ldi	r30, 0x20	; 32
    2d94:	f1 e0       	ldi	r31, 0x01	; 1
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 77       	andi	r24, 0x7F	; 127
    2d9a:	80 83       	st	Z, r24
    2d9c:	08 95       	ret
    2d9e:	e0 e2       	ldi	r30, 0x20	; 32
    2da0:	f1 e0       	ldi	r31, 0x01	; 1
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 7d       	andi	r24, 0xDF	; 223
    2da6:	80 83       	st	Z, r24
    2da8:	08 95       	ret
    2daa:	e0 e2       	ldi	r30, 0x20	; 32
    2dac:	f1 e0       	ldi	r31, 0x01	; 1
    2dae:	80 81       	ld	r24, Z
    2db0:	87 7f       	andi	r24, 0xF7	; 247
    2db2:	80 83       	st	Z, r24
    2db4:	08 95       	ret

00002db6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	f9 01       	movw	r30, r18
    2dc4:	ea 5f       	subi	r30, 0xFA	; 250
    2dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2dca:	f9 01       	movw	r30, r18
    2dcc:	e4 5b       	subi	r30, 0xB4	; 180
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2dd2:	f9 01       	movw	r30, r18
    2dd4:	ee 56       	subi	r30, 0x6E	; 110
    2dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd8:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2dda:	dd 23       	and	r29, r29
    2ddc:	c1 f0       	breq	.+48     	; 0x2e0e <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dde:	81 11       	cpse	r24, r1
    2de0:	8a df       	rcall	.-236    	; 0x2cf6 <turnOffPWM>

	out = portOutputRegister(port);
    2de2:	2d 2f       	mov	r18, r29
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	f9 01       	movw	r30, r18
    2de8:	ee 0f       	add	r30, r30
    2dea:	ff 1f       	adc	r31, r31
    2dec:	ee 50       	subi	r30, 0x0E	; 14
    2dee:	fe 4f       	sbci	r31, 0xFE	; 254
    2df0:	a5 91       	lpm	r26, Z+
    2df2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2df4:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2df6:	f8 94       	cli

	if (val == LOW) {
    2df8:	c1 11       	cpse	r28, r1
    2dfa:	05 c0       	rjmp	.+10     	; 0x2e06 <digitalWrite+0x50>
		*out &= ~bit;
    2dfc:	ec 91       	ld	r30, X
    2dfe:	10 95       	com	r17
    2e00:	1e 23       	and	r17, r30
    2e02:	1c 93       	st	X, r17
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <digitalWrite+0x56>
	} else {
		*out |= bit;
    2e06:	ec 91       	ld	r30, X
    2e08:	1e 2b       	or	r17, r30
    2e0a:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    2e0c:	8f bf       	out	0x3f, r24	; 63
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	08 95       	ret

00002e16 <__udivmodhi4>:
    2e16:	aa 1b       	sub	r26, r26
    2e18:	bb 1b       	sub	r27, r27
    2e1a:	51 e1       	ldi	r21, 0x11	; 17
    2e1c:	07 c0       	rjmp	.+14     	; 0x2e2c <__udivmodhi4_ep>

00002e1e <__udivmodhi4_loop>:
    2e1e:	aa 1f       	adc	r26, r26
    2e20:	bb 1f       	adc	r27, r27
    2e22:	a6 17       	cp	r26, r22
    2e24:	b7 07       	cpc	r27, r23
    2e26:	10 f0       	brcs	.+4      	; 0x2e2c <__udivmodhi4_ep>
    2e28:	a6 1b       	sub	r26, r22
    2e2a:	b7 0b       	sbc	r27, r23

00002e2c <__udivmodhi4_ep>:
    2e2c:	88 1f       	adc	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	5a 95       	dec	r21
    2e32:	a9 f7       	brne	.-22     	; 0x2e1e <__udivmodhi4_loop>
    2e34:	80 95       	com	r24
    2e36:	90 95       	com	r25
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	08 95       	ret

00002e3e <__udivmodsi4>:
    2e3e:	a1 e2       	ldi	r26, 0x21	; 33
    2e40:	1a 2e       	mov	r1, r26
    2e42:	aa 1b       	sub	r26, r26
    2e44:	bb 1b       	sub	r27, r27
    2e46:	fd 01       	movw	r30, r26
    2e48:	0d c0       	rjmp	.+26     	; 0x2e64 <__udivmodsi4_ep>

00002e4a <__udivmodsi4_loop>:
    2e4a:	aa 1f       	adc	r26, r26
    2e4c:	bb 1f       	adc	r27, r27
    2e4e:	ee 1f       	adc	r30, r30
    2e50:	ff 1f       	adc	r31, r31
    2e52:	a2 17       	cp	r26, r18
    2e54:	b3 07       	cpc	r27, r19
    2e56:	e4 07       	cpc	r30, r20
    2e58:	f5 07       	cpc	r31, r21
    2e5a:	20 f0       	brcs	.+8      	; 0x2e64 <__udivmodsi4_ep>
    2e5c:	a2 1b       	sub	r26, r18
    2e5e:	b3 0b       	sbc	r27, r19
    2e60:	e4 0b       	sbc	r30, r20
    2e62:	f5 0b       	sbc	r31, r21

00002e64 <__udivmodsi4_ep>:
    2e64:	66 1f       	adc	r22, r22
    2e66:	77 1f       	adc	r23, r23
    2e68:	88 1f       	adc	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	1a 94       	dec	r1
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <__udivmodsi4_loop>
    2e70:	60 95       	com	r22
    2e72:	70 95       	com	r23
    2e74:	80 95       	com	r24
    2e76:	90 95       	com	r25
    2e78:	9b 01       	movw	r18, r22
    2e7a:	ac 01       	movw	r20, r24
    2e7c:	bd 01       	movw	r22, r26
    2e7e:	cf 01       	movw	r24, r30
    2e80:	08 95       	ret

00002e82 <__tablejump2__>:
    2e82:	ee 0f       	add	r30, r30
    2e84:	ff 1f       	adc	r31, r31

00002e86 <__tablejump__>:
    2e86:	05 90       	lpm	r0, Z+
    2e88:	f4 91       	lpm	r31, Z
    2e8a:	e0 2d       	mov	r30, r0
    2e8c:	19 94       	eijmp

00002e8e <__tablejump_elpm__>:
    2e8e:	07 90       	elpm	r0, Z+
    2e90:	f6 91       	elpm	r31, Z
    2e92:	e0 2d       	mov	r30, r0
    2e94:	19 94       	eijmp

00002e96 <memcpy>:
    2e96:	fb 01       	movw	r30, r22
    2e98:	dc 01       	movw	r26, r24
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <memcpy+0xa>
    2e9c:	01 90       	ld	r0, Z+
    2e9e:	0d 92       	st	X+, r0
    2ea0:	41 50       	subi	r20, 0x01	; 1
    2ea2:	50 40       	sbci	r21, 0x00	; 0
    2ea4:	d8 f7       	brcc	.-10     	; 0x2e9c <memcpy+0x6>
    2ea6:	08 95       	ret

00002ea8 <_exit>:
    2ea8:	f8 94       	cli

00002eaa <__stop_program>:
    2eaa:	ff cf       	rjmp	.-2      	; 0x2eaa <__stop_program>
