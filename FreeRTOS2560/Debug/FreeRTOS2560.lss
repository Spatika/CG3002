
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  00002dda  00002e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180e  008002ae  008002ae  00002f1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00001208  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001af93  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f47  00000000  00000000  0001f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007da1  00000000  00000000  0002202e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00004074  00000000  00000000  00029dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d4a  00000000  00000000  0002de44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015206  00000000  00000000  00034b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000012b0  00000000  00000000  00049d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c5       	rjmp	.+2862   	; 0xb64 <__vector_13>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c7       	rjmp	.+3664   	; 0xea2 <__vector_20>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__vector_23>
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__vector_25>
      68:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__vector_36>
      94:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_37>
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_39>
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_51>
      d0:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__vector_52>
      d4:	db c0       	rjmp	.+438    	; 0x28c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__vector_54>
      dc:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_55>
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 16       	cp	r2, r24
      e6:	2c 16       	cp	r2, r28
      e8:	1c 16       	cp	r1, r28
      ea:	22 16       	cp	r2, r18
      ec:	71 16       	cp	r7, r17
      ee:	30 16       	cp	r3, r16
      f0:	36 16       	cp	r3, r22
      f2:	3c 16       	cp	r3, r28
      f4:	42 16       	cp	r4, r18
      f6:	48 16       	cp	r4, r24
      f8:	4e 16       	cp	r4, r30
      fa:	54 16       	cp	r5, r20
      fc:	5a 16       	cp	r5, r26
      fe:	71 16       	cp	r7, r17
     100:	60 16       	cp	r6, r16
     102:	66 16       	cp	r6, r22
     104:	6c 16       	cp	r6, r28

00000106 <__trampolines_end>:
     106:	00 00       	nop
     108:	09 0a       	sbc	r0, r25
     10a:	02 08       	sbc	r0, r2
     10c:	0b 0c       	add	r0, r11
     10e:	0d 07       	cpc	r16, r29
     110:	06 03       	mulsu	r16, r22
     112:	04 01       	movw	r0, r8
	...
     130:	00 00       	nop
     132:	11 10       	cpse	r1, r1
     134:	0f 00       	.word	0x000f	; ????
	...

0000014c <digital_pin_to_bit_mask_PGM>:
     14c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18c:	04 08 10 20 40 80                                   ... @.

00000192 <digital_pin_to_port_PGM>:
     192:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d2:	0b 0b 0b 0b 0b 0b                                   ......

000001d8 <port_to_input_PGM>:
     1d8:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1e8:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f2 <port_to_output_PGM>:
     1f2:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     202:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020c <port_to_mode_PGM>:
     20c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000226 <__ctors_start>:
     226:	40 02       	muls	r20, r16
     228:	05 10       	cpse	r0, r5
     22a:	66 13       	cpse	r22, r22

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d1 e2       	ldi	r29, 0x21	; 33
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	12 e0       	ldi	r17, 0x02	; 2
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b2 e0       	ldi	r27, 0x02	; 2
     242:	ea ed       	ldi	r30, 0xDA	; 218
     244:	fd e2       	ldi	r31, 0x2D	; 45
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 3a       	cpi	r26, 0xAE	; 174
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	2a e1       	ldi	r18, 0x1A	; 26
     258:	ae ea       	ldi	r26, 0xAE	; 174
     25a:	b2 e0       	ldi	r27, 0x02	; 2
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ac 3b       	cpi	r26, 0xBC	; 188
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	12 e0       	ldi	r17, 0x02	; 2
     268:	cc e2       	ldi	r28, 0x2C	; 44
     26a:	d2 e0       	ldi	r29, 0x02	; 2
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	06 c0       	rjmp	.+12     	; 0x27c <__do_global_ctors+0x16>
     270:	22 97       	sbiw	r28, 0x02	; 2
     272:	01 09       	sbc	r16, r1
     274:	fe 01       	movw	r30, r28
     276:	0b bf       	out	0x3b, r16	; 59
     278:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__tablejump_elpm__>
     27c:	c6 32       	cpi	r28, 0x26	; 38
     27e:	d1 07       	cpc	r29, r17
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 07       	cpc	r16, r24
     284:	a9 f7       	brne	.-22     	; 0x270 <__do_global_ctors+0xa>
     286:	9d d0       	rcall	.+314    	; 0x3c2 <main>
     288:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <_Z5task3Pv>:
	
}
#define STACK_DEPTH 2048

void vApplicationIdleHook()
{
     28e:	08 95       	ret

00000290 <_Z5task1Pv>:
     290:	c9 e3       	ldi	r28, 0x39	; 57
     292:	d0 e0       	ldi	r29, 0x00	; 0
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	49 e1       	ldi	r20, 0x19	; 25
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 91 ae 02 	lds	r24, 0x02AE
     2a2:	90 91 af 02 	lds	r25, 0x02AF
     2a6:	87 d7       	rcall	.+3854   	; 0x11b6 <xQueueGenericReceive>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	81 f5       	brne	.+96     	; 0x30c <_Z5task1Pv+0x7c>
     2ac:	6a e0       	ldi	r22, 0x0A	; 10
     2ae:	72 e0       	ldi	r23, 0x02	; 2
     2b0:	81 e7       	ldi	r24, 0x71	; 113
     2b2:	98 e1       	ldi	r25, 0x18	; 24
     2b4:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     2b8:	82 ec       	ldi	r24, 0xC2	; 194
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	25 d4       	rcall	.+2122   	; 0xb08 <_ZN7NewPing4pingEv>
     2be:	8c 01       	movw	r16, r24
     2c0:	67 e1       	ldi	r22, 0x17	; 23
     2c2:	72 e0       	ldi	r23, 0x02	; 2
     2c4:	81 e7       	ldi	r24, 0x71	; 113
     2c6:	98 e1       	ldi	r25, 0x18	; 24
     2c8:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN5Print5printEPKc>
     2cc:	c8 01       	movw	r24, r16
     2ce:	be 01       	movw	r22, r28
     2d0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
     2d4:	4a e0       	ldi	r20, 0x0A	; 10
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	81 e7       	ldi	r24, 0x71	; 113
     2da:	98 e1       	ldi	r25, 0x18	; 24
     2dc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_ZN5Print5printEji>
     2e0:	60 e2       	ldi	r22, 0x20	; 32
     2e2:	72 e0       	ldi	r23, 0x02	; 2
     2e4:	81 e7       	ldi	r24, 0x71	; 113
     2e6:	98 e1       	ldi	r25, 0x18	; 24
     2e8:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 91 ae 02 	lds	r24, 0x02AE
     2fa:	90 91 af 02 	lds	r25, 0x02AF
     2fe:	ce d6       	rcall	.+3484   	; 0x109c <xQueueGenericSend>
     300:	0e d5       	rcall	.+2588   	; 0xd1e <vPortYield>
     302:	88 ee       	ldi	r24, 0xE8	; 232
     304:	93 e0       	ldi	r25, 0x03	; 3
     306:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskDelay>
     30a:	c4 cf       	rjmp	.-120    	; 0x294 <_Z5task1Pv+0x4>
     30c:	63 e2       	ldi	r22, 0x23	; 35
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	81 e7       	ldi	r24, 0x71	; 113
     312:	98 e1       	ldi	r25, 0x18	; 24
     314:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     318:	ff cf       	rjmp	.-2      	; 0x318 <_Z5task1Pv+0x88>

0000031a <_Z5task2Pv>:
     31a:	c9 e3       	ldi	r28, 0x39	; 57
     31c:	d0 e0       	ldi	r29, 0x00	; 0
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	49 e1       	ldi	r20, 0x19	; 25
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 91 ae 02 	lds	r24, 0x02AE
     32c:	90 91 af 02 	lds	r25, 0x02AF
     330:	42 d7       	rcall	.+3716   	; 0x11b6 <xQueueGenericReceive>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	81 f5       	brne	.+96     	; 0x396 <_Z5task2Pv+0x7c>
     336:	60 e5       	ldi	r22, 0x50	; 80
     338:	72 e0       	ldi	r23, 0x02	; 2
     33a:	81 e7       	ldi	r24, 0x71	; 113
     33c:	98 e1       	ldi	r25, 0x18	; 24
     33e:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     342:	80 eb       	ldi	r24, 0xB0	; 176
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	e0 d3       	rcall	.+1984   	; 0xb08 <_ZN7NewPing4pingEv>
     348:	8c 01       	movw	r16, r24
     34a:	6d e5       	ldi	r22, 0x5D	; 93
     34c:	72 e0       	ldi	r23, 0x02	; 2
     34e:	81 e7       	ldi	r24, 0x71	; 113
     350:	98 e1       	ldi	r25, 0x18	; 24
     352:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN5Print5printEPKc>
     356:	c8 01       	movw	r24, r16
     358:	be 01       	movw	r22, r28
     35a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
     35e:	4a e0       	ldi	r20, 0x0A	; 10
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	81 e7       	ldi	r24, 0x71	; 113
     364:	98 e1       	ldi	r25, 0x18	; 24
     366:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_ZN5Print5printEji>
     36a:	60 e2       	ldi	r22, 0x20	; 32
     36c:	72 e0       	ldi	r23, 0x02	; 2
     36e:	81 e7       	ldi	r24, 0x71	; 113
     370:	98 e1       	ldi	r25, 0x18	; 24
     372:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 91 ae 02 	lds	r24, 0x02AE
     384:	90 91 af 02 	lds	r25, 0x02AF
     388:	89 d6       	rcall	.+3346   	; 0x109c <xQueueGenericSend>
     38a:	c9 d4       	rcall	.+2450   	; 0xd1e <vPortYield>
     38c:	88 ee       	ldi	r24, 0xE8	; 232
     38e:	93 e0       	ldi	r25, 0x03	; 3
     390:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskDelay>
     394:	c4 cf       	rjmp	.-120    	; 0x31e <_Z5task2Pv+0x4>
     396:	63 e2       	ldi	r22, 0x23	; 35
     398:	72 e0       	ldi	r23, 0x02	; 2
     39a:	81 e7       	ldi	r24, 0x71	; 113
     39c:	98 e1       	ldi	r25, 0x18	; 24
     39e:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPKc>
     3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <_Z5task2Pv+0x88>

000003a4 <setup>:
     3a4:	89 eb       	ldi	r24, 0xB9	; 185
     3a6:	97 e1       	ldi	r25, 0x17	; 23
     3a8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN7TwoWire5beginEv>
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	52 ec       	ldi	r21, 0xC2	; 194
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	81 e7       	ldi	r24, 0x71	; 113
     3b6:	98 e1       	ldi	r25, 0x18	; 24
     3b8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <_ZN14HardwareSerial5beginEm>
     3bc:	84 ed       	ldi	r24, 0xD4	; 212
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	cd c2       	rjmp	.+1434   	; 0x95c <_ZN7MPU605010initializeEv>

000003c2 <main>:
	//
}

int main(void)
{
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <main+0x14>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <main+0x16>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
	
	init() ;
     3dc:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <init>
	setup() ;
     3e0:	e1 df       	rcall	.-62     	; 0x3a4 <setup>
	
	TaskHandle_t t1, t2, t3 ; 
	vSemaphoreCreateBinary(printing_semphr);
     3e2:	43 e0       	ldi	r20, 0x03	; 3
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	32 d6       	rcall	.+3172   	; 0x104e <xQueueGenericCreate>
     3ea:	90 93 af 02 	sts	0x02AF, r25
     3ee:	80 93 ae 02 	sts	0x02AE, r24
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	31 f0       	breq	.+12     	; 0x402 <main+0x40>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	4d d6       	rcall	.+3226   	; 0x109c <xQueueGenericSend>
	
	xTaskCreate(task1, "UltraSonic 1", STACK_DEPTH, NULL, 1, &t1) ;
     402:	a1 2c       	mov	r10, r1
     404:	b1 2c       	mov	r11, r1
     406:	c1 2c       	mov	r12, r1
     408:	d1 2c       	mov	r13, r1
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	7c 01       	movw	r14, r24
     410:	01 e0       	ldi	r16, 0x01	; 1
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	58 e0       	ldi	r21, 0x08	; 8
     41a:	66 e6       	ldi	r22, 0x66	; 102
     41c:	72 e0       	ldi	r23, 0x02	; 2
     41e:	88 e4       	ldi	r24, 0x48	; 72
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	ab d7       	rcall	.+3926   	; 0x137a <xTaskGenericCreate>
	xTaskCreate(task2, "UltraSonic 2", STACK_DEPTH, NULL, 2, &t2) ;
     424:	ce 01       	movw	r24, r28
     426:	03 96       	adiw	r24, 0x03	; 3
     428:	7c 01       	movw	r14, r24
     42a:	02 e0       	ldi	r16, 0x02	; 2
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	58 e0       	ldi	r21, 0x08	; 8
     434:	63 e7       	ldi	r22, 0x73	; 115
     436:	72 e0       	ldi	r23, 0x02	; 2
     438:	8d e8       	ldi	r24, 0x8D	; 141
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	9e d7       	rcall	.+3900   	; 0x137a <xTaskGenericCreate>
	xTaskCreate(task3, "MPU6050", STACK_DEPTH, NULL, 3, &t3) ; 
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	7c 01       	movw	r14, r24
     444:	03 e0       	ldi	r16, 0x03	; 3
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	58 e0       	ldi	r21, 0x08	; 8
     44e:	60 e8       	ldi	r22, 0x80	; 128
     450:	72 e0       	ldi	r23, 0x02	; 2
     452:	87 e4       	ldi	r24, 0x47	; 71
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	91 d7       	rcall	.+3874   	; 0x137a <xTaskGenericCreate>
	
	vTaskStartScheduler();
     458:	0e 94 a7 0a 	call	0x154e	; 0x154e <vTaskStartScheduler>
	
	return 0 ;
	
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	26 96       	adiw	r28, 0x06	; 6
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	bf 90       	pop	r11
     47c:	af 90       	pop	r10
     47e:	08 95       	ret

00000480 <_GLOBAL__sub_I_accelgyro>:
#include "I2Cdev.h"
#include "MPU6050.h"
#include "Wire.h"

#include "NewPing.h"
MPU6050 accelgyro;
     480:	84 ed       	ldi	r24, 0xD4	; 212
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	43 d2       	rcall	.+1158   	; 0x90c <_ZN7MPU6050C1Ev>



#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar1(TRIGGER_PIN1, ECHO_PIN1, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
     486:	28 ec       	ldi	r18, 0xC8	; 200
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4b e0       	ldi	r20, 0x0B	; 11
     48c:	6c e0       	ldi	r22, 0x0C	; 12
     48e:	82 ec       	ldi	r24, 0xC2	; 194
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	74 d2       	rcall	.+1256   	; 0x97c <_ZN7NewPingC1Ehhi>
NewPing sonar2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
     494:	28 ec       	ldi	r18, 0xC8	; 200
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	49 e0       	ldi	r20, 0x09	; 9
     49a:	6a e0       	ldi	r22, 0x0A	; 10
     49c:	80 eb       	ldi	r24, 0xB0	; 176
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	6d c2       	rjmp	.+1242   	; 0x97c <_ZN7NewPingC1Ehhi>

000004a2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     4a8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     4ac:	80 91 e3 02 	lds	r24, 0x02E3
     4b0:	90 91 e4 02 	lds	r25, 0x02E4
     4b4:	89 2b       	or	r24, r25
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     4b8:	88 ee       	ldi	r24, 0xE8	; 232
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	90 93 e4 02 	sts	0x02E4, r25
     4c0:	80 93 e3 02 	sts	0x02E3, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     4c4:	20 91 e5 02 	lds	r18, 0x02E5
     4c8:	30 91 e6 02 	lds	r19, 0x02E6
     4cc:	ce 01       	movw	r24, r28
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	43 e1       	ldi	r20, 0x13	; 19
     4d6:	94 07       	cpc	r25, r20
     4d8:	70 f4       	brcc	.+28     	; 0x4f6 <pvPortMalloc+0x54>
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	58 f4       	brcc	.+22     	; 0x4f6 <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     4e0:	c0 91 e3 02 	lds	r28, 0x02E3
     4e4:	d0 91 e4 02 	lds	r29, 0x02E4
     4e8:	c2 0f       	add	r28, r18
     4ea:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     4ec:	90 93 e6 02 	sts	0x02E6, r25
     4f0:	80 93 e5 02 	sts	0x02E5, r24
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <pvPortMalloc+0x58>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4fa:	0e 94 89 0b 	call	0x1712	; 0x1712 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4fe:	ce 01       	movw	r24, r28
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     506:	08 95       	ret

00000508 <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	1f 92       	push	r1
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	06 2f       	mov	r16, r22
     51e:	14 2f       	mov	r17, r20
     520:	68 2f       	mov	r22, r24
     522:	89 eb       	ldi	r24, 0xB9	; 185
     524:	97 e1       	ldi	r25, 0x17	; 23
     526:	29 83       	std	Y+1, r18	; 0x01
     528:	3a 83       	std	Y+2, r19	; 0x02
     52a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN7TwoWire17beginTransmissionEh>
     52e:	60 2f       	mov	r22, r16
     530:	89 eb       	ldi	r24, 0xB9	; 185
     532:	97 e1       	ldi	r25, 0x17	; 23
     534:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN7TwoWire5writeEh>
     538:	29 81       	ldd	r18, Y+1	; 0x01
     53a:	02 2f       	mov	r16, r18
     53c:	e2 2e       	mov	r14, r18
     53e:	3a 81       	ldd	r19, Y+2	; 0x02
     540:	f3 2e       	mov	r15, r19
     542:	8e 2d       	mov	r24, r14
     544:	80 1b       	sub	r24, r16
     546:	81 17       	cp	r24, r17
     548:	40 f4       	brcc	.+16     	; 0x55a <_ZN6I2Cdev10writeBytesEhhhPh+0x52>
     54a:	f7 01       	movw	r30, r14
     54c:	61 91       	ld	r22, Z+
     54e:	7f 01       	movw	r14, r30
     550:	89 eb       	ldi	r24, 0xB9	; 185
     552:	97 e1       	ldi	r25, 0x17	; 23
     554:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN7TwoWire5writeEh>
     558:	f4 cf       	rjmp	.-24     	; 0x542 <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
     55a:	89 eb       	ldi	r24, 0xB9	; 185
     55c:	97 e1       	ldi	r25, 0x17	; 23
     55e:	0e 94 03 10 	call	0x2006	; 0x2006 <_ZN7TwoWire15endTransmissionEv>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	08 95       	ret

00000576 <_ZN6I2Cdev9writeByteEhhh>:
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	49 83       	std	Y+1, r20	; 0x01
     582:	9e 01       	movw	r18, r28
     584:	2f 5f       	subi	r18, 0xFF	; 255
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	be df       	rcall	.-132    	; 0x508 <_ZN6I2Cdev10writeBytesEhhhPh>
     58c:	0f 90       	pop	r0
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <_ZN6I2Cdev9readBytesEhhhPhj>:
     594:	3f 92       	push	r3
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	68 2e       	mov	r6, r24
     5c0:	56 2e       	mov	r5, r22
     5c2:	74 2e       	mov	r7, r20
     5c4:	3a 83       	std	Y+2, r19	; 0x02
     5c6:	29 83       	std	Y+1, r18	; 0x01
     5c8:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <millis>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
     5d0:	31 2c       	mov	r3, r1
     5d2:	41 2c       	mov	r4, r1
     5d4:	87 2d       	mov	r24, r7
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 83       	std	Y+4, r25	; 0x04
     5da:	8b 83       	std	Y+3, r24	; 0x03
     5dc:	48 01       	movw	r8, r16
     5de:	a1 2c       	mov	r10, r1
     5e0:	b1 2c       	mov	r11, r1
     5e2:	37 14       	cp	r3, r7
     5e4:	b0 f5       	brcc	.+108    	; 0x652 <_ZN6I2Cdev9readBytesEhhhPhj+0xbe>
     5e6:	66 2d       	mov	r22, r6
     5e8:	89 eb       	ldi	r24, 0xB9	; 185
     5ea:	97 e1       	ldi	r25, 0x17	; 23
     5ec:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN7TwoWire17beginTransmissionEh>
     5f0:	65 2d       	mov	r22, r5
     5f2:	89 eb       	ldi	r24, 0xB9	; 185
     5f4:	97 e1       	ldi	r25, 0x17	; 23
     5f6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN7TwoWire5writeEh>
     5fa:	89 eb       	ldi	r24, 0xB9	; 185
     5fc:	97 e1       	ldi	r25, 0x17	; 23
     5fe:	0e 94 03 10 	call	0x2006	; 0x2006 <_ZN7TwoWire15endTransmissionEv>
     602:	66 2d       	mov	r22, r6
     604:	89 eb       	ldi	r24, 0xB9	; 185
     606:	97 e1       	ldi	r25, 0x17	; 23
     608:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN7TwoWire17beginTransmissionEh>
     60c:	4b 81       	ldd	r20, Y+3	; 0x03
     60e:	5c 81       	ldd	r21, Y+4	; 0x04
     610:	43 19       	sub	r20, r3
     612:	51 09       	sbc	r21, r1
     614:	41 32       	cpi	r20, 0x21	; 33
     616:	51 05       	cpc	r21, r1
     618:	14 f0       	brlt	.+4      	; 0x61e <_ZN6I2Cdev9readBytesEhhhPhj+0x8a>
     61a:	40 e2       	ldi	r20, 0x20	; 32
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	66 2d       	mov	r22, r6
     620:	89 eb       	ldi	r24, 0xB9	; 185
     622:	97 e1       	ldi	r25, 0x17	; 23
     624:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN7TwoWire11requestFromEhh>
     628:	89 eb       	ldi	r24, 0xB9	; 185
     62a:	97 e1       	ldi	r25, 0x17	; 23
     62c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire9availableEv>
     630:	89 2b       	or	r24, r25
     632:	59 f1       	breq	.+86     	; 0x68a <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     634:	01 15       	cp	r16, r1
     636:	11 05       	cpc	r17, r1
     638:	99 f1       	breq	.+102    	; 0x6a0 <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     63a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <millis>
     63e:	6c 19       	sub	r22, r12
     640:	7d 09       	sbc	r23, r13
     642:	8e 09       	sbc	r24, r14
     644:	9f 09       	sbc	r25, r15
     646:	68 15       	cp	r22, r8
     648:	79 05       	cpc	r23, r9
     64a:	8a 05       	cpc	r24, r10
     64c:	9b 05       	cpc	r25, r11
     64e:	40 f1       	brcs	.+80     	; 0x6a0 <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     650:	1c c0       	rjmp	.+56     	; 0x68a <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     652:	01 15       	cp	r16, r1
     654:	11 05       	cpc	r17, r1
     656:	a9 f1       	breq	.+106    	; 0x6c2 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     658:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <millis>
     65c:	6c 19       	sub	r22, r12
     65e:	7d 09       	sbc	r23, r13
     660:	8e 09       	sbc	r24, r14
     662:	9f 09       	sbc	r25, r15
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	60 17       	cp	r22, r16
     66a:	71 07       	cpc	r23, r17
     66c:	82 07       	cpc	r24, r18
     66e:	93 07       	cpc	r25, r19
     670:	40 f1       	brcs	.+80     	; 0x6c2 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     672:	87 2d       	mov	r24, r7
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	24 2d       	mov	r18, r4
     678:	33 27       	eor	r19, r19
     67a:	27 fd       	sbrc	r18, 7
     67c:	30 95       	com	r19
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	fc f4       	brge	.+62     	; 0x6c2 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     684:	44 24       	eor	r4, r4
     686:	4a 94       	dec	r4
     688:	1c c0       	rjmp	.+56     	; 0x6c2 <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     68a:	89 eb       	ldi	r24, 0xB9	; 185
     68c:	97 e1       	ldi	r25, 0x17	; 23
     68e:	0e 94 03 10 	call	0x2006	; 0x2006 <_ZN7TwoWire15endTransmissionEv>
     692:	87 2d       	mov	r24, r7
     694:	90 e2       	ldi	r25, 0x20	; 32
     696:	97 15       	cp	r25, r7
     698:	08 f4       	brcc	.+2      	; 0x69c <_ZN6I2Cdev9readBytesEhhhPhj+0x108>
     69a:	80 e2       	ldi	r24, 0x20	; 32
     69c:	38 0e       	add	r3, r24
     69e:	a1 cf       	rjmp	.-190    	; 0x5e2 <_ZN6I2Cdev9readBytesEhhhPhj+0x4e>
     6a0:	e9 81       	ldd	r30, Y+1	; 0x01
     6a2:	fa 81       	ldd	r31, Y+2	; 0x02
     6a4:	e4 0d       	add	r30, r4
     6a6:	f1 1d       	adc	r31, r1
     6a8:	47 fc       	sbrc	r4, 7
     6aa:	fa 95       	dec	r31
     6ac:	fe 83       	std	Y+6, r31	; 0x06
     6ae:	ed 83       	std	Y+5, r30	; 0x05
     6b0:	89 eb       	ldi	r24, 0xB9	; 185
     6b2:	97 e1       	ldi	r25, 0x17	; 23
     6b4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_ZN7TwoWire4readEv>
     6b8:	ed 81       	ldd	r30, Y+5	; 0x05
     6ba:	fe 81       	ldd	r31, Y+6	; 0x06
     6bc:	80 83       	st	Z, r24
     6be:	43 94       	inc	r4
     6c0:	b3 cf       	rjmp	.-154    	; 0x628 <_ZN6I2Cdev9readBytesEhhhPhj+0x94>
     6c2:	84 2d       	mov	r24, r4
     6c4:	26 96       	adiw	r28, 0x06	; 6
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	7f 90       	pop	r7
     6ea:	6f 90       	pop	r6
     6ec:	5f 90       	pop	r5
     6ee:	4f 90       	pop	r4
     6f0:	3f 90       	pop	r3
     6f2:	08 95       	ret

000006f4 <_ZN6I2Cdev8readByteEhhPhj>:
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	89 01       	movw	r16, r18
     6fa:	9a 01       	movw	r18, r20
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	4a df       	rcall	.-364    	; 0x594 <_ZN6I2Cdev9readBytesEhhhPhj>
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	08 95       	ret

00000706 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	18 2f       	mov	r17, r24
     71a:	06 2f       	mov	r16, r22
     71c:	f4 2e       	mov	r15, r20
     71e:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     720:	20 91 06 02 	lds	r18, 0x0206
     724:	30 91 07 02 	lds	r19, 0x0207
     728:	ae 01       	movw	r20, r28
     72a:	4f 5f       	subi	r20, 0xFF	; 255
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	e2 df       	rcall	.-60     	; 0x6f4 <_ZN6I2Cdev8readByteEhhPhj>
     730:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	0f 2c       	mov	r0, r15
     738:	01 c0       	rjmp	.+2      	; 0x73c <_ZN6I2Cdev8writeBitEhhhh+0x36>
     73a:	22 0f       	add	r18, r18
     73c:	0a 94       	dec	r0
     73e:	ea f7       	brpl	.-6      	; 0x73a <_ZN6I2Cdev8writeBitEhhhh+0x34>
     740:	ee 20       	and	r14, r14
     742:	19 f0       	breq	.+6      	; 0x74a <_ZN6I2Cdev8writeBitEhhhh+0x44>
     744:	48 2f       	mov	r20, r24
     746:	42 2b       	or	r20, r18
     748:	03 c0       	rjmp	.+6      	; 0x750 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
     74a:	42 2f       	mov	r20, r18
     74c:	40 95       	com	r20
     74e:	48 23       	and	r20, r24
     750:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     752:	60 2f       	mov	r22, r16
     754:	81 2f       	mov	r24, r17
     756:	0f df       	rcall	.-482    	; 0x576 <_ZN6I2Cdev9writeByteEhhh>
}
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	08 95       	ret

00000768 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	1f 92       	push	r1
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	f8 2e       	mov	r15, r24
     77e:	e6 2e       	mov	r14, r22
     780:	d4 2e       	mov	r13, r20
     782:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     784:	20 91 06 02 	lds	r18, 0x0206
     788:	30 91 07 02 	lds	r19, 0x0207
     78c:	ae 01       	movw	r20, r28
     78e:	4f 5f       	subi	r20, 0xFF	; 255
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	b0 df       	rcall	.-160    	; 0x6f4 <_ZN6I2Cdev8readByteEhhPhj>
     794:	88 23       	and	r24, r24
     796:	11 f1       	breq	.+68     	; 0x7dc <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     798:	4d 2d       	mov	r20, r13
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	41 1b       	sub	r20, r17
     79e:	51 09       	sbc	r21, r1
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	e1 e0       	ldi	r30, 0x01	; 1
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	1a 95       	dec	r17
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	04 2e       	mov	r0, r20
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
     7b8:	ee 0f       	add	r30, r30
     7ba:	0a 94       	dec	r0
     7bc:	ea f7       	brpl	.-6      	; 0x7b8 <_ZN6I2Cdev9writeBitsEhhhhh+0x50>
        data <<= (bitStart - length + 1); // shift data into correct position
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     7c0:	00 0f       	add	r16, r16
     7c2:	4a 95       	dec	r20
     7c4:	ea f7       	brpl	.-6      	; 0x7c0 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     7c6:	4e 2f       	mov	r20, r30
     7c8:	40 95       	com	r20
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	48 23       	and	r20, r24
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     7ce:	e0 23       	and	r30, r16
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     7d0:	4e 2b       	or	r20, r30
     7d2:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     7d4:	6e 2d       	mov	r22, r14
     7d6:	8f 2d       	mov	r24, r15
     7d8:	ce de       	rcall	.-612    	; 0x576 <_ZN6I2Cdev9writeByteEhhh>
     7da:	01 c0       	rjmp	.+2      	; 0x7de <_ZN6I2Cdev9writeBitsEhhhhh+0x76>
    } else {
        return false;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     7de:	0f 90       	pop	r0
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	08 95       	ret

000007f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     7f0:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f2:	03 96       	adiw	r24, 0x03	; 3
     7f4:	92 83       	std	Z+2, r25	; 0x02
     7f6:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7f8:	2f ef       	ldi	r18, 0xFF	; 255
     7fa:	3f ef       	ldi	r19, 0xFF	; 255
     7fc:	34 83       	std	Z+4, r19	; 0x04
     7fe:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     800:	96 83       	std	Z+6, r25	; 0x06
     802:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     804:	90 87       	std	Z+8, r25	; 0x08
     806:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     808:	10 82       	st	Z, r1
     80a:	08 95       	ret

0000080c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     80c:	fc 01       	movw	r30, r24
     80e:	11 86       	std	Z+9, r1	; 0x09
     810:	10 86       	std	Z+8, r1	; 0x08
     812:	08 95       	ret

00000814 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	9c 01       	movw	r18, r24
     81a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     81c:	dc 01       	movw	r26, r24
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	cd 91       	ld	r28, X+
     822:	dc 91       	ld	r29, X
     824:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     826:	d3 83       	std	Z+3, r29	; 0x03
     828:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     82a:	8c 81       	ldd	r24, Y+4	; 0x04
     82c:	9d 81       	ldd	r25, Y+5	; 0x05
     82e:	95 83       	std	Z+5, r25	; 0x05
     830:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	9d 81       	ldd	r25, Y+5	; 0x05
     836:	dc 01       	movw	r26, r24
     838:	13 96       	adiw	r26, 0x03	; 3
     83a:	7c 93       	st	X, r23
     83c:	6e 93       	st	-X, r22
     83e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     840:	7d 83       	std	Y+5, r23	; 0x05
     842:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     844:	31 87       	std	Z+9, r19	; 0x09
     846:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     848:	f9 01       	movw	r30, r18
     84a:	80 81       	ld	r24, Z
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	80 83       	st	Z, r24
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	8c 01       	movw	r16, r24
     860:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     862:	20 81       	ld	r18, Z
     864:	31 81       	ldd	r19, Z+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     866:	2f 3f       	cpi	r18, 0xFF	; 255
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	38 07       	cpc	r19, r24
     86c:	21 f4       	brne	.+8      	; 0x876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     86e:	e8 01       	movw	r28, r16
     870:	af 81       	ldd	r26, Y+7	; 0x07
     872:	b8 85       	ldd	r27, Y+8	; 0x08
     874:	0e c0       	rjmp	.+28     	; 0x892 <vListInsert+0x3c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     876:	d8 01       	movw	r26, r16
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	12 96       	adiw	r26, 0x02	; 2
     87c:	8d 91       	ld	r24, X+
     87e:	9c 91       	ld	r25, X
     880:	13 97       	sbiw	r26, 0x03	; 3
     882:	ec 01       	movw	r28, r24
     884:	48 81       	ld	r20, Y
     886:	59 81       	ldd	r21, Y+1	; 0x01
     888:	24 17       	cp	r18, r20
     88a:	35 07       	cpc	r19, r21
     88c:	10 f0       	brcs	.+4      	; 0x892 <vListInsert+0x3c>
     88e:	dc 01       	movw	r26, r24
     890:	f4 cf       	rjmp	.-24     	; 0x87a <vListInsert+0x24>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     892:	12 96       	adiw	r26, 0x02	; 2
     894:	8d 91       	ld	r24, X+
     896:	9c 91       	ld	r25, X
     898:	13 97       	sbiw	r26, 0x03	; 3
     89a:	93 83       	std	Z+3, r25	; 0x03
     89c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     89e:	ec 01       	movw	r28, r24
     8a0:	fd 83       	std	Y+5, r31	; 0x05
     8a2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     8a4:	b5 83       	std	Z+5, r27	; 0x05
     8a6:	a4 83       	std	Z+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     8a8:	13 96       	adiw	r26, 0x03	; 3
     8aa:	fc 93       	st	X, r31
     8ac:	ee 93       	st	-X, r30
     8ae:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8b0:	11 87       	std	Z+9, r17	; 0x09
     8b2:	00 87       	std	Z+8, r16	; 0x08

	( pxList->uxNumberOfItems )++;
     8b4:	f8 01       	movw	r30, r16
     8b6:	80 81       	ld	r24, Z
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 83       	st	Z, r24
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     8cc:	a0 85       	ldd	r26, Z+8	; 0x08
     8ce:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	24 81       	ldd	r18, Z+4	; 0x04
     8d6:	35 81       	ldd	r19, Z+5	; 0x05
     8d8:	ec 01       	movw	r28, r24
     8da:	3d 83       	std	Y+5, r19	; 0x05
     8dc:	2c 83       	std	Y+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8de:	c4 81       	ldd	r28, Z+4	; 0x04
     8e0:	d5 81       	ldd	r29, Z+5	; 0x05
     8e2:	9b 83       	std	Y+3, r25	; 0x03
     8e4:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	12 97       	sbiw	r26, 0x02	; 2
     8ee:	8e 17       	cp	r24, r30
     8f0:	9f 07       	cpc	r25, r31
     8f2:	21 f4       	brne	.+8      	; 0x8fc <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	dc 93       	st	X, r29
     8f8:	ce 93       	st	-X, r28
     8fa:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     8fc:	11 86       	std	Z+9, r1	; 0x09
     8fe:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     900:	8c 91       	ld	r24, X
     902:	81 50       	subi	r24, 0x01	; 1
     904:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <_ZN7MPU6050C1Ev>:
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
uint8_t MPU6050::getClockSource() {
    I2Cdev::readBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, buffer);
    return buffer[0];
}
     90c:	28 e6       	ldi	r18, 0x68	; 104
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	08 95       	ret

00000914 <_ZN7MPU605021setFullScaleGyroRangeEh>:
     914:	0f 93       	push	r16
     916:	06 2f       	mov	r16, r22
     918:	22 e0       	ldi	r18, 0x02	; 2
     91a:	44 e0       	ldi	r20, 0x04	; 4
     91c:	6b e1       	ldi	r22, 0x1B	; 27
     91e:	fc 01       	movw	r30, r24
     920:	80 81       	ld	r24, Z
     922:	22 df       	rcall	.-444    	; 0x768 <_ZN6I2Cdev9writeBitsEhhhhh>
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <_ZN7MPU605022setFullScaleAccelRangeEh>:
     928:	0f 93       	push	r16
     92a:	06 2f       	mov	r16, r22
     92c:	22 e0       	ldi	r18, 0x02	; 2
     92e:	44 e0       	ldi	r20, 0x04	; 4
     930:	6c e1       	ldi	r22, 0x1C	; 28
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
     936:	18 df       	rcall	.-464    	; 0x768 <_ZN6I2Cdev9writeBitsEhhhhh>
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <_ZN7MPU605015setSleepEnabledEb>:
     93c:	26 2f       	mov	r18, r22
     93e:	46 e0       	ldi	r20, 0x06	; 6
     940:	6b e6       	ldi	r22, 0x6B	; 107
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	df ce       	rjmp	.-578    	; 0x706 <_ZN6I2Cdev8writeBitEhhhh>

00000948 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
     948:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
     94a:	06 2f       	mov	r16, r22
     94c:	23 e0       	ldi	r18, 0x03	; 3
     94e:	42 e0       	ldi	r20, 0x02	; 2
     950:	6b e6       	ldi	r22, 0x6B	; 107
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	08 df       	rcall	.-496    	; 0x768 <_ZN6I2Cdev9writeBitsEhhhhh>
}
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	f1 df       	rcall	.-30     	; 0x948 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	d4 df       	rcall	.-88     	; 0x914 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	ce 01       	movw	r24, r28
     970:	db df       	rcall	.-74     	; 0x928 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	ce 01       	movw	r24, r28
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
 */
void MPU6050::initialize() {
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     97a:	e0 cf       	rjmp	.-64     	; 0x93c <_ZN7MPU605015setSleepEnabledEb>

0000097c <_ZN7NewPingC1Ehhi>:
	TIMSK4 = (1<<TOIE4); // Enable Timer4 interrupt.
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
#endif
}
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	dc 01       	movw	r26, r24
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	fb 01       	movw	r30, r22
     986:	e4 5b       	subi	r30, 0xB4	; 180
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	e4 91       	lpm	r30, Z
     98c:	14 96       	adiw	r26, 0x04	; 4
     98e:	ec 93       	st	X, r30
     990:	14 97       	sbiw	r26, 0x04	; 4
     992:	84 2f       	mov	r24, r20
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	e4 5b       	subi	r30, 0xB4	; 180
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	e4 91       	lpm	r30, Z
     99e:	15 96       	adiw	r26, 0x05	; 5
     9a0:	ec 93       	st	X, r30
     9a2:	15 97       	sbiw	r26, 0x05	; 5
     9a4:	6e 56       	subi	r22, 0x6E	; 110
     9a6:	7e 4f       	sbci	r23, 0xFE	; 254
     9a8:	fb 01       	movw	r30, r22
     9aa:	c4 91       	lpm	r28, Z
     9ac:	d0 e0       	ldi	r29, 0x00	; 0
     9ae:	cc 0f       	add	r28, r28
     9b0:	dd 1f       	adc	r29, r29
     9b2:	ce 50       	subi	r28, 0x0E	; 14
     9b4:	de 4f       	sbci	r29, 0xFE	; 254
     9b6:	fe 01       	movw	r30, r28
     9b8:	45 91       	lpm	r20, Z+
     9ba:	54 91       	lpm	r21, Z
     9bc:	17 96       	adiw	r26, 0x07	; 7
     9be:	5c 93       	st	X, r21
     9c0:	4e 93       	st	-X, r20
     9c2:	16 97       	sbiw	r26, 0x06	; 6
     9c4:	fc 01       	movw	r30, r24
     9c6:	ee 56       	subi	r30, 0x6E	; 110
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	84 91       	lpm	r24, Z
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	88 52       	subi	r24, 0x28	; 40
     9d4:	9e 4f       	sbci	r25, 0xFE	; 254
     9d6:	fc 01       	movw	r30, r24
     9d8:	45 91       	lpm	r20, Z+
     9da:	54 91       	lpm	r21, Z
     9dc:	1b 96       	adiw	r26, 0x0b	; 11
     9de:	5c 93       	st	X, r21
     9e0:	4e 93       	st	-X, r20
     9e2:	1a 97       	sbiw	r26, 0x0a	; 10
     9e4:	fb 01       	movw	r30, r22
     9e6:	64 91       	lpm	r22, Z
     9e8:	e6 2f       	mov	r30, r22
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	e4 5f       	subi	r30, 0xF4	; 244
     9f2:	fd 4f       	sbci	r31, 0xFD	; 253
     9f4:	85 91       	lpm	r24, Z+
     9f6:	94 91       	lpm	r25, Z
     9f8:	19 96       	adiw	r26, 0x09	; 9
     9fa:	9c 93       	st	X, r25
     9fc:	8e 93       	st	-X, r24
     9fe:	18 97       	sbiw	r26, 0x08	; 8
     a00:	c9 01       	movw	r24, r18
     a02:	25 3f       	cpi	r18, 0xF5	; 245
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	3f 07       	cpc	r19, r31
     a08:	14 f0       	brlt	.+4      	; 0xa0e <_ZN7NewPingC1Ehhi+0x92>
     a0a:	84 ef       	ldi	r24, 0xF4	; 244
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	49 e3       	ldi	r20, 0x39	; 57
     a10:	48 9f       	mul	r20, r24
     a12:	90 01       	movw	r18, r0
     a14:	49 9f       	mul	r20, r25
     a16:	30 0d       	add	r19, r0
     a18:	11 24       	eor	r1, r1
     a1a:	24 5e       	subi	r18, 0xE4	; 228
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	1d 96       	adiw	r26, 0x0d	; 13
     a20:	3c 93       	st	X, r19
     a22:	2e 93       	st	-X, r18
     a24:	1c 97       	sbiw	r26, 0x0c	; 12
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <_ZN7NewPing12ping_triggerEv>:
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
     a36:	e8 85       	ldd	r30, Y+8	; 0x08
     a38:	f9 85       	ldd	r31, Y+9	; 0x09
     a3a:	80 81       	ld	r24, Z
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	89 2b       	or	r24, r25
     a40:	80 83       	st	Z, r24
     a42:	ee 81       	ldd	r30, Y+6	; 0x06
     a44:	ff 81       	ldd	r31, Y+7	; 0x07
     a46:	90 81       	ld	r25, Z
     a48:	8c 81       	ldd	r24, Y+4	; 0x04
     a4a:	80 95       	com	r24
     a4c:	89 23       	and	r24, r25
     a4e:	80 83       	st	Z, r24
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <delayMicroseconds>
     a58:	ee 81       	ldd	r30, Y+6	; 0x06
     a5a:	ff 81       	ldd	r31, Y+7	; 0x07
     a5c:	80 81       	ld	r24, Z
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	89 2b       	or	r24, r25
     a62:	80 83       	st	Z, r24
     a64:	8a e0       	ldi	r24, 0x0A	; 10
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <delayMicroseconds>
     a6c:	ee 81       	ldd	r30, Y+6	; 0x06
     a6e:	ff 81       	ldd	r31, Y+7	; 0x07
     a70:	90 81       	ld	r25, Z
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	80 95       	com	r24
     a76:	89 23       	and	r24, r25
     a78:	80 83       	st	Z, r24
     a7a:	e8 85       	ldd	r30, Y+8	; 0x08
     a7c:	f9 85       	ldd	r31, Y+9	; 0x09
     a7e:	90 81       	ld	r25, Z
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	80 95       	com	r24
     a84:	89 23       	and	r24, r25
     a86:	80 83       	st	Z, r24
     a88:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     a8c:	60 5b       	subi	r22, 0xB0	; 176
     a8e:	79 4b       	sbci	r23, 0xB9	; 185
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	6e 87       	std	Y+14, r22	; 0x0e
     a96:	7f 87       	std	Y+15, r23	; 0x0f
     a98:	88 8b       	std	Y+16, r24	; 0x10
     a9a:	99 8b       	std	Y+17, r25	; 0x11
     a9c:	ea 85       	ldd	r30, Y+10	; 0x0a
     a9e:	fb 85       	ldd	r31, Y+11	; 0x0b
     aa0:	80 81       	ld	r24, Z
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	89 23       	and	r24, r25
     aa6:	59 f0       	breq	.+22     	; 0xabe <_ZN7NewPing12ping_triggerEv+0x92>
     aa8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     aac:	0e 85       	ldd	r16, Y+14	; 0x0e
     aae:	1f 85       	ldd	r17, Y+15	; 0x0f
     ab0:	28 89       	ldd	r18, Y+16	; 0x10
     ab2:	39 89       	ldd	r19, Y+17	; 0x11
     ab4:	06 17       	cp	r16, r22
     ab6:	17 07       	cpc	r17, r23
     ab8:	28 07       	cpc	r18, r24
     aba:	39 07       	cpc	r19, r25
     abc:	78 f7       	brcc	.-34     	; 0xa9c <_ZN7NewPing12ping_triggerEv+0x70>
     abe:	ea 85       	ldd	r30, Y+10	; 0x0a
     ac0:	fb 85       	ldd	r31, Y+11	; 0x0b
     ac2:	80 81       	ld	r24, Z
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	89 23       	and	r24, r25
     ac8:	69 f4       	brne	.+26     	; 0xae4 <_ZN7NewPing12ping_triggerEv+0xb8>
     aca:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     ace:	0e 85       	ldd	r16, Y+14	; 0x0e
     ad0:	1f 85       	ldd	r17, Y+15	; 0x0f
     ad2:	28 89       	ldd	r18, Y+16	; 0x10
     ad4:	39 89       	ldd	r19, Y+17	; 0x11
     ad6:	06 17       	cp	r16, r22
     ad8:	17 07       	cpc	r17, r23
     ada:	28 07       	cpc	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	78 f7       	brcc	.-34     	; 0xabe <_ZN7NewPing12ping_triggerEv+0x92>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0d c0       	rjmp	.+26     	; 0xafe <_ZN7NewPing12ping_triggerEv+0xd2>
     ae4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     ae8:	2c 85       	ldd	r18, Y+12	; 0x0c
     aea:	3d 85       	ldd	r19, Y+13	; 0x0d
     aec:	62 0f       	add	r22, r18
     aee:	73 1f       	adc	r23, r19
     af0:	81 1d       	adc	r24, r1
     af2:	91 1d       	adc	r25, r1
     af4:	6e 87       	std	Y+14, r22	; 0x0e
     af6:	7f 87       	std	Y+15, r23	; 0x0f
     af8:	88 8b       	std	Y+16, r24	; 0x10
     afa:	99 8b       	std	Y+17, r25	; 0x11
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <_ZN7NewPing4pingEv>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	8c df       	rcall	.-232    	; 0xa2c <_ZN7NewPing12ping_triggerEv>
     b14:	88 23       	and	r24, r24
     b16:	89 f0       	breq	.+34     	; 0xb3a <_ZN7NewPing4pingEv+0x32>
     b18:	ea 85       	ldd	r30, Y+10	; 0x0a
     b1a:	fb 85       	ldd	r31, Y+11	; 0x0b
     b1c:	80 81       	ld	r24, Z
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	89 23       	and	r24, r25
     b22:	71 f0       	breq	.+28     	; 0xb40 <_ZN7NewPing4pingEv+0x38>
     b24:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     b28:	0e 85       	ldd	r16, Y+14	; 0x0e
     b2a:	1f 85       	ldd	r17, Y+15	; 0x0f
     b2c:	28 89       	ldd	r18, Y+16	; 0x10
     b2e:	39 89       	ldd	r19, Y+17	; 0x11
     b30:	06 17       	cp	r16, r22
     b32:	17 07       	cpc	r17, r23
     b34:	28 07       	cpc	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	78 f7       	brcc	.-34     	; 0xb18 <_ZN7NewPing4pingEv+0x10>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	0c c0       	rjmp	.+24     	; 0xb58 <_ZN7NewPing4pingEv+0x50>
     b40:	0e 94 7f 15 	call	0x2afe	; 0x2afe <micros>
     b44:	2c 85       	ldd	r18, Y+12	; 0x0c
     b46:	3d 85       	ldd	r19, Y+13	; 0x0d
     b48:	25 50       	subi	r18, 0x05	; 5
     b4a:	31 09       	sbc	r19, r1
     b4c:	4e 85       	ldd	r20, Y+14	; 0x0e
     b4e:	5f 85       	ldd	r21, Y+15	; 0x0f
     b50:	24 1b       	sub	r18, r20
     b52:	35 0b       	sbc	r19, r21
     b54:	26 0f       	add	r18, r22
     b56:	37 1f       	adc	r19, r23
     b58:	c9 01       	movw	r24, r18
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <__vector_13>:


#if defined (__AVR_ATmega32U4__) // Use Timer4 for ATmega32U4 (Teensy/Leonardo).
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_COMPA_vect) {
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
#endif
	if(intFunc) intFunc(); // If wrapped function is set, call it.
     b8a:	e0 91 e7 16 	lds	r30, 0x16E7
     b8e:	f0 91 e8 16 	lds	r31, 0x16E8
     b92:	30 97       	sbiw	r30, 0x00	; 0
     b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_13+0x34>
     b96:	19 95       	eicall
}
     b98:	ff 91       	pop	r31
     b9a:	ef 91       	pop	r30
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	7f 91       	pop	r23
     ba6:	6f 91       	pop	r22
     ba8:	5f 91       	pop	r21
     baa:	4f 91       	pop	r20
     bac:	3f 91       	pop	r19
     bae:	2f 91       	pop	r18
     bb0:	0f 90       	pop	r0
     bb2:	0b be       	out	0x3b, r0	; 59
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	1f 90       	pop	r1
     bbc:	18 95       	reti

00000bbe <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     bbe:	31 e1       	ldi	r19, 0x11	; 17
     bc0:	fc 01       	movw	r30, r24
     bc2:	30 83       	st	Z, r19
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	22 e2       	ldi	r18, 0x22	; 34
     bc8:	20 83       	st	Z, r18
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	a3 e3       	ldi	r26, 0x33	; 51
     bce:	a0 83       	st	Z, r26
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	70 83       	st	Z, r23
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	10 82       	st	Z, r1
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	60 e8       	ldi	r22, 0x80	; 128
     be4:	60 83       	st	Z, r22
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	10 82       	st	Z, r1
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	10 82       	st	Z, r1
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	60 83       	st	Z, r22
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	63 e0       	ldi	r22, 0x03	; 3
     bfc:	60 83       	st	Z, r22
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	64 e0       	ldi	r22, 0x04	; 4
     c02:	60 83       	st	Z, r22
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	65 e0       	ldi	r22, 0x05	; 5
     c08:	60 83       	st	Z, r22
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	66 e0       	ldi	r22, 0x06	; 6
     c0e:	60 83       	st	Z, r22
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	67 e0       	ldi	r22, 0x07	; 7
     c14:	60 83       	st	Z, r22
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	68 e0       	ldi	r22, 0x08	; 8
     c1a:	60 83       	st	Z, r22
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	69 e0       	ldi	r22, 0x09	; 9
     c20:	60 83       	st	Z, r22
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	60 e1       	ldi	r22, 0x10	; 16
     c26:	60 83       	st	Z, r22
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	30 83       	st	Z, r19
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	32 e1       	ldi	r19, 0x12	; 18
     c30:	30 83       	st	Z, r19
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	33 e1       	ldi	r19, 0x13	; 19
     c36:	30 83       	st	Z, r19
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	34 e1       	ldi	r19, 0x14	; 20
     c3c:	30 83       	st	Z, r19
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	35 e1       	ldi	r19, 0x15	; 21
     c42:	30 83       	st	Z, r19
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	36 e1       	ldi	r19, 0x16	; 22
     c48:	30 83       	st	Z, r19
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	37 e1       	ldi	r19, 0x17	; 23
     c4e:	30 83       	st	Z, r19
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	38 e1       	ldi	r19, 0x18	; 24
     c54:	30 83       	st	Z, r19
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	39 e1       	ldi	r19, 0x19	; 25
     c5a:	30 83       	st	Z, r19
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	30 e2       	ldi	r19, 0x20	; 32
     c60:	30 83       	st	Z, r19
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	31 e2       	ldi	r19, 0x21	; 33
     c66:	30 83       	st	Z, r19
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	23 e2       	ldi	r18, 0x23	; 35
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	40 83       	st	Z, r20
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	50 83       	st	Z, r21
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	26 e2       	ldi	r18, 0x26	; 38
     c7e:	20 83       	st	Z, r18
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	27 e2       	ldi	r18, 0x27	; 39
     c84:	20 83       	st	Z, r18
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	28 e2       	ldi	r18, 0x28	; 40
     c8a:	20 83       	st	Z, r18
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	29 e2       	ldi	r18, 0x29	; 41
     c90:	20 83       	st	Z, r18
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	20 e3       	ldi	r18, 0x30	; 48
     c96:	20 83       	st	Z, r18
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	21 e3       	ldi	r18, 0x31	; 49
     c9c:	20 83       	st	Z, r18
     c9e:	89 97       	sbiw	r24, 0x29	; 41
     ca0:	08 95       	ret

00000ca2 <xPortStartScheduler>:
     ca2:	10 92 80 00 	sts	0x0080, r1
     ca6:	81 e1       	ldi	r24, 0x11	; 17
     ca8:	80 93 81 00 	sts	0x0081, r24
     cac:	80 e4       	ldi	r24, 0x40	; 64
     cae:	9f e1       	ldi	r25, 0x1F	; 31
     cb0:	90 93 87 00 	sts	0x0087, r25
     cb4:	80 93 86 00 	sts	0x0086, r24
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 6f 00 	sts	0x006F, r24
     cbe:	a0 91 49 17 	lds	r26, 0x1749
     cc2:	b0 91 4a 17 	lds	r27, 0x174A
     cc6:	cd 91       	ld	r28, X+
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	dd 91       	ld	r29, X+
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	5f 90       	pop	r5
     d04:	4f 90       	pop	r4
     d06:	3f 90       	pop	r3
     d08:	2f 90       	pop	r2
     d0a:	1f 90       	pop	r1
     d0c:	0f 90       	pop	r0
     d0e:	0c be       	out	0x3c, r0	; 60
     d10:	0f 90       	pop	r0
     d12:	0b be       	out	0x3b, r0	; 59
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	08 95       	ret
     d1c:	08 95       	ret

00000d1e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	0f 92       	push	r0
     d26:	0c b6       	in	r0, 0x3c	; 60
     d28:	0f 92       	push	r0
     d2a:	0b b6       	in	r0, 0x3b	; 59
     d2c:	0f 92       	push	r0
     d2e:	1f 92       	push	r1
     d30:	11 24       	eor	r1, r1
     d32:	2f 92       	push	r2
     d34:	3f 92       	push	r3
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
     d6e:	a0 91 49 17 	lds	r26, 0x1749
     d72:	b0 91 4a 17 	lds	r27, 0x174A
     d76:	0d b6       	in	r0, 0x3d	; 61
     d78:	0d 92       	st	X+, r0
     d7a:	0e b6       	in	r0, 0x3e	; 62
     d7c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d7e:	84 d5       	rcall	.+2824   	; 0x1888 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d80:	a0 91 49 17 	lds	r26, 0x1749
     d84:	b0 91 4a 17 	lds	r27, 0x174A
     d88:	cd 91       	ld	r28, X+
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	dd 91       	ld	r29, X+
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	3f 90       	pop	r3
     dca:	2f 90       	pop	r2
     dcc:	1f 90       	pop	r1
     dce:	0f 90       	pop	r0
     dd0:	0c be       	out	0x3c, r0	; 60
     dd2:	0f 90       	pop	r0
     dd4:	0b be       	out	0x3b, r0	; 59
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ddc:	08 95       	ret

00000dde <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	0f 92       	push	r0
     de6:	0c b6       	in	r0, 0x3c	; 60
     de8:	0f 92       	push	r0
     dea:	0b b6       	in	r0, 0x3b	; 59
     dec:	0f 92       	push	r0
     dee:	1f 92       	push	r1
     df0:	11 24       	eor	r1, r1
     df2:	2f 92       	push	r2
     df4:	3f 92       	push	r3
     df6:	4f 92       	push	r4
     df8:	5f 92       	push	r5
     dfa:	6f 92       	push	r6
     dfc:	7f 92       	push	r7
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	a0 91 49 17 	lds	r26, 0x1749
     e32:	b0 91 4a 17 	lds	r27, 0x174A
     e36:	0d b6       	in	r0, 0x3d	; 61
     e38:	0d 92       	st	X+, r0
     e3a:	0e b6       	in	r0, 0x3e	; 62
     e3c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e3e:	bd d3       	rcall	.+1914   	; 0x15ba <xTaskIncrementTick>
     e40:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e42:	22 d5       	rcall	.+2628   	; 0x1888 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e44:	a0 91 49 17 	lds	r26, 0x1749
     e48:	b0 91 4a 17 	lds	r27, 0x174A
     e4c:	cd 91       	ld	r28, X+
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	dd 91       	ld	r29, X+
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	ff 91       	pop	r31
     e56:	ef 91       	pop	r30
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	3f 90       	pop	r3
     e8e:	2f 90       	pop	r2
     e90:	1f 90       	pop	r1
     e92:	0f 90       	pop	r0
     e94:	0c be       	out	0x3c, r0	; 60
     e96:	0f 90       	pop	r0
     e98:	0b be       	out	0x3b, r0	; 59
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ea0:	08 95       	ret

00000ea2 <__vector_20>:
	 * count is incremented after the context is saved.
	 */
	
	ISR (TIMER1_OVF_vect, ISR_NAKED)
	{
		vPortYieldFromTick();
     ea2:	9d df       	rcall	.-198    	; 0xdde <vPortYieldFromTick>
		asm volatile ( "reti" );
     ea4:	18 95       	reti

00000ea6 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
     eae:	14 2f       	mov	r17, r20
     eb0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     eb2:	44 23       	and	r20, r20
     eb4:	d1 f1       	breq	.+116    	; 0xf2a <prvCopyDataToQueue+0x84>
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	11 11       	cpse	r17, r1
     eba:	15 c0       	rjmp	.+42     	; 0xee6 <prvCopyDataToQueue+0x40>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <memcpy>
     ec4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	82 0f       	add	r24, r18
     ecc:	91 1d       	adc	r25, r1
     ece:	9d 83       	std	Y+5, r25	; 0x05
     ed0:	8c 83       	std	Y+4, r24	; 0x04
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	82 17       	cp	r24, r18
     ed8:	93 07       	cpc	r25, r19
     eda:	38 f1       	brcs	.+78     	; 0xf2a <prvCopyDataToQueue+0x84>
     edc:	88 81       	ld	r24, Y
     ede:	99 81       	ldd	r25, Y+1	; 0x01
     ee0:	9d 83       	std	Y+5, r25	; 0x05
     ee2:	8c 83       	std	Y+4, r24	; 0x04
     ee4:	22 c0       	rjmp	.+68     	; 0xf2a <prvCopyDataToQueue+0x84>
     ee6:	8e 81       	ldd	r24, Y+6	; 0x06
     ee8:	9f 81       	ldd	r25, Y+7	; 0x07
     eea:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <memcpy>
     eee:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	31 95       	neg	r19
     ef4:	21 95       	neg	r18
     ef6:	31 09       	sbc	r19, r1
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	9f 83       	std	Y+7, r25	; 0x07
     f02:	8e 83       	std	Y+6, r24	; 0x06
     f04:	68 81       	ld	r22, Y
     f06:	79 81       	ldd	r23, Y+1	; 0x01
     f08:	86 17       	cp	r24, r22
     f0a:	97 07       	cpc	r25, r23
     f0c:	30 f4       	brcc	.+12     	; 0xf1a <prvCopyDataToQueue+0x74>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	9b 81       	ldd	r25, Y+3	; 0x03
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	9f 83       	std	Y+7, r25	; 0x07
     f18:	8e 83       	std	Y+6, r24	; 0x06
     f1a:	12 30       	cpi	r17, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <prvCopyDataToQueue+0x84>
     f1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f20:	88 23       	and	r24, r24
     f22:	19 f0       	breq	.+6      	; 0xf2a <prvCopyDataToQueue+0x84>
     f24:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	8a 8f       	std	Y+26, r24	; 0x1a
     f2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	8a 8f       	std	Y+26, r24	; 0x1a
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	08 95       	ret

00000f3a <prvCopyDataFromQueue>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	44 8d       	ldd	r20, Z+28	; 0x1c
     f40:	44 23       	and	r20, r20
     f42:	a1 f0       	breq	.+40     	; 0xf6c <prvCopyDataFromQueue+0x32>
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	26 81       	ldd	r18, Z+6	; 0x06
     f48:	37 81       	ldd	r19, Z+7	; 0x07
     f4a:	24 0f       	add	r18, r20
     f4c:	35 1f       	adc	r19, r21
     f4e:	37 83       	std	Z+7, r19	; 0x07
     f50:	26 83       	std	Z+6, r18	; 0x06
     f52:	62 81       	ldd	r22, Z+2	; 0x02
     f54:	73 81       	ldd	r23, Z+3	; 0x03
     f56:	26 17       	cp	r18, r22
     f58:	37 07       	cpc	r19, r23
     f5a:	20 f0       	brcs	.+8      	; 0xf64 <prvCopyDataFromQueue+0x2a>
     f5c:	20 81       	ld	r18, Z
     f5e:	31 81       	ldd	r19, Z+1	; 0x01
     f60:	37 83       	std	Z+7, r19	; 0x07
     f62:	26 83       	std	Z+6, r18	; 0x06
     f64:	66 81       	ldd	r22, Z+6	; 0x06
     f66:	77 81       	ldd	r23, Z+7	; 0x07
     f68:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <memcpy>
     f6c:	08 95       	ret

00000f6e <prvUnlockQueue>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	0f 92       	push	r0
     f7e:	8c 01       	movw	r16, r24
     f80:	0f 5e       	subi	r16, 0xEF	; 239
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f86:	18 16       	cp	r1, r24
     f88:	5c f4       	brge	.+22     	; 0xfa0 <prvUnlockQueue+0x32>
     f8a:	89 89       	ldd	r24, Y+17	; 0x11
     f8c:	88 23       	and	r24, r24
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <prvUnlockQueue+0x32>
     f90:	c8 01       	movw	r24, r16
     f92:	e5 d4       	rcall	.+2506   	; 0x195e <xTaskRemoveFromEventList>
     f94:	81 11       	cpse	r24, r1
     f96:	5f d5       	rcall	.+2750   	; 0x1a56 <vTaskMissedYield>
     f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	8e 8f       	std	Y+30, r24	; 0x1e
     f9e:	f2 cf       	rjmp	.-28     	; 0xf84 <prvUnlockQueue+0x16>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	8e 8f       	std	Y+30, r24	; 0x1e
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	0f 92       	push	r0
     fae:	8e 01       	movw	r16, r28
     fb0:	08 5f       	subi	r16, 0xF8	; 248
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb6:	18 16       	cp	r1, r24
     fb8:	5c f4       	brge	.+22     	; 0xfd0 <prvUnlockQueue+0x62>
     fba:	88 85       	ldd	r24, Y+8	; 0x08
     fbc:	88 23       	and	r24, r24
     fbe:	41 f0       	breq	.+16     	; 0xfd0 <prvUnlockQueue+0x62>
     fc0:	c8 01       	movw	r24, r16
     fc2:	cd d4       	rcall	.+2458   	; 0x195e <xTaskRemoveFromEventList>
     fc4:	81 11       	cpse	r24, r1
     fc6:	47 d5       	rcall	.+2702   	; 0x1a56 <vTaskMissedYield>
     fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fca:	81 50       	subi	r24, 0x01	; 1
     fcc:	8d 8f       	std	Y+29, r24	; 0x1d
     fce:	f2 cf       	rjmp	.-28     	; 0xfb4 <prvUnlockQueue+0x46>
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	8d 8f       	std	Y+29, r24	; 0x1d
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <xQueueGenericReset>:
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
     fee:	28 81       	ld	r18, Y
     ff0:	39 81       	ldd	r19, Y+1	; 0x01
     ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ff6:	87 9f       	mul	r24, r23
     ff8:	c0 01       	movw	r24, r0
     ffa:	11 24       	eor	r1, r1
     ffc:	a9 01       	movw	r20, r18
     ffe:	48 0f       	add	r20, r24
    1000:	59 1f       	adc	r21, r25
    1002:	5b 83       	std	Y+3, r21	; 0x03
    1004:	4a 83       	std	Y+2, r20	; 0x02
    1006:	1a 8e       	std	Y+26, r1	; 0x1a
    1008:	3d 83       	std	Y+5, r19	; 0x05
    100a:	2c 83       	std	Y+4, r18	; 0x04
    100c:	87 1b       	sub	r24, r23
    100e:	91 09       	sbc	r25, r1
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	9f 83       	std	Y+7, r25	; 0x07
    1016:	8e 83       	std	Y+6, r24	; 0x06
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	8d 8f       	std	Y+29, r24	; 0x1d
    101c:	8e 8f       	std	Y+30, r24	; 0x1e
    101e:	61 11       	cpse	r22, r1
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <xQueueGenericReset+0x54>
    1022:	88 85       	ldd	r24, Y+8	; 0x08
    1024:	88 23       	and	r24, r24
    1026:	69 f0       	breq	.+26     	; 0x1042 <xQueueGenericReset+0x60>
    1028:	ce 01       	movw	r24, r28
    102a:	08 96       	adiw	r24, 0x08	; 8
    102c:	98 d4       	rcall	.+2352   	; 0x195e <xTaskRemoveFromEventList>
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	41 f4       	brne	.+16     	; 0x1042 <xQueueGenericReset+0x60>
    1032:	75 de       	rcall	.-790    	; 0xd1e <vPortYield>
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <xQueueGenericReset+0x60>
    1036:	ce 01       	movw	r24, r28
    1038:	08 96       	adiw	r24, 0x08	; 8
    103a:	da db       	rcall	.-2124   	; 0x7f0 <vListInitialise>
    103c:	ce 01       	movw	r24, r28
    103e:	41 96       	adiw	r24, 0x11	; 17
    1040:	d7 db       	rcall	.-2130   	; 0x7f0 <vListInitialise>
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <xQueueGenericCreate>:
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	18 2f       	mov	r17, r24
    1058:	06 2f       	mov	r16, r22
    105a:	88 23       	and	r24, r24
    105c:	b9 f0       	breq	.+46     	; 0x108c <xQueueGenericCreate+0x3e>
    105e:	8f e1       	ldi	r24, 0x1F	; 31
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	1f da       	rcall	.-3010   	; 0x4a2 <pvPortMalloc>
    1064:	ec 01       	movw	r28, r24
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	89 f0       	breq	.+34     	; 0x108c <xQueueGenericCreate+0x3e>
    106a:	10 9f       	mul	r17, r16
    106c:	c0 01       	movw	r24, r0
    106e:	11 24       	eor	r1, r1
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	17 da       	rcall	.-3026   	; 0x4a2 <pvPortMalloc>
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	88 83       	st	Y, r24
    1078:	89 2b       	or	r24, r25
    107a:	31 f0       	breq	.+12     	; 0x1088 <xQueueGenericCreate+0x3a>
    107c:	1b 8f       	std	Y+27, r17	; 0x1b
    107e:	0c 8f       	std	Y+28, r16	; 0x1c
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	ce 01       	movw	r24, r28
    1084:	ae df       	rcall	.-164    	; 0xfe2 <xQueueGenericReset>
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <xQueueGenericCreate+0x42>
    1088:	ce 01       	movw	r24, r28
    108a:	3d da       	rcall	.-2950   	; 0x506 <vPortFree>
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
    1090:	ce 01       	movw	r24, r28
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <xQueueGenericSend>:
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <xQueueGenericSend+0x14>
    10b0:	1f 92       	push	r1
    10b2:	1f 92       	push	r1
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8c 01       	movw	r16, r24
    10ba:	6b 01       	movw	r12, r22
    10bc:	5d 83       	std	Y+5, r21	; 0x05
    10be:	4c 83       	std	Y+4, r20	; 0x04
    10c0:	b2 2e       	mov	r11, r18
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	7c 01       	movw	r14, r24
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	e8 0e       	add	r14, r24
    10ca:	f1 1c       	adc	r15, r1
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	0f 92       	push	r0
    10d2:	f8 01       	movw	r30, r16
    10d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    10d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    10d8:	98 17       	cp	r25, r24
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <xQueueGenericSend+0x46>
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	bf 12       	cpse	r11, r31
    10e0:	15 c0       	rjmp	.+42     	; 0x110c <xQueueGenericSend+0x70>
    10e2:	4b 2d       	mov	r20, r11
    10e4:	b6 01       	movw	r22, r12
    10e6:	c8 01       	movw	r24, r16
    10e8:	de de       	rcall	.-580    	; 0xea6 <prvCopyDataToQueue>
    10ea:	f8 01       	movw	r30, r16
    10ec:	91 89       	ldd	r25, Z+17	; 0x11
    10ee:	99 23       	and	r25, r25
    10f0:	39 f0       	breq	.+14     	; 0x1100 <xQueueGenericSend+0x64>
    10f2:	c8 01       	movw	r24, r16
    10f4:	41 96       	adiw	r24, 0x11	; 17
    10f6:	33 d4       	rcall	.+2150   	; 0x195e <xTaskRemoveFromEventList>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	21 f4       	brne	.+8      	; 0x1104 <xQueueGenericSend+0x68>
    10fc:	10 de       	rcall	.-992    	; 0xd1e <vPortYield>
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <xQueueGenericSend+0x68>
    1100:	81 11       	cpse	r24, r1
    1102:	fc cf       	rjmp	.-8      	; 0x10fc <xQueueGenericSend+0x60>
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	46 c0       	rjmp	.+140    	; 0x1198 <xQueueGenericSend+0xfc>
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	89 2b       	or	r24, r25
    1112:	19 f4       	brne	.+6      	; 0x111a <xQueueGenericSend+0x7e>
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	3e c0       	rjmp	.+124    	; 0x1196 <xQueueGenericSend+0xfa>
    111a:	21 11       	cpse	r18, r1
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <xQueueGenericSend+0x88>
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	5d d4       	rcall	.+2234   	; 0x19de <vTaskSetTimeOutState>
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	42 d2       	rcall	.+1156   	; 0x15ae <vTaskSuspendAll>
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	0f 92       	push	r0
    1130:	f8 01       	movw	r30, r16
    1132:	85 8d       	ldd	r24, Z+29	; 0x1d
    1134:	8f 3f       	cpi	r24, 0xFF	; 255
    1136:	09 f4       	brne	.+2      	; 0x113a <xQueueGenericSend+0x9e>
    1138:	15 8e       	std	Z+29, r1	; 0x1d
    113a:	f8 01       	movw	r30, r16
    113c:	86 8d       	ldd	r24, Z+30	; 0x1e
    113e:	8f 3f       	cpi	r24, 0xFF	; 255
    1140:	09 f4       	brne	.+2      	; 0x1144 <xQueueGenericSend+0xa8>
    1142:	16 8e       	std	Z+30, r1	; 0x1e
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	be 01       	movw	r22, r28
    114a:	6c 5f       	subi	r22, 0xFC	; 252
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	50 d4       	rcall	.+2208   	; 0x19f4 <xTaskCheckForTimeOut>
    1154:	81 11       	cpse	r24, r1
    1156:	1c c0       	rjmp	.+56     	; 0x1190 <xQueueGenericSend+0xf4>
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	0f 92       	push	r0
    115e:	f8 01       	movw	r30, r16
    1160:	92 8d       	ldd	r25, Z+26	; 0x1a
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	f8 01       	movw	r30, r16
    1168:	83 8d       	ldd	r24, Z+27	; 0x1b
    116a:	98 13       	cpse	r25, r24
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <xQueueGenericSend+0xec>
    116e:	6c 81       	ldd	r22, Y+4	; 0x04
    1170:	7d 81       	ldd	r23, Y+5	; 0x05
    1172:	c7 01       	movw	r24, r14
    1174:	c9 d3       	rcall	.+1938   	; 0x1908 <vTaskPlaceOnEventList>
    1176:	c8 01       	movw	r24, r16
    1178:	fa de       	rcall	.-524    	; 0xf6e <prvUnlockQueue>
    117a:	cb d2       	rcall	.+1430   	; 0x1712 <xTaskResumeAll>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <xQueueGenericSend+0xe8>
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	a4 cf       	rjmp	.-184    	; 0x10cc <xQueueGenericSend+0x30>
    1184:	cc dd       	rcall	.-1128   	; 0xd1e <vPortYield>
    1186:	fc cf       	rjmp	.-8      	; 0x1180 <xQueueGenericSend+0xe4>
    1188:	c8 01       	movw	r24, r16
    118a:	f1 de       	rcall	.-542    	; 0xf6e <prvUnlockQueue>
    118c:	c2 d2       	rcall	.+1412   	; 0x1712 <xTaskResumeAll>
    118e:	f8 cf       	rjmp	.-16     	; 0x1180 <xQueueGenericSend+0xe4>
    1190:	c8 01       	movw	r24, r16
    1192:	ed de       	rcall	.-550    	; 0xf6e <prvUnlockQueue>
    1194:	be d2       	rcall	.+1404   	; 0x1712 <xTaskResumeAll>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	08 95       	ret

000011b6 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <xQueueGenericReceive+0x14>
    11ca:	1f 92       	push	r1
    11cc:	1f 92       	push	r1
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	8c 01       	movw	r16, r24
    11d4:	6b 01       	movw	r12, r22
    11d6:	5d 83       	std	Y+5, r21	; 0x05
    11d8:	4c 83       	std	Y+4, r20	; 0x04
    11da:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    11dc:	30 e0       	ldi	r19, 0x00	; 0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    11de:	7c 01       	movw	r14, r24
    11e0:	81 e1       	ldi	r24, 0x11	; 17
    11e2:	e8 0e       	add	r14, r24
    11e4:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    11ec:	f8 01       	movw	r30, r16
    11ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    11f0:	88 23       	and	r24, r24
    11f2:	19 f1       	breq	.+70     	; 0x123a <xQueueGenericReceive+0x84>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    11f4:	e6 80       	ldd	r14, Z+6	; 0x06
    11f6:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    11f8:	b6 01       	movw	r22, r12
    11fa:	c8 01       	movw	r24, r16
    11fc:	9e de       	rcall	.-708    	; 0xf3a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    11fe:	f8 01       	movw	r30, r16
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    1200:	b1 10       	cpse	r11, r1
    1202:	0d c0       	rjmp	.+26     	; 0x121e <xQueueGenericReceive+0x68>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1204:	82 8d       	ldd	r24, Z+26	; 0x1a
    1206:	81 50       	subi	r24, 0x01	; 1
    1208:	82 8f       	std	Z+26, r24	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    120a:	80 85       	ldd	r24, Z+8	; 0x08
    120c:	88 23       	and	r24, r24
    120e:	89 f0       	breq	.+34     	; 0x1232 <xQueueGenericReceive+0x7c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1210:	c8 01       	movw	r24, r16
    1212:	08 96       	adiw	r24, 0x08	; 8
    1214:	a4 d3       	rcall	.+1864   	; 0x195e <xTaskRemoveFromEventList>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	61 f4       	brne	.+24     	; 0x1232 <xQueueGenericReceive+0x7c>
						{
							queueYIELD_IF_USING_PREEMPTION();
    121a:	81 dd       	rcall	.-1278   	; 0xd1e <vPortYield>
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    121e:	f7 82       	std	Z+7, r15	; 0x07
    1220:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1222:	81 89       	ldd	r24, Z+17	; 0x11
    1224:	88 23       	and	r24, r24
    1226:	29 f0       	breq	.+10     	; 0x1232 <xQueueGenericReceive+0x7c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1228:	c8 01       	movw	r24, r16
    122a:	41 96       	adiw	r24, 0x11	; 17
    122c:	98 d3       	rcall	.+1840   	; 0x195e <xTaskRemoveFromEventList>
    122e:	81 11       	cpse	r24, r1
    1230:	f4 cf       	rjmp	.-24     	; 0x121a <xQueueGenericReceive+0x64>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	44 c0       	rjmp	.+136    	; 0x12c2 <xQueueGenericReceive+0x10c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	89 2b       	or	r24, r25
    1240:	19 f4       	brne	.+6      	; 0x1248 <xQueueGenericReceive+0x92>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	3c c0       	rjmp	.+120    	; 0x12c0 <xQueueGenericReceive+0x10a>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1248:	31 11       	cpse	r19, r1
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    124c:	ce 01       	movw	r24, r28
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	c6 d3       	rcall	.+1932   	; 0x19de <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1256:	ab d1       	rcall	.+854    	; 0x15ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
    125e:	f8 01       	movw	r30, r16
    1260:	85 8d       	ldd	r24, Z+29	; 0x1d
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	09 f4       	brne	.+2      	; 0x1268 <xQueueGenericReceive+0xb2>
    1266:	15 8e       	std	Z+29, r1	; 0x1d
    1268:	f8 01       	movw	r30, r16
    126a:	86 8d       	ldd	r24, Z+30	; 0x1e
    126c:	8f 3f       	cpi	r24, 0xFF	; 255
    126e:	09 f4       	brne	.+2      	; 0x1272 <xQueueGenericReceive+0xbc>
    1270:	16 8e       	std	Z+30, r1	; 0x1e
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1276:	be 01       	movw	r22, r28
    1278:	6c 5f       	subi	r22, 0xFC	; 252
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	b9 d3       	rcall	.+1906   	; 0x19f4 <xTaskCheckForTimeOut>
    1282:	81 11       	cpse	r24, r1
    1284:	1a c0       	rjmp	.+52     	; 0x12ba <xQueueGenericReceive+0x104>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    128c:	f8 01       	movw	r30, r16
    128e:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1294:	81 11       	cpse	r24, r1
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <xQueueGenericReceive+0xfc>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1298:	6c 81       	ldd	r22, Y+4	; 0x04
    129a:	7d 81       	ldd	r23, Y+5	; 0x05
    129c:	c7 01       	movw	r24, r14
    129e:	34 d3       	rcall	.+1640   	; 0x1908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    12a0:	c8 01       	movw	r24, r16
    12a2:	65 de       	rcall	.-822    	; 0xf6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    12a4:	36 d2       	rcall	.+1132   	; 0x1712 <xTaskResumeAll>
    12a6:	88 23       	and	r24, r24
    12a8:	11 f0       	breq	.+4      	; 0x12ae <xQueueGenericReceive+0xf8>
    12aa:	31 e0       	ldi	r19, 0x01	; 1
    12ac:	9c cf       	rjmp	.-200    	; 0x11e6 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    12ae:	37 dd       	rcall	.-1426   	; 0xd1e <vPortYield>
    12b0:	fc cf       	rjmp	.-8      	; 0x12aa <xQueueGenericReceive+0xf4>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    12b2:	c8 01       	movw	r24, r16
    12b4:	5c de       	rcall	.-840    	; 0xf6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    12b6:	2d d2       	rcall	.+1114   	; 0x1712 <xTaskResumeAll>
    12b8:	f8 cf       	rjmp	.-16     	; 0x12aa <xQueueGenericReceive+0xf4>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    12ba:	c8 01       	movw	r24, r16
    12bc:	58 de       	rcall	.-848    	; 0xf6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    12be:	29 d2       	rcall	.+1106   	; 0x1712 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	08 95       	ret

000012e0 <prvResetNextTaskUnblockTime>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    12e0:	e0 91 11 17 	lds	r30, 0x1711
    12e4:	f0 91 12 17 	lds	r31, 0x1712
    12e8:	80 81       	ld	r24, Z
    12ea:	81 11       	cpse	r24, r1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <prvResetNextTaskUnblockTime+0x14>
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	0c c0       	rjmp	.+24     	; 0x130c <prvResetNextTaskUnblockTime+0x2c>
    12f4:	e0 91 11 17 	lds	r30, 0x1711
    12f8:	f0 91 12 17 	lds	r31, 0x1712
    12fc:	05 80       	ldd	r0, Z+5	; 0x05
    12fe:	f6 81       	ldd	r31, Z+6	; 0x06
    1300:	e0 2d       	mov	r30, r0
    1302:	06 80       	ldd	r0, Z+6	; 0x06
    1304:	f7 81       	ldd	r31, Z+7	; 0x07
    1306:	e0 2d       	mov	r30, r0
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	90 93 09 02 	sts	0x0209, r25
    1310:	80 93 08 02 	sts	0x0208, r24
    1314:	08 95       	ret

00001316 <prvAddCurrentTaskToDelayedList>:
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	e0 91 49 17 	lds	r30, 0x1749
    1320:	f0 91 4a 17 	lds	r31, 0x174A
    1324:	93 83       	std	Z+3, r25	; 0x03
    1326:	82 83       	std	Z+2, r24	; 0x02
    1328:	80 91 f0 16 	lds	r24, 0x16F0
    132c:	90 91 f1 16 	lds	r25, 0x16F1
    1330:	60 91 49 17 	lds	r22, 0x1749
    1334:	70 91 4a 17 	lds	r23, 0x174A
    1338:	c8 17       	cp	r28, r24
    133a:	d9 07       	cpc	r29, r25
    133c:	48 f4       	brcc	.+18     	; 0x1350 <prvAddCurrentTaskToDelayedList+0x3a>
    133e:	80 91 0f 17 	lds	r24, 0x170F
    1342:	90 91 10 17 	lds	r25, 0x1710
    1346:	6e 5f       	subi	r22, 0xFE	; 254
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	83 ca       	rjmp	.-2810   	; 0x856 <vListInsert>
    1350:	80 91 11 17 	lds	r24, 0x1711
    1354:	90 91 12 17 	lds	r25, 0x1712
    1358:	6e 5f       	subi	r22, 0xFE	; 254
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	7c da       	rcall	.-2824   	; 0x856 <vListInsert>
    135e:	80 91 08 02 	lds	r24, 0x0208
    1362:	90 91 09 02 	lds	r25, 0x0209
    1366:	c8 17       	cp	r28, r24
    1368:	d9 07       	cpc	r29, r25
    136a:	20 f4       	brcc	.+8      	; 0x1374 <prvAddCurrentTaskToDelayedList+0x5e>
    136c:	d0 93 09 02 	sts	0x0209, r29
    1370:	c0 93 08 02 	sts	0x0208, r28
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <xTaskGenericCreate>:
    137a:	5f 92       	push	r5
    137c:	6f 92       	push	r6
    137e:	7f 92       	push	r7
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	4c 01       	movw	r8, r24
    139a:	16 2f       	mov	r17, r22
    139c:	57 2e       	mov	r5, r23
    139e:	5a 01       	movw	r10, r20
    13a0:	39 01       	movw	r6, r18
    13a2:	81 e2       	ldi	r24, 0x21	; 33
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	7d d8       	rcall	.-3846   	; 0x4a2 <pvPortMalloc>
    13a8:	ec 01       	movw	r28, r24
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <xTaskGenericCreate+0x36>
    13ae:	be c0       	rjmp	.+380    	; 0x152c <xTaskGenericCreate+0x1b2>
    13b0:	c1 14       	cp	r12, r1
    13b2:	d1 04       	cpc	r13, r1
    13b4:	19 f4       	brne	.+6      	; 0x13bc <xTaskGenericCreate+0x42>
    13b6:	c5 01       	movw	r24, r10
    13b8:	74 d8       	rcall	.-3864   	; 0x4a2 <pvPortMalloc>
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <xTaskGenericCreate+0x44>
    13bc:	c6 01       	movw	r24, r12
    13be:	98 8f       	std	Y+24, r25	; 0x18
    13c0:	8f 8b       	std	Y+23, r24	; 0x17
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	19 f4       	brne	.+6      	; 0x13cc <xTaskGenericCreate+0x52>
    13c6:	ce 01       	movw	r24, r28
    13c8:	9e d8       	rcall	.-3780   	; 0x506 <vPortFree>
    13ca:	b0 c0       	rjmp	.+352    	; 0x152c <xTaskGenericCreate+0x1b2>
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	a2 1a       	sub	r10, r18
    13d0:	b1 08       	sbc	r11, r1
    13d2:	a8 0e       	add	r10, r24
    13d4:	b9 1e       	adc	r11, r25
    13d6:	e1 2f       	mov	r30, r17
    13d8:	f5 2d       	mov	r31, r5
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	bf 01       	movw	r22, r30
    13e0:	41 91       	ld	r20, Z+
    13e2:	9e 01       	movw	r18, r28
    13e4:	28 0f       	add	r18, r24
    13e6:	39 1f       	adc	r19, r25
    13e8:	d9 01       	movw	r26, r18
    13ea:	59 96       	adiw	r26, 0x19	; 25
    13ec:	4c 93       	st	X, r20
    13ee:	db 01       	movw	r26, r22
    13f0:	2c 91       	ld	r18, X
    13f2:	22 23       	and	r18, r18
    13f4:	21 f0       	breq	.+8      	; 0x13fe <xTaskGenericCreate+0x84>
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	91 05       	cpc	r25, r1
    13fc:	81 f7       	brne	.-32     	; 0x13de <xTaskGenericCreate+0x64>
    13fe:	18 a2       	std	Y+32, r1	; 0x20
    1400:	10 2f       	mov	r17, r16
    1402:	04 30       	cpi	r16, 0x04	; 4
    1404:	08 f0       	brcs	.+2      	; 0x1408 <xTaskGenericCreate+0x8e>
    1406:	13 e0       	ldi	r17, 0x03	; 3
    1408:	1e 8b       	std	Y+22, r17	; 0x16
    140a:	6e 01       	movw	r12, r28
    140c:	b2 e0       	ldi	r27, 0x02	; 2
    140e:	cb 0e       	add	r12, r27
    1410:	d1 1c       	adc	r13, r1
    1412:	c6 01       	movw	r24, r12
    1414:	fb d9       	rcall	.-3082   	; 0x80c <vListInitialiseItem>
    1416:	ce 01       	movw	r24, r28
    1418:	0c 96       	adiw	r24, 0x0c	; 12
    141a:	f8 d9       	rcall	.-3088   	; 0x80c <vListInitialiseItem>
    141c:	d9 87       	std	Y+9, r29	; 0x09
    141e:	c8 87       	std	Y+8, r28	; 0x08
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	81 1b       	sub	r24, r17
    1426:	91 09       	sbc	r25, r1
    1428:	9d 87       	std	Y+13, r25	; 0x0d
    142a:	8c 87       	std	Y+12, r24	; 0x0c
    142c:	db 8b       	std	Y+19, r29	; 0x13
    142e:	ca 8b       	std	Y+18, r28	; 0x12
    1430:	a3 01       	movw	r20, r6
    1432:	b4 01       	movw	r22, r8
    1434:	c5 01       	movw	r24, r10
    1436:	c3 db       	rcall	.-2170   	; 0xbbe <pxPortInitialiseStack>
    1438:	99 83       	std	Y+1, r25	; 0x01
    143a:	88 83       	st	Y, r24
    143c:	e1 14       	cp	r14, r1
    143e:	f1 04       	cpc	r15, r1
    1440:	19 f0       	breq	.+6      	; 0x1448 <xTaskGenericCreate+0xce>
    1442:	f7 01       	movw	r30, r14
    1444:	d1 83       	std	Z+1, r29	; 0x01
    1446:	c0 83       	st	Z, r28
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	0f 92       	push	r0
    144e:	80 91 f2 16 	lds	r24, 0x16F2
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 93 f2 16 	sts	0x16F2, r24
    1458:	80 91 49 17 	lds	r24, 0x1749
    145c:	90 91 4a 17 	lds	r25, 0x174A
    1460:	89 2b       	or	r24, r25
    1462:	89 f5       	brne	.+98     	; 0x14c6 <xTaskGenericCreate+0x14c>
    1464:	d0 93 4a 17 	sts	0x174A, r29
    1468:	c0 93 49 17 	sts	0x1749, r28
    146c:	80 91 f2 16 	lds	r24, 0x16F2
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <xTaskGenericCreate+0xfc>
    1474:	37 c0       	rjmp	.+110    	; 0x14e4 <xTaskGenericCreate+0x16a>
    1476:	85 e2       	ldi	r24, 0x25	; 37
    1478:	97 e1       	ldi	r25, 0x17	; 23
    147a:	ba d9       	rcall	.-3212   	; 0x7f0 <vListInitialise>
    147c:	8e e2       	ldi	r24, 0x2E	; 46
    147e:	97 e1       	ldi	r25, 0x17	; 23
    1480:	b7 d9       	rcall	.-3218   	; 0x7f0 <vListInitialise>
    1482:	87 e3       	ldi	r24, 0x37	; 55
    1484:	97 e1       	ldi	r25, 0x17	; 23
    1486:	b4 d9       	rcall	.-3224   	; 0x7f0 <vListInitialise>
    1488:	80 e4       	ldi	r24, 0x40	; 64
    148a:	97 e1       	ldi	r25, 0x17	; 23
    148c:	b1 d9       	rcall	.-3230   	; 0x7f0 <vListInitialise>
    148e:	8c e1       	ldi	r24, 0x1C	; 28
    1490:	97 e1       	ldi	r25, 0x17	; 23
    1492:	ae d9       	rcall	.-3236   	; 0x7f0 <vListInitialise>
    1494:	83 e1       	ldi	r24, 0x13	; 19
    1496:	97 e1       	ldi	r25, 0x17	; 23
    1498:	ab d9       	rcall	.-3242   	; 0x7f0 <vListInitialise>
    149a:	86 e0       	ldi	r24, 0x06	; 6
    149c:	97 e1       	ldi	r25, 0x17	; 23
    149e:	a8 d9       	rcall	.-3248   	; 0x7f0 <vListInitialise>
    14a0:	8d ef       	ldi	r24, 0xFD	; 253
    14a2:	96 e1       	ldi	r25, 0x16	; 22
    14a4:	a5 d9       	rcall	.-3254   	; 0x7f0 <vListInitialise>
    14a6:	83 ef       	ldi	r24, 0xF3	; 243
    14a8:	96 e1       	ldi	r25, 0x16	; 22
    14aa:	a2 d9       	rcall	.-3260   	; 0x7f0 <vListInitialise>
    14ac:	8c e1       	ldi	r24, 0x1C	; 28
    14ae:	97 e1       	ldi	r25, 0x17	; 23
    14b0:	90 93 12 17 	sts	0x1712, r25
    14b4:	80 93 11 17 	sts	0x1711, r24
    14b8:	83 e1       	ldi	r24, 0x13	; 19
    14ba:	97 e1       	ldi	r25, 0x17	; 23
    14bc:	90 93 10 17 	sts	0x1710, r25
    14c0:	80 93 0f 17 	sts	0x170F, r24
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <xTaskGenericCreate+0x16a>
    14c6:	80 91 ee 16 	lds	r24, 0x16EE
    14ca:	81 11       	cpse	r24, r1
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <xTaskGenericCreate+0x16a>
    14ce:	e0 91 49 17 	lds	r30, 0x1749
    14d2:	f0 91 4a 17 	lds	r31, 0x174A
    14d6:	86 89       	ldd	r24, Z+22	; 0x16
    14d8:	08 17       	cp	r16, r24
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <xTaskGenericCreate+0x16a>
    14dc:	d0 93 4a 17 	sts	0x174A, r29
    14e0:	c0 93 49 17 	sts	0x1749, r28
    14e4:	80 91 ea 16 	lds	r24, 0x16EA
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 ea 16 	sts	0x16EA, r24
    14ee:	8e 89       	ldd	r24, Y+22	; 0x16
    14f0:	90 91 ef 16 	lds	r25, 0x16EF
    14f4:	98 17       	cp	r25, r24
    14f6:	10 f4       	brcc	.+4      	; 0x14fc <xTaskGenericCreate+0x182>
    14f8:	80 93 ef 16 	sts	0x16EF, r24
    14fc:	f9 e0       	ldi	r31, 0x09	; 9
    14fe:	8f 9f       	mul	r24, r31
    1500:	c0 01       	movw	r24, r0
    1502:	11 24       	eor	r1, r1
    1504:	b6 01       	movw	r22, r12
    1506:	8b 5d       	subi	r24, 0xDB	; 219
    1508:	98 4e       	sbci	r25, 0xE8	; 232
    150a:	84 d9       	rcall	.-3320   	; 0x814 <vListInsertEnd>
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	80 91 ee 16 	lds	r24, 0x16EE
    1514:	88 23       	and	r24, r24
    1516:	41 f0       	breq	.+16     	; 0x1528 <xTaskGenericCreate+0x1ae>
    1518:	e0 91 49 17 	lds	r30, 0x1749
    151c:	f0 91 4a 17 	lds	r31, 0x174A
    1520:	86 89       	ldd	r24, Z+22	; 0x16
    1522:	80 17       	cp	r24, r16
    1524:	08 f4       	brcc	.+2      	; 0x1528 <xTaskGenericCreate+0x1ae>
    1526:	fb db       	rcall	.-2058   	; 0xd1e <vPortYield>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	01 c0       	rjmp	.+2      	; 0x152e <xTaskGenericCreate+0x1b4>
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	08 95       	ret

0000154e <vTaskStartScheduler>:
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	a1 2c       	mov	r10, r1
    155e:	b1 2c       	mov	r11, r1
    1560:	c1 2c       	mov	r12, r1
    1562:	d1 2c       	mov	r13, r1
    1564:	e1 2c       	mov	r14, r1
    1566:	f1 2c       	mov	r15, r1
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	45 e5       	ldi	r20, 0x55	; 85
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	68 e8       	ldi	r22, 0x88	; 136
    1574:	72 e0       	ldi	r23, 0x02	; 2
    1576:	84 e1       	ldi	r24, 0x14	; 20
    1578:	9c e0       	ldi	r25, 0x0C	; 12
    157a:	ff de       	rcall	.-514    	; 0x137a <xTaskGenericCreate>
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	79 f4       	brne	.+30     	; 0x159e <vTaskStartScheduler+0x50>
    1580:	f8 94       	cli
    1582:	80 93 ee 16 	sts	0x16EE, r24
    1586:	10 92 f1 16 	sts	0x16F1, r1
    158a:	10 92 f0 16 	sts	0x16F0, r1
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	82 cb       	rjmp	.-2300   	; 0xca2 <xPortStartScheduler>
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	08 95       	ret

000015ae <vTaskSuspendAll>:
    15ae:	80 91 e9 16 	lds	r24, 0x16E9
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	80 93 e9 16 	sts	0x16E9, r24
    15b8:	08 95       	ret

000015ba <xTaskIncrementTick>:
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	80 91 e9 16 	lds	r24, 0x16E9
    15ce:	81 11       	cpse	r24, r1
    15d0:	8a c0       	rjmp	.+276    	; 0x16e6 <xTaskIncrementTick+0x12c>
    15d2:	80 91 f0 16 	lds	r24, 0x16F0
    15d6:	90 91 f1 16 	lds	r25, 0x16F1
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	90 93 f1 16 	sts	0x16F1, r25
    15e0:	80 93 f0 16 	sts	0x16F0, r24
    15e4:	00 91 f0 16 	lds	r16, 0x16F0
    15e8:	10 91 f1 16 	lds	r17, 0x16F1
    15ec:	01 15       	cp	r16, r1
    15ee:	11 05       	cpc	r17, r1
    15f0:	b1 f4       	brne	.+44     	; 0x161e <xTaskIncrementTick+0x64>
    15f2:	80 91 11 17 	lds	r24, 0x1711
    15f6:	90 91 12 17 	lds	r25, 0x1712
    15fa:	20 91 0f 17 	lds	r18, 0x170F
    15fe:	30 91 10 17 	lds	r19, 0x1710
    1602:	30 93 12 17 	sts	0x1712, r19
    1606:	20 93 11 17 	sts	0x1711, r18
    160a:	90 93 10 17 	sts	0x1710, r25
    160e:	80 93 0f 17 	sts	0x170F, r24
    1612:	80 91 eb 16 	lds	r24, 0x16EB
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	80 93 eb 16 	sts	0x16EB, r24
    161c:	61 de       	rcall	.-830    	; 0x12e0 <prvResetNextTaskUnblockTime>
    161e:	80 91 08 02 	lds	r24, 0x0208
    1622:	90 91 09 02 	lds	r25, 0x0209
    1626:	d1 2c       	mov	r13, r1
    1628:	08 17       	cp	r16, r24
    162a:	19 07       	cpc	r17, r25
    162c:	08 f4       	brcc	.+2      	; 0x1630 <xTaskIncrementTick+0x76>
    162e:	4a c0       	rjmp	.+148    	; 0x16c4 <xTaskIncrementTick+0x10a>
    1630:	89 e0       	ldi	r24, 0x09	; 9
    1632:	c8 2e       	mov	r12, r24
    1634:	e0 91 11 17 	lds	r30, 0x1711
    1638:	f0 91 12 17 	lds	r31, 0x1712
    163c:	80 81       	ld	r24, Z
    163e:	81 11       	cpse	r24, r1
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <xTaskIncrementTick+0x96>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	90 93 09 02 	sts	0x0209, r25
    164a:	80 93 08 02 	sts	0x0208, r24
    164e:	3a c0       	rjmp	.+116    	; 0x16c4 <xTaskIncrementTick+0x10a>
    1650:	e0 91 11 17 	lds	r30, 0x1711
    1654:	f0 91 12 17 	lds	r31, 0x1712
    1658:	05 80       	ldd	r0, Z+5	; 0x05
    165a:	f6 81       	ldd	r31, Z+6	; 0x06
    165c:	e0 2d       	mov	r30, r0
    165e:	c6 81       	ldd	r28, Z+6	; 0x06
    1660:	d7 81       	ldd	r29, Z+7	; 0x07
    1662:	2a 81       	ldd	r18, Y+2	; 0x02
    1664:	3b 81       	ldd	r19, Y+3	; 0x03
    1666:	02 17       	cp	r16, r18
    1668:	13 07       	cpc	r17, r19
    166a:	28 f4       	brcc	.+10     	; 0x1676 <xTaskIncrementTick+0xbc>
    166c:	30 93 09 02 	sts	0x0209, r19
    1670:	20 93 08 02 	sts	0x0208, r18
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <xTaskIncrementTick+0x10a>
    1676:	7e 01       	movw	r14, r28
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	e8 0e       	add	r14, r24
    167c:	f1 1c       	adc	r15, r1
    167e:	c7 01       	movw	r24, r14
    1680:	22 d9       	rcall	.-3516   	; 0x8c6 <uxListRemove>
    1682:	2c 89       	ldd	r18, Y+20	; 0x14
    1684:	3d 89       	ldd	r19, Y+21	; 0x15
    1686:	23 2b       	or	r18, r19
    1688:	19 f0       	breq	.+6      	; 0x1690 <xTaskIncrementTick+0xd6>
    168a:	ce 01       	movw	r24, r28
    168c:	0c 96       	adiw	r24, 0x0c	; 12
    168e:	1b d9       	rcall	.-3530   	; 0x8c6 <uxListRemove>
    1690:	2e 89       	ldd	r18, Y+22	; 0x16
    1692:	80 91 ef 16 	lds	r24, 0x16EF
    1696:	82 17       	cp	r24, r18
    1698:	10 f4       	brcc	.+4      	; 0x169e <xTaskIncrementTick+0xe4>
    169a:	20 93 ef 16 	sts	0x16EF, r18
    169e:	c2 9e       	mul	r12, r18
    16a0:	c0 01       	movw	r24, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	b7 01       	movw	r22, r14
    16a6:	8b 5d       	subi	r24, 0xDB	; 219
    16a8:	98 4e       	sbci	r25, 0xE8	; 232
    16aa:	b4 d8       	rcall	.-3736   	; 0x814 <vListInsertEnd>
    16ac:	e0 91 49 17 	lds	r30, 0x1749
    16b0:	f0 91 4a 17 	lds	r31, 0x174A
    16b4:	9e 89       	ldd	r25, Y+22	; 0x16
    16b6:	86 89       	ldd	r24, Z+22	; 0x16
    16b8:	98 17       	cp	r25, r24
    16ba:	08 f4       	brcc	.+2      	; 0x16be <xTaskIncrementTick+0x104>
    16bc:	bb cf       	rjmp	.-138    	; 0x1634 <xTaskIncrementTick+0x7a>
    16be:	dd 24       	eor	r13, r13
    16c0:	d3 94       	inc	r13
    16c2:	b8 cf       	rjmp	.-144    	; 0x1634 <xTaskIncrementTick+0x7a>
    16c4:	e0 91 49 17 	lds	r30, 0x1749
    16c8:	f0 91 4a 17 	lds	r31, 0x174A
    16cc:	e6 89       	ldd	r30, Z+22	; 0x16
    16ce:	89 e0       	ldi	r24, 0x09	; 9
    16d0:	e8 9f       	mul	r30, r24
    16d2:	f0 01       	movw	r30, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	eb 5d       	subi	r30, 0xDB	; 219
    16d8:	f8 4e       	sbci	r31, 0xE8	; 232
    16da:	80 81       	ld	r24, Z
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	48 f0       	brcs	.+18     	; 0x16f2 <xTaskIncrementTick+0x138>
    16e0:	dd 24       	eor	r13, r13
    16e2:	d3 94       	inc	r13
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <xTaskIncrementTick+0x138>
    16e6:	80 91 ed 16 	lds	r24, 0x16ED
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
    16ec:	80 93 ed 16 	sts	0x16ED, r24
    16f0:	d1 2c       	mov	r13, r1
    16f2:	80 91 ec 16 	lds	r24, 0x16EC
    16f6:	88 23       	and	r24, r24
    16f8:	11 f0       	breq	.+4      	; 0x16fe <xTaskIncrementTick+0x144>
    16fa:	dd 24       	eor	r13, r13
    16fc:	d3 94       	inc	r13
    16fe:	8d 2d       	mov	r24, r13
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	08 95       	ret

00001712 <xTaskResumeAll>:
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	0f 92       	push	r0
    1724:	80 91 e9 16 	lds	r24, 0x16E9
    1728:	81 50       	subi	r24, 0x01	; 1
    172a:	80 93 e9 16 	sts	0x16E9, r24
    172e:	80 91 e9 16 	lds	r24, 0x16E9
    1732:	88 23       	and	r24, r24
    1734:	11 f0       	breq	.+4      	; 0x173a <xTaskResumeAll+0x28>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	4e c0       	rjmp	.+156    	; 0x17d6 <xTaskResumeAll+0xc4>
    173a:	80 91 f2 16 	lds	r24, 0x16F2
    173e:	88 23       	and	r24, r24
    1740:	d1 f3       	breq	.-12     	; 0x1736 <xTaskResumeAll+0x24>
    1742:	99 e0       	ldi	r25, 0x09	; 9
    1744:	f9 2e       	mov	r15, r25
    1746:	ee 24       	eor	r14, r14
    1748:	e3 94       	inc	r14
    174a:	80 91 06 17 	lds	r24, 0x1706
    174e:	88 23       	and	r24, r24
    1750:	39 f1       	breq	.+78     	; 0x17a0 <xTaskResumeAll+0x8e>
    1752:	e0 91 0b 17 	lds	r30, 0x170B
    1756:	f0 91 0c 17 	lds	r31, 0x170C
    175a:	c6 81       	ldd	r28, Z+6	; 0x06
    175c:	d7 81       	ldd	r29, Z+7	; 0x07
    175e:	ce 01       	movw	r24, r28
    1760:	0c 96       	adiw	r24, 0x0c	; 12
    1762:	b1 d8       	rcall	.-3742   	; 0x8c6 <uxListRemove>
    1764:	8e 01       	movw	r16, r28
    1766:	0e 5f       	subi	r16, 0xFE	; 254
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	c8 01       	movw	r24, r16
    176c:	ac d8       	rcall	.-3752   	; 0x8c6 <uxListRemove>
    176e:	8e 89       	ldd	r24, Y+22	; 0x16
    1770:	90 91 ef 16 	lds	r25, 0x16EF
    1774:	98 17       	cp	r25, r24
    1776:	10 f4       	brcc	.+4      	; 0x177c <xTaskResumeAll+0x6a>
    1778:	80 93 ef 16 	sts	0x16EF, r24
    177c:	f8 9e       	mul	r15, r24
    177e:	c0 01       	movw	r24, r0
    1780:	11 24       	eor	r1, r1
    1782:	b8 01       	movw	r22, r16
    1784:	8b 5d       	subi	r24, 0xDB	; 219
    1786:	98 4e       	sbci	r25, 0xE8	; 232
    1788:	45 d8       	rcall	.-3958   	; 0x814 <vListInsertEnd>
    178a:	e0 91 49 17 	lds	r30, 0x1749
    178e:	f0 91 4a 17 	lds	r31, 0x174A
    1792:	9e 89       	ldd	r25, Y+22	; 0x16
    1794:	86 89       	ldd	r24, Z+22	; 0x16
    1796:	98 17       	cp	r25, r24
    1798:	c0 f2       	brcs	.-80     	; 0x174a <xTaskResumeAll+0x38>
    179a:	e0 92 ec 16 	sts	0x16EC, r14
    179e:	d5 cf       	rjmp	.-86     	; 0x174a <xTaskResumeAll+0x38>
    17a0:	80 91 ed 16 	lds	r24, 0x16ED
    17a4:	81 11       	cpse	r24, r1
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <xTaskResumeAll+0xa6>
    17a8:	80 91 ec 16 	lds	r24, 0x16EC
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <xTaskResumeAll+0xa0>
    17b0:	c2 cf       	rjmp	.-124    	; 0x1736 <xTaskResumeAll+0x24>
    17b2:	b5 da       	rcall	.-2710   	; 0xd1e <vPortYield>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <xTaskResumeAll+0xc4>
    17b8:	c1 e0       	ldi	r28, 0x01	; 1
    17ba:	80 91 ed 16 	lds	r24, 0x16ED
    17be:	88 23       	and	r24, r24
    17c0:	99 f3       	breq	.-26     	; 0x17a8 <xTaskResumeAll+0x96>
    17c2:	fb de       	rcall	.-522    	; 0x15ba <xTaskIncrementTick>
    17c4:	81 11       	cpse	r24, r1
    17c6:	c0 93 ec 16 	sts	0x16EC, r28
    17ca:	80 91 ed 16 	lds	r24, 0x16ED
    17ce:	81 50       	subi	r24, 0x01	; 1
    17d0:	80 93 ed 16 	sts	0x16ED, r24
    17d4:	f2 cf       	rjmp	.-28     	; 0x17ba <xTaskResumeAll+0xa8>
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	08 95       	ret

000017e8 <vTaskDelay>:
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	8c 01       	movw	r16, r24
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	11 f4       	brne	.+4      	; 0x17fa <vTaskDelay+0x12>
    17f6:	93 da       	rcall	.-2778   	; 0xd1e <vPortYield>
    17f8:	12 c0       	rjmp	.+36     	; 0x181e <vTaskDelay+0x36>
    17fa:	d9 de       	rcall	.-590    	; 0x15ae <vTaskSuspendAll>
    17fc:	c0 91 f0 16 	lds	r28, 0x16F0
    1800:	d0 91 f1 16 	lds	r29, 0x16F1
    1804:	c0 0f       	add	r28, r16
    1806:	d1 1f       	adc	r29, r17
    1808:	80 91 49 17 	lds	r24, 0x1749
    180c:	90 91 4a 17 	lds	r25, 0x174A
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	59 d8       	rcall	.-3918   	; 0x8c6 <uxListRemove>
    1814:	ce 01       	movw	r24, r28
    1816:	7f dd       	rcall	.-1282   	; 0x1316 <prvAddCurrentTaskToDelayedList>
    1818:	7c df       	rcall	.-264    	; 0x1712 <xTaskResumeAll>
    181a:	88 23       	and	r24, r24
    181c:	61 f3       	breq	.-40     	; 0x17f6 <vTaskDelay+0xe>
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <prvIdleTask>:
    1828:	80 91 fc 16 	lds	r24, 0x16FC
    182c:	88 23       	and	r24, r24
    182e:	31 f1       	breq	.+76     	; 0x187c <prvIdleTask+0x54>
    1830:	be de       	rcall	.-644    	; 0x15ae <vTaskSuspendAll>
    1832:	c0 91 fd 16 	lds	r28, 0x16FD
    1836:	6d df       	rcall	.-294    	; 0x1712 <xTaskResumeAll>
    1838:	cc 23       	and	r28, r28
    183a:	b1 f3       	breq	.-20     	; 0x1828 <prvIdleTask>
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	0f 92       	push	r0
    1842:	e0 91 02 17 	lds	r30, 0x1702
    1846:	f0 91 03 17 	lds	r31, 0x1703
    184a:	c6 81       	ldd	r28, Z+6	; 0x06
    184c:	d7 81       	ldd	r29, Z+7	; 0x07
    184e:	ce 01       	movw	r24, r28
    1850:	02 96       	adiw	r24, 0x02	; 2
    1852:	39 d8       	rcall	.-3982   	; 0x8c6 <uxListRemove>
    1854:	80 91 f2 16 	lds	r24, 0x16F2
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	80 93 f2 16 	sts	0x16F2, r24
    185e:	80 91 fc 16 	lds	r24, 0x16FC
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	80 93 fc 16 	sts	0x16FC, r24
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	8f 89       	ldd	r24, Y+23	; 0x17
    186e:	98 8d       	ldd	r25, Y+24	; 0x18
    1870:	0e 94 83 02 	call	0x506	; 0x506 <vPortFree>
    1874:	ce 01       	movw	r24, r28
    1876:	0e 94 83 02 	call	0x506	; 0x506 <vPortFree>
    187a:	d6 cf       	rjmp	.-84     	; 0x1828 <prvIdleTask>
    187c:	80 91 25 17 	lds	r24, 0x1725
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	90 f2       	brcs	.-92     	; 0x1828 <prvIdleTask>
    1884:	4c da       	rcall	.-2920   	; 0xd1e <vPortYield>
    1886:	d0 cf       	rjmp	.-96     	; 0x1828 <prvIdleTask>

00001888 <vTaskSwitchContext>:
    1888:	80 91 e9 16 	lds	r24, 0x16E9
    188c:	88 23       	and	r24, r24
    188e:	21 f0       	breq	.+8      	; 0x1898 <vTaskSwitchContext+0x10>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 ec 16 	sts	0x16EC, r24
    1896:	08 95       	ret
    1898:	10 92 ec 16 	sts	0x16EC, r1
    189c:	99 e0       	ldi	r25, 0x09	; 9
    189e:	e0 91 ef 16 	lds	r30, 0x16EF
    18a2:	9e 9f       	mul	r25, r30
    18a4:	f0 01       	movw	r30, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	eb 5d       	subi	r30, 0xDB	; 219
    18aa:	f8 4e       	sbci	r31, 0xE8	; 232
    18ac:	80 81       	ld	r24, Z
    18ae:	81 11       	cpse	r24, r1
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vTaskSwitchContext+0x36>
    18b2:	80 91 ef 16 	lds	r24, 0x16EF
    18b6:	81 50       	subi	r24, 0x01	; 1
    18b8:	80 93 ef 16 	sts	0x16EF, r24
    18bc:	f0 cf       	rjmp	.-32     	; 0x189e <vTaskSwitchContext+0x16>
    18be:	e0 91 ef 16 	lds	r30, 0x16EF
    18c2:	89 e0       	ldi	r24, 0x09	; 9
    18c4:	e8 9f       	mul	r30, r24
    18c6:	f0 01       	movw	r30, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	eb 5d       	subi	r30, 0xDB	; 219
    18cc:	f8 4e       	sbci	r31, 0xE8	; 232
    18ce:	a1 81       	ldd	r26, Z+1	; 0x01
    18d0:	b2 81       	ldd	r27, Z+2	; 0x02
    18d2:	12 96       	adiw	r26, 0x02	; 2
    18d4:	0d 90       	ld	r0, X+
    18d6:	bc 91       	ld	r27, X
    18d8:	a0 2d       	mov	r26, r0
    18da:	b2 83       	std	Z+2, r27	; 0x02
    18dc:	a1 83       	std	Z+1, r26	; 0x01
    18de:	cf 01       	movw	r24, r30
    18e0:	03 96       	adiw	r24, 0x03	; 3
    18e2:	a8 17       	cp	r26, r24
    18e4:	b9 07       	cpc	r27, r25
    18e6:	31 f4       	brne	.+12     	; 0x18f4 <vTaskSwitchContext+0x6c>
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	8d 91       	ld	r24, X+
    18ec:	9c 91       	ld	r25, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
    18f0:	92 83       	std	Z+2, r25	; 0x02
    18f2:	81 83       	std	Z+1, r24	; 0x01
    18f4:	01 80       	ldd	r0, Z+1	; 0x01
    18f6:	f2 81       	ldd	r31, Z+2	; 0x02
    18f8:	e0 2d       	mov	r30, r0
    18fa:	86 81       	ldd	r24, Z+6	; 0x06
    18fc:	97 81       	ldd	r25, Z+7	; 0x07
    18fe:	90 93 4a 17 	sts	0x174A, r25
    1902:	80 93 49 17 	sts	0x1749, r24
    1906:	08 95       	ret

00001908 <vTaskPlaceOnEventList>:
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	eb 01       	movw	r28, r22
    190e:	60 91 49 17 	lds	r22, 0x1749
    1912:	70 91 4a 17 	lds	r23, 0x174A
    1916:	64 5f       	subi	r22, 0xF4	; 244
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	0e 94 2b 04 	call	0x856	; 0x856 <vListInsert>
    191e:	80 91 49 17 	lds	r24, 0x1749
    1922:	90 91 4a 17 	lds	r25, 0x174A
    1926:	02 96       	adiw	r24, 0x02	; 2
    1928:	0e 94 63 04 	call	0x8c6	; 0x8c6 <uxListRemove>
    192c:	cf 3f       	cpi	r28, 0xFF	; 255
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	d8 07       	cpc	r29, r24
    1932:	61 f4       	brne	.+24     	; 0x194c <vTaskPlaceOnEventList+0x44>
    1934:	60 91 49 17 	lds	r22, 0x1749
    1938:	70 91 4a 17 	lds	r23, 0x174A
    193c:	6e 5f       	subi	r22, 0xFE	; 254
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	83 ef       	ldi	r24, 0xF3	; 243
    1942:	96 e1       	ldi	r25, 0x16	; 22
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	0c 94 0a 04 	jmp	0x814	; 0x814 <vListInsertEnd>
    194c:	80 91 f0 16 	lds	r24, 0x16F0
    1950:	90 91 f1 16 	lds	r25, 0x16F1
    1954:	8c 0f       	add	r24, r28
    1956:	9d 1f       	adc	r25, r29
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	dc cc       	rjmp	.-1608   	; 0x1316 <prvAddCurrentTaskToDelayedList>

0000195e <xTaskRemoveFromEventList>:
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	dc 01       	movw	r26, r24
    1968:	15 96       	adiw	r26, 0x05	; 5
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	16 97       	sbiw	r26, 0x06	; 6
    1970:	c6 81       	ldd	r28, Z+6	; 0x06
    1972:	d7 81       	ldd	r29, Z+7	; 0x07
    1974:	8e 01       	movw	r16, r28
    1976:	04 5f       	subi	r16, 0xF4	; 244
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	c8 01       	movw	r24, r16
    197c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <uxListRemove>
    1980:	80 91 e9 16 	lds	r24, 0x16E9
    1984:	81 11       	cpse	r24, r1
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <xTaskRemoveFromEventList+0x52>
    1988:	0a 50       	subi	r16, 0x0A	; 10
    198a:	11 09       	sbc	r17, r1
    198c:	c8 01       	movw	r24, r16
    198e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <uxListRemove>
    1992:	8e 89       	ldd	r24, Y+22	; 0x16
    1994:	90 91 ef 16 	lds	r25, 0x16EF
    1998:	98 17       	cp	r25, r24
    199a:	10 f4       	brcc	.+4      	; 0x19a0 <xTaskRemoveFromEventList+0x42>
    199c:	80 93 ef 16 	sts	0x16EF, r24
    19a0:	b9 e0       	ldi	r27, 0x09	; 9
    19a2:	8b 9f       	mul	r24, r27
    19a4:	c0 01       	movw	r24, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	b8 01       	movw	r22, r16
    19aa:	8b 5d       	subi	r24, 0xDB	; 219
    19ac:	98 4e       	sbci	r25, 0xE8	; 232
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <xTaskRemoveFromEventList+0x58>
    19b0:	b8 01       	movw	r22, r16
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	97 e1       	ldi	r25, 0x17	; 23
    19b6:	0e 94 0a 04 	call	0x814	; 0x814 <vListInsertEnd>
    19ba:	e0 91 49 17 	lds	r30, 0x1749
    19be:	f0 91 4a 17 	lds	r31, 0x174A
    19c2:	9e 89       	ldd	r25, Y+22	; 0x16
    19c4:	86 89       	ldd	r24, Z+22	; 0x16
    19c6:	89 17       	cp	r24, r25
    19c8:	20 f4       	brcc	.+8      	; 0x19d2 <xTaskRemoveFromEventList+0x74>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	80 93 ec 16 	sts	0x16EC, r24
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <xTaskRemoveFromEventList+0x76>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	08 95       	ret

000019de <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    19de:	20 91 eb 16 	lds	r18, 0x16EB
    19e2:	fc 01       	movw	r30, r24
    19e4:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    19e6:	20 91 f0 16 	lds	r18, 0x16F0
    19ea:	30 91 f1 16 	lds	r19, 0x16F1
    19ee:	32 83       	std	Z+2, r19	; 0x02
    19f0:	21 83       	std	Z+1, r18	; 0x01
    19f2:	08 95       	ret

000019f4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    19fe:	e0 91 f0 16 	lds	r30, 0x16F0
    1a02:	f0 91 f1 16 	lds	r31, 0x16F1

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1a06:	db 01       	movw	r26, r22
    1a08:	4d 91       	ld	r20, X+
    1a0a:	5c 91       	ld	r21, X
    1a0c:	4f 3f       	cpi	r20, 0xFF	; 255
    1a0e:	bf ef       	ldi	r27, 0xFF	; 255
    1a10:	5b 07       	cpc	r21, r27
    1a12:	c9 f0       	breq	.+50     	; 0x1a46 <xTaskCheckForTimeOut+0x52>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1a14:	b0 91 eb 16 	lds	r27, 0x16EB
    1a18:	ec 01       	movw	r28, r24
    1a1a:	a8 81       	ld	r26, Y
    1a1c:	29 81       	ldd	r18, Y+1	; 0x01
    1a1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a20:	ba 17       	cp	r27, r26
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <xTaskCheckForTimeOut+0x36>
    1a24:	e2 17       	cp	r30, r18
    1a26:	f3 07       	cpc	r31, r19
    1a28:	80 f4       	brcc	.+32     	; 0x1a4a <xTaskCheckForTimeOut+0x56>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1a2a:	df 01       	movw	r26, r30
    1a2c:	a2 1b       	sub	r26, r18
    1a2e:	b3 0b       	sbc	r27, r19
    1a30:	a4 17       	cp	r26, r20
    1a32:	b5 07       	cpc	r27, r21
    1a34:	50 f4       	brcc	.+20     	; 0x1a4a <xTaskCheckForTimeOut+0x56>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1a36:	2e 1b       	sub	r18, r30
    1a38:	3f 0b       	sbc	r19, r31
    1a3a:	24 0f       	add	r18, r20
    1a3c:	35 1f       	adc	r19, r21
    1a3e:	fb 01       	movw	r30, r22
    1a40:	31 83       	std	Z+1, r19	; 0x01
    1a42:	20 83       	st	Z, r18
			vTaskSetTimeOutState( pxTimeOut );
    1a44:	cc df       	rcall	.-104    	; 0x19de <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 93 ec 16 	sts	0x16EC, r24
    1a5c:	08 95       	ret

00001a5e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1a5e:	10 92 b8 17 	sts	0x17B8, r1
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 b6 17 	sts	0x17B6, r24
    1a68:	10 92 b5 17 	sts	0x17B5, r1
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	84 e1       	ldi	r24, 0x14	; 20
    1a70:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <digitalWrite>
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	85 e1       	ldi	r24, 0x15	; 21
    1a78:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <digitalWrite>
    1a7c:	e9 eb       	ldi	r30, 0xB9	; 185
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	80 83       	st	Z, r24
    1a86:	80 81       	ld	r24, Z
    1a88:	8d 7f       	andi	r24, 0xFD	; 253
    1a8a:	80 83       	st	Z, r24
    1a8c:	88 e4       	ldi	r24, 0x48	; 72
    1a8e:	80 93 b8 00 	sts	0x00B8, r24
    1a92:	85 e4       	ldi	r24, 0x45	; 69
    1a94:	80 93 bc 00 	sts	0x00BC, r24
    1a98:	08 95       	ret

00001a9a <twi_readFrom>:
    1a9a:	41 32       	cpi	r20, 0x21	; 33
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <twi_readFrom+0x6>
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <twi_readFrom+0x84>
    1aa0:	90 91 b8 17 	lds	r25, 0x17B8
    1aa4:	91 11       	cpse	r25, r1
    1aa6:	fc cf       	rjmp	.-8      	; 0x1aa0 <twi_readFrom+0x6>
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	90 93 b8 17 	sts	0x17B8, r25
    1aae:	20 93 b6 17 	sts	0x17B6, r18
    1ab2:	2f ef       	ldi	r18, 0xFF	; 255
    1ab4:	20 93 4b 17 	sts	0x174B, r18
    1ab8:	10 92 90 17 	sts	0x1790, r1
    1abc:	24 0f       	add	r18, r20
    1abe:	20 93 8f 17 	sts	0x178F, r18
    1ac2:	90 93 b7 17 	sts	0x17B7, r25
    1ac6:	90 91 b7 17 	lds	r25, 0x17B7
    1aca:	88 0f       	add	r24, r24
    1acc:	89 2b       	or	r24, r25
    1ace:	80 93 b7 17 	sts	0x17B7, r24
    1ad2:	80 91 b5 17 	lds	r24, 0x17B5
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	41 f4       	brne	.+16     	; 0x1aea <twi_readFrom+0x50>
    1ada:	10 92 b5 17 	sts	0x17B5, r1
    1ade:	80 91 b7 17 	lds	r24, 0x17B7
    1ae2:	80 93 bb 00 	sts	0x00BB, r24
    1ae6:	85 ec       	ldi	r24, 0xC5	; 197
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <twi_readFrom+0x52>
    1aea:	85 ee       	ldi	r24, 0xE5	; 229
    1aec:	80 93 bc 00 	sts	0x00BC, r24
    1af0:	80 91 b8 17 	lds	r24, 0x17B8
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	e1 f3       	breq	.-8      	; 0x1af0 <twi_readFrom+0x56>
    1af8:	80 91 90 17 	lds	r24, 0x1790
    1afc:	84 17       	cp	r24, r20
    1afe:	10 f4       	brcc	.+4      	; 0x1b04 <twi_readFrom+0x6a>
    1b00:	40 91 90 17 	lds	r20, 0x1790
    1b04:	21 e9       	ldi	r18, 0x91	; 145
    1b06:	37 e1       	ldi	r19, 0x17	; 23
    1b08:	fb 01       	movw	r30, r22
    1b0a:	d9 01       	movw	r26, r18
    1b0c:	8a 2f       	mov	r24, r26
    1b0e:	82 1b       	sub	r24, r18
    1b10:	84 17       	cp	r24, r20
    1b12:	18 f4       	brcc	.+6      	; 0x1b1a <twi_readFrom+0x80>
    1b14:	8d 91       	ld	r24, X+
    1b16:	81 93       	st	Z+, r24
    1b18:	f9 cf       	rjmp	.-14     	; 0x1b0c <twi_readFrom+0x72>
    1b1a:	84 2f       	mov	r24, r20
    1b1c:	08 95       	ret
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	08 95       	ret

00001b22 <twi_writeTo>:
    1b22:	0f 93       	push	r16
    1b24:	41 32       	cpi	r20, 0x21	; 33
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <twi_writeTo+0x8>
    1b28:	46 c0       	rjmp	.+140    	; 0x1bb6 <twi_writeTo+0x94>
    1b2a:	90 91 b8 17 	lds	r25, 0x17B8
    1b2e:	91 11       	cpse	r25, r1
    1b30:	fc cf       	rjmp	.-8      	; 0x1b2a <twi_writeTo+0x8>
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	90 93 b8 17 	sts	0x17B8, r25
    1b38:	00 93 b6 17 	sts	0x17B6, r16
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
    1b3e:	90 93 4b 17 	sts	0x174B, r25
    1b42:	10 92 90 17 	sts	0x1790, r1
    1b46:	40 93 8f 17 	sts	0x178F, r20
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	61 e9       	ldi	r22, 0x91	; 145
    1b4e:	77 e1       	ldi	r23, 0x17	; 23
    1b50:	db 01       	movw	r26, r22
    1b52:	9a 2f       	mov	r25, r26
    1b54:	96 1b       	sub	r25, r22
    1b56:	94 17       	cp	r25, r20
    1b58:	18 f4       	brcc	.+6      	; 0x1b60 <twi_writeTo+0x3e>
    1b5a:	91 91       	ld	r25, Z+
    1b5c:	9d 93       	st	X+, r25
    1b5e:	f9 cf       	rjmp	.-14     	; 0x1b52 <twi_writeTo+0x30>
    1b60:	10 92 b7 17 	sts	0x17B7, r1
    1b64:	90 91 b7 17 	lds	r25, 0x17B7
    1b68:	88 0f       	add	r24, r24
    1b6a:	89 2b       	or	r24, r25
    1b6c:	80 93 b7 17 	sts	0x17B7, r24
    1b70:	80 91 b5 17 	lds	r24, 0x17B5
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <twi_writeTo+0x66>
    1b78:	10 92 b5 17 	sts	0x17B5, r1
    1b7c:	80 91 b7 17 	lds	r24, 0x17B7
    1b80:	80 93 bb 00 	sts	0x00BB, r24
    1b84:	85 ec       	ldi	r24, 0xC5	; 197
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <twi_writeTo+0x68>
    1b88:	85 ee       	ldi	r24, 0xE5	; 229
    1b8a:	80 93 bc 00 	sts	0x00BC, r24
    1b8e:	22 23       	and	r18, r18
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <twi_writeTo+0x78>
    1b92:	80 91 b8 17 	lds	r24, 0x17B8
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	e1 f3       	breq	.-8      	; 0x1b92 <twi_writeTo+0x70>
    1b9a:	80 91 4b 17 	lds	r24, 0x174B
    1b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <twi_writeTo+0x98>
    1ba2:	80 91 4b 17 	lds	r24, 0x174B
    1ba6:	80 32       	cpi	r24, 0x20	; 32
    1ba8:	51 f0       	breq	.+20     	; 0x1bbe <twi_writeTo+0x9c>
    1baa:	80 91 4b 17 	lds	r24, 0x174B
    1bae:	80 33       	cpi	r24, 0x30	; 48
    1bb0:	41 f4       	brne	.+16     	; 0x1bc2 <twi_writeTo+0xa0>
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <twi_writeTo+0xa2>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <twi_writeTo+0xa2>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <twi_writeTo+0xa2>
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <twi_writeTo+0xa2>
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <twi_transmit>:
    1bc8:	61 32       	cpi	r22, 0x21	; 33
    1bca:	98 f4       	brcc	.+38     	; 0x1bf2 <twi_transmit+0x2a>
    1bcc:	20 91 b8 17 	lds	r18, 0x17B8
    1bd0:	24 30       	cpi	r18, 0x04	; 4
    1bd2:	89 f4       	brne	.+34     	; 0x1bf6 <twi_transmit+0x2e>
    1bd4:	60 93 6d 17 	sts	0x176D, r22
    1bd8:	fc 01       	movw	r30, r24
    1bda:	8f e6       	ldi	r24, 0x6F	; 111
    1bdc:	97 e1       	ldi	r25, 0x17	; 23
    1bde:	dc 01       	movw	r26, r24
    1be0:	2a 2f       	mov	r18, r26
    1be2:	28 1b       	sub	r18, r24
    1be4:	26 17       	cp	r18, r22
    1be6:	18 f4       	brcc	.+6      	; 0x1bee <twi_transmit+0x26>
    1be8:	21 91       	ld	r18, Z+
    1bea:	2d 93       	st	X+, r18
    1bec:	f9 cf       	rjmp	.-14     	; 0x1be0 <twi_transmit+0x18>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	08 95       	ret
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	08 95       	ret
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	08 95       	ret

00001bfa <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1bfa:	85 ed       	ldi	r24, 0xD5	; 213
    1bfc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1c00:	80 91 bc 00 	lds	r24, 0x00BC
    1c04:	84 fd       	sbrc	r24, 4
    1c06:	fc cf       	rjmp	.-8      	; 0x1c00 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1c08:	10 92 b8 17 	sts	0x17B8, r1
    1c0c:	08 95       	ret

00001c0e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1c0e:	85 ec       	ldi	r24, 0xC5	; 197
    1c10:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1c14:	10 92 b8 17 	sts	0x17B8, r1
    1c18:	08 95       	ret

00001c1a <__vector_39>:
}

ISR(TWI_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
  switch(TW_STATUS){
    1c40:	80 91 b9 00 	lds	r24, 0x00B9
    1c44:	88 7f       	andi	r24, 0xF8	; 248
    1c46:	80 36       	cpi	r24, 0x60	; 96
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <__vector_39+0x32>
    1c4a:	9c c0       	rjmp	.+312    	; 0x1d84 <__vector_39+0x16a>
    1c4c:	68 f5       	brcc	.+90     	; 0x1ca8 <__vector_39+0x8e>
    1c4e:	88 32       	cpi	r24, 0x28	; 40
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <__vector_39+0x3a>
    1c52:	5b c0       	rjmp	.+182    	; 0x1d0a <__vector_39+0xf0>
    1c54:	90 f4       	brcc	.+36     	; 0x1c7a <__vector_39+0x60>
    1c56:	80 31       	cpi	r24, 0x10	; 16
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <__vector_39+0x42>
    1c5a:	54 c0       	rjmp	.+168    	; 0x1d04 <__vector_39+0xea>
    1c5c:	38 f4       	brcc	.+14     	; 0x1c6c <__vector_39+0x52>
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <__vector_39+0x4a>
    1c62:	f3 c0       	rjmp	.+486    	; 0x1e4a <__vector_39+0x230>
    1c64:	88 30       	cpi	r24, 0x08	; 8
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <__vector_39+0x50>
    1c68:	4d c0       	rjmp	.+154    	; 0x1d04 <__vector_39+0xea>
    1c6a:	f2 c0       	rjmp	.+484    	; 0x1e50 <__vector_39+0x236>
    1c6c:	88 31       	cpi	r24, 0x18	; 24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <__vector_39+0x58>
    1c70:	4c c0       	rjmp	.+152    	; 0x1d0a <__vector_39+0xf0>
    1c72:	80 32       	cpi	r24, 0x20	; 32
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <__vector_39+0x5e>
    1c76:	5d c0       	rjmp	.+186    	; 0x1d32 <__vector_39+0x118>
    1c78:	eb c0       	rjmp	.+470    	; 0x1e50 <__vector_39+0x236>
    1c7a:	80 34       	cpi	r24, 0x40	; 64
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <__vector_39+0x66>
    1c7e:	68 c0       	rjmp	.+208    	; 0x1d50 <__vector_39+0x136>
    1c80:	48 f4       	brcc	.+18     	; 0x1c94 <__vector_39+0x7a>
    1c82:	80 33       	cpi	r24, 0x30	; 48
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__vector_39+0x6e>
    1c86:	55 c0       	rjmp	.+170    	; 0x1d32 <__vector_39+0x118>
    1c88:	88 33       	cpi	r24, 0x38	; 56
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <__vector_39+0x74>
    1c8c:	e1 c0       	rjmp	.+450    	; 0x1e50 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1c8e:	80 93 4b 17 	sts	0x174B, r24
    1c92:	a7 c0       	rjmp	.+334    	; 0x1de2 <__vector_39+0x1c8>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1c94:	80 35       	cpi	r24, 0x50	; 80
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <__vector_39+0x80>
    1c98:	4f c0       	rjmp	.+158    	; 0x1d38 <__vector_39+0x11e>
    1c9a:	88 35       	cpi	r24, 0x58	; 88
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <__vector_39+0x86>
    1c9e:	5d c0       	rjmp	.+186    	; 0x1d5a <__vector_39+0x140>
    1ca0:	88 34       	cpi	r24, 0x48	; 72
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <__vector_39+0x8c>
    1ca4:	d5 c0       	rjmp	.+426    	; 0x1e50 <__vector_39+0x236>
    1ca6:	d3 c0       	rjmp	.+422    	; 0x1e4e <__vector_39+0x234>
    1ca8:	88 39       	cpi	r24, 0x98	; 152
    1caa:	09 f4       	brne	.+2      	; 0x1cae <__vector_39+0x94>
    1cac:	c4 c0       	rjmp	.+392    	; 0x1e36 <__vector_39+0x21c>
    1cae:	a8 f4       	brcc	.+42     	; 0x1cda <__vector_39+0xc0>
    1cb0:	88 37       	cpi	r24, 0x78	; 120
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__vector_39+0x9c>
    1cb4:	67 c0       	rjmp	.+206    	; 0x1d84 <__vector_39+0x16a>
    1cb6:	38 f4       	brcc	.+14     	; 0x1cc6 <__vector_39+0xac>
    1cb8:	88 36       	cpi	r24, 0x68	; 104
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <__vector_39+0xa4>
    1cbc:	63 c0       	rjmp	.+198    	; 0x1d84 <__vector_39+0x16a>
    1cbe:	80 37       	cpi	r24, 0x70	; 112
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <__vector_39+0xaa>
    1cc2:	60 c0       	rjmp	.+192    	; 0x1d84 <__vector_39+0x16a>
    1cc4:	c5 c0       	rjmp	.+394    	; 0x1e50 <__vector_39+0x236>
    1cc6:	88 38       	cpi	r24, 0x88	; 136
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__vector_39+0xb2>
    1cca:	b5 c0       	rjmp	.+362    	; 0x1e36 <__vector_39+0x21c>
    1ccc:	80 39       	cpi	r24, 0x90	; 144
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <__vector_39+0xb8>
    1cd0:	5f c0       	rjmp	.+190    	; 0x1d90 <__vector_39+0x176>
    1cd2:	80 38       	cpi	r24, 0x80	; 128
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <__vector_39+0xbe>
    1cd6:	bc c0       	rjmp	.+376    	; 0x1e50 <__vector_39+0x236>
    1cd8:	5b c0       	rjmp	.+182    	; 0x1d90 <__vector_39+0x176>
    1cda:	80 3b       	cpi	r24, 0xB0	; 176
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <__vector_39+0xc6>
    1cde:	83 c0       	rjmp	.+262    	; 0x1de6 <__vector_39+0x1cc>
    1ce0:	38 f4       	brcc	.+14     	; 0x1cf0 <__vector_39+0xd6>
    1ce2:	80 3a       	cpi	r24, 0xA0	; 160
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <__vector_39+0xce>
    1ce6:	66 c0       	rjmp	.+204    	; 0x1db4 <__vector_39+0x19a>
    1ce8:	88 3a       	cpi	r24, 0xA8	; 168
    1cea:	09 f4       	brne	.+2      	; 0x1cee <__vector_39+0xd4>
    1cec:	7c c0       	rjmp	.+248    	; 0x1de6 <__vector_39+0x1cc>
    1cee:	b0 c0       	rjmp	.+352    	; 0x1e50 <__vector_39+0x236>
    1cf0:	80 3c       	cpi	r24, 0xC0	; 192
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <__vector_39+0xdc>
    1cf4:	a4 c0       	rjmp	.+328    	; 0x1e3e <__vector_39+0x224>
    1cf6:	88 3c       	cpi	r24, 0xC8	; 200
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <__vector_39+0xe2>
    1cfa:	a1 c0       	rjmp	.+322    	; 0x1e3e <__vector_39+0x224>
    1cfc:	88 3b       	cpi	r24, 0xB8	; 184
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <__vector_39+0xe8>
    1d00:	87 c0       	rjmp	.+270    	; 0x1e10 <__vector_39+0x1f6>
    1d02:	a6 c0       	rjmp	.+332    	; 0x1e50 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1d04:	80 91 b7 17 	lds	r24, 0x17B7
    1d08:	10 c0       	rjmp	.+32     	; 0x1d2a <__vector_39+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d0a:	90 91 90 17 	lds	r25, 0x1790
    1d0e:	80 91 8f 17 	lds	r24, 0x178F
    1d12:	98 17       	cp	r25, r24
    1d14:	70 f5       	brcc	.+92     	; 0x1d72 <__vector_39+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1d16:	e0 91 90 17 	lds	r30, 0x1790
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	8e 0f       	add	r24, r30
    1d1e:	80 93 90 17 	sts	0x1790, r24
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	ef 56       	subi	r30, 0x6F	; 111
    1d26:	f8 4e       	sbci	r31, 0xE8	; 232
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1d2e:	85 ec       	ldi	r24, 0xC5	; 197
    1d30:	83 c0       	rjmp	.+262    	; 0x1e38 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1d32:	80 93 4b 17 	sts	0x174B, r24
    1d36:	8b c0       	rjmp	.+278    	; 0x1e4e <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1d38:	e0 91 90 17 	lds	r30, 0x1790
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	8e 0f       	add	r24, r30
    1d40:	80 93 90 17 	sts	0x1790, r24
    1d44:	80 91 bb 00 	lds	r24, 0x00BB
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	ef 56       	subi	r30, 0x6F	; 111
    1d4c:	f8 4e       	sbci	r31, 0xE8	; 232
    1d4e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d50:	90 91 90 17 	lds	r25, 0x1790
    1d54:	80 91 8f 17 	lds	r24, 0x178F
    1d58:	6b c0       	rjmp	.+214    	; 0x1e30 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1d5a:	e0 91 90 17 	lds	r30, 0x1790
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	8e 0f       	add	r24, r30
    1d62:	80 93 90 17 	sts	0x1790, r24
    1d66:	80 91 bb 00 	lds	r24, 0x00BB
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	ef 56       	subi	r30, 0x6F	; 111
    1d6e:	f8 4e       	sbci	r31, 0xE8	; 232
    1d70:	80 83       	st	Z, r24
	if (twi_sendStop)
    1d72:	80 91 b6 17 	lds	r24, 0x17B6
    1d76:	81 11       	cpse	r24, r1
    1d78:	6a c0       	rjmp	.+212    	; 0x1e4e <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 b5 17 	sts	0x17B5, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1d80:	84 ea       	ldi	r24, 0xA4	; 164
    1d82:	5e c0       	rjmp	.+188    	; 0x1e40 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	80 93 b8 17 	sts	0x17B8, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1d8a:	10 92 4c 17 	sts	0x174C, r1
    1d8e:	cf cf       	rjmp	.-98     	; 0x1d2e <__vector_39+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1d90:	80 91 4c 17 	lds	r24, 0x174C
    1d94:	80 32       	cpi	r24, 0x20	; 32
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <__vector_39+0x180>
    1d98:	4e c0       	rjmp	.+156    	; 0x1e36 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1d9a:	e0 91 4c 17 	lds	r30, 0x174C
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	8e 0f       	add	r24, r30
    1da2:	80 93 4c 17 	sts	0x174C, r24
    1da6:	80 91 bb 00 	lds	r24, 0x00BB
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	e3 5b       	subi	r30, 0xB3	; 179
    1dae:	f8 4e       	sbci	r31, 0xE8	; 232
    1db0:	80 83       	st	Z, r24
    1db2:	bd cf       	rjmp	.-134    	; 0x1d2e <__vector_39+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1db4:	80 91 4c 17 	lds	r24, 0x174C
    1db8:	80 32       	cpi	r24, 0x20	; 32
    1dba:	30 f4       	brcc	.+12     	; 0x1dc8 <__vector_39+0x1ae>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1dbc:	e0 91 4c 17 	lds	r30, 0x174C
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	e3 5b       	subi	r30, 0xB3	; 179
    1dc4:	f8 4e       	sbci	r31, 0xE8	; 232
    1dc6:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1dc8:	18 df       	rcall	.-464    	; 0x1bfa <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1dca:	60 91 4c 17 	lds	r22, 0x174C
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	e0 91 b1 17 	lds	r30, 0x17B1
    1dd4:	f0 91 b2 17 	lds	r31, 0x17B2
    1dd8:	8d e4       	ldi	r24, 0x4D	; 77
    1dda:	97 e1       	ldi	r25, 0x17	; 23
    1ddc:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1dde:	10 92 4c 17 	sts	0x174C, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1de2:	15 df       	rcall	.-470    	; 0x1c0e <twi_releaseBus>
      break;
    1de4:	35 c0       	rjmp	.+106    	; 0x1e50 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1de6:	84 e0       	ldi	r24, 0x04	; 4
    1de8:	80 93 b8 17 	sts	0x17B8, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1dec:	10 92 6e 17 	sts	0x176E, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1df0:	10 92 6d 17 	sts	0x176D, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1df4:	e0 91 b3 17 	lds	r30, 0x17B3
    1df8:	f0 91 b4 17 	lds	r31, 0x17B4
    1dfc:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1dfe:	80 91 6d 17 	lds	r24, 0x176D
    1e02:	81 11       	cpse	r24, r1
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 6d 17 	sts	0x176D, r24
        twi_txBuffer[0] = 0x00;
    1e0c:	10 92 6f 17 	sts	0x176F, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1e10:	e0 91 6e 17 	lds	r30, 0x176E
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	8e 0f       	add	r24, r30
    1e18:	80 93 6e 17 	sts	0x176E, r24
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	e1 59       	subi	r30, 0x91	; 145
    1e20:	f8 4e       	sbci	r31, 0xE8	; 232
    1e22:	80 81       	ld	r24, Z
    1e24:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1e28:	90 91 6e 17 	lds	r25, 0x176E
    1e2c:	80 91 6d 17 	lds	r24, 0x176D
    1e30:	98 17       	cp	r25, r24
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <__vector_39+0x21c>
    1e34:	7c cf       	rjmp	.-264    	; 0x1d2e <__vector_39+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e36:	85 e8       	ldi	r24, 0x85	; 133
    1e38:	80 93 bc 00 	sts	0x00BC, r24
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e3e:	85 ec       	ldi	r24, 0xC5	; 197
    1e40:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1e44:	10 92 b8 17 	sts	0x17B8, r1
      break;
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1e4a:	10 92 4b 17 	sts	0x174B, r1
      twi_stop();
    1e4e:	d5 de       	rcall	.-598    	; 0x1bfa <twi_stop>
      break;
  }
}
    1e50:	ff 91       	pop	r31
    1e52:	ef 91       	pop	r30
    1e54:	bf 91       	pop	r27
    1e56:	af 91       	pop	r26
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	7f 91       	pop	r23
    1e5e:	6f 91       	pop	r22
    1e60:	5f 91       	pop	r21
    1e62:	4f 91       	pop	r20
    1e64:	3f 91       	pop	r19
    1e66:	2f 91       	pop	r18
    1e68:	0f 90       	pop	r0
    1e6a:	0b be       	out	0x3b, r0	; 59
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1e76:	80 91 e9 17 	lds	r24, 0x17E9
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	20 91 ea 17 	lds	r18, 0x17EA
    1e80:	82 1b       	sub	r24, r18
    1e82:	91 09       	sbc	r25, r1
    1e84:	08 95       	ret

00001e86 <_ZN7TwoWire4readEv>:
    1e86:	20 91 ea 17 	lds	r18, 0x17EA
    1e8a:	80 91 e9 17 	lds	r24, 0x17E9
    1e8e:	28 17       	cp	r18, r24
    1e90:	50 f4       	brcc	.+20     	; 0x1ea6 <_ZN7TwoWire4readEv+0x20>
    1e92:	e2 2f       	mov	r30, r18
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	e5 51       	subi	r30, 0x15	; 21
    1e98:	f8 4e       	sbci	r31, 0xE8	; 232
    1e9a:	80 81       	ld	r24, Z
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	20 93 ea 17 	sts	0x17EA, r18
    1ea4:	08 95       	ret
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	08 95       	ret

00001eac <_ZN7TwoWire4peekEv>:
    1eac:	e0 91 ea 17 	lds	r30, 0x17EA
    1eb0:	80 91 e9 17 	lds	r24, 0x17E9
    1eb4:	e8 17       	cp	r30, r24
    1eb6:	30 f4       	brcc	.+12     	; 0x1ec4 <_ZN7TwoWire4peekEv+0x18>
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	e5 51       	subi	r30, 0x15	; 21
    1ebc:	f8 4e       	sbci	r31, 0xE8	; 232
    1ebe:	80 81       	ld	r24, Z
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	08 95       	ret
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	9f ef       	ldi	r25, 0xFF	; 255
    1ec8:	08 95       	ret

00001eca <_ZN7TwoWire5flushEv>:
    1eca:	08 95       	ret

00001ecc <_ZN7TwoWire5writeEPKhj>:
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	7c 01       	movw	r14, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8a 01       	movw	r16, r20
    1ee2:	20 91 c5 17 	lds	r18, 0x17C5
    1ee6:	22 23       	and	r18, r18
    1ee8:	89 f0       	breq	.+34     	; 0x1f0c <_ZN7TwoWire5writeEPKhj+0x40>
    1eea:	eb 01       	movw	r28, r22
    1eec:	6b 01       	movw	r12, r22
    1eee:	c4 0e       	add	r12, r20
    1ef0:	d5 1e       	adc	r13, r21
    1ef2:	cc 15       	cp	r28, r12
    1ef4:	dd 05       	cpc	r29, r13
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <_ZN7TwoWire5writeEPKhj+0x44>
    1ef8:	69 91       	ld	r22, Y+
    1efa:	d7 01       	movw	r26, r14
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	01 90       	ld	r0, Z+
    1f02:	f0 81       	ld	r31, Z
    1f04:	e0 2d       	mov	r30, r0
    1f06:	c7 01       	movw	r24, r14
    1f08:	19 95       	eicall
    1f0a:	f3 cf       	rjmp	.-26     	; 0x1ef2 <_ZN7TwoWire5writeEPKhj+0x26>
    1f0c:	64 2f       	mov	r22, r20
    1f0e:	5c de       	rcall	.-840    	; 0x1bc8 <twi_transmit>
    1f10:	c8 01       	movw	r24, r16
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret

00001f24 <_ZN7TwoWire5writeEh>:
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	1f 92       	push	r1
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	69 83       	std	Y+1, r22	; 0x01
    1f30:	20 91 c5 17 	lds	r18, 0x17C5
    1f34:	22 23       	and	r18, r18
    1f36:	d1 f0       	breq	.+52     	; 0x1f6c <_ZN7TwoWire5writeEh+0x48>
    1f38:	20 91 c6 17 	lds	r18, 0x17C6
    1f3c:	20 32       	cpi	r18, 0x20	; 32
    1f3e:	40 f0       	brcs	.+16     	; 0x1f50 <_ZN7TwoWire5writeEh+0x2c>
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	33 83       	std	Z+3, r19	; 0x03
    1f48:	22 83       	std	Z+2, r18	; 0x02
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <_ZN7TwoWire5writeEh+0x54>
    1f50:	80 91 c7 17 	lds	r24, 0x17C7
    1f54:	e8 2f       	mov	r30, r24
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	e8 53       	subi	r30, 0x38	; 56
    1f5a:	f8 4e       	sbci	r31, 0xE8	; 232
    1f5c:	99 81       	ldd	r25, Y+1	; 0x01
    1f5e:	90 83       	st	Z, r25
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	80 93 c7 17 	sts	0x17C7, r24
    1f66:	80 93 c6 17 	sts	0x17C6, r24
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <_ZN7TwoWire5writeEh+0x50>
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	ce 01       	movw	r24, r28
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	2a de       	rcall	.-940    	; 0x1bc8 <twi_transmit>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0f 90       	pop	r0
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <_ZN7TwoWireC1Ev>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	13 82       	std	Z+3, r1	; 0x03
    1f84:	12 82       	std	Z+2, r1	; 0x02
    1f86:	48 ee       	ldi	r20, 0xE8	; 232
    1f88:	53 e0       	ldi	r21, 0x03	; 3
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	44 83       	std	Z+4, r20	; 0x04
    1f90:	55 83       	std	Z+5, r21	; 0x05
    1f92:	66 83       	std	Z+6, r22	; 0x06
    1f94:	77 83       	std	Z+7, r23	; 0x07
    1f96:	81 e9       	ldi	r24, 0x91	; 145
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	08 95       	ret

00001fa0 <_ZN7TwoWire5beginEv>:
    1fa0:	10 92 ea 17 	sts	0x17EA, r1
    1fa4:	10 92 e9 17 	sts	0x17E9, r1
    1fa8:	10 92 c7 17 	sts	0x17C7, r1
    1fac:	10 92 c6 17 	sts	0x17C6, r1
    1fb0:	56 cd       	rjmp	.-1364   	; 0x1a5e <twi_init>

00001fb2 <_ZN7TwoWire11requestFromEhhh>:
    1fb2:	86 2f       	mov	r24, r22
    1fb4:	41 32       	cpi	r20, 0x21	; 33
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <_ZN7TwoWire11requestFromEhhh+0x8>
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	6b ee       	ldi	r22, 0xEB	; 235
    1fbc:	77 e1       	ldi	r23, 0x17	; 23
    1fbe:	6d dd       	rcall	.-1318   	; 0x1a9a <twi_readFrom>
    1fc0:	10 92 ea 17 	sts	0x17EA, r1
    1fc4:	80 93 e9 17 	sts	0x17E9, r24
    1fc8:	08 95       	ret

00001fca <_ZN7TwoWire11requestFromEhh>:
    1fca:	21 e0       	ldi	r18, 0x01	; 1
    1fcc:	f2 cf       	rjmp	.-28     	; 0x1fb2 <_ZN7TwoWire11requestFromEhhh>

00001fce <_ZN7TwoWire17beginTransmissionEh>:
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	80 93 c5 17 	sts	0x17C5, r24
    1fd4:	60 93 e8 17 	sts	0x17E8, r22
    1fd8:	10 92 c7 17 	sts	0x17C7, r1
    1fdc:	10 92 c6 17 	sts	0x17C6, r1
    1fe0:	08 95       	ret

00001fe2 <_ZN7TwoWire15endTransmissionEh>:
    1fe2:	0f 93       	push	r16
    1fe4:	06 2f       	mov	r16, r22
    1fe6:	21 e0       	ldi	r18, 0x01	; 1
    1fe8:	40 91 c6 17 	lds	r20, 0x17C6
    1fec:	68 ec       	ldi	r22, 0xC8	; 200
    1fee:	77 e1       	ldi	r23, 0x17	; 23
    1ff0:	80 91 e8 17 	lds	r24, 0x17E8
    1ff4:	96 dd       	rcall	.-1236   	; 0x1b22 <twi_writeTo>
    1ff6:	10 92 c7 17 	sts	0x17C7, r1
    1ffa:	10 92 c6 17 	sts	0x17C6, r1
    1ffe:	10 92 c5 17 	sts	0x17C5, r1
    2002:	0f 91       	pop	r16
    2004:	08 95       	ret

00002006 <_ZN7TwoWire15endTransmissionEv>:
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	ec cf       	rjmp	.-40     	; 0x1fe2 <_ZN7TwoWire15endTransmissionEh>

0000200a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    200a:	89 eb       	ldi	r24, 0xB9	; 185
    200c:	97 e1       	ldi	r25, 0x17	; 23
    200e:	b8 cf       	rjmp	.-144    	; 0x1f80 <_ZN7TwoWireC1Ev>

00002010 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    2010:	fc 01       	movw	r30, r24
    2012:	24 85       	ldd	r18, Z+12	; 0x0c
    2014:	35 85       	ldd	r19, Z+13	; 0x0d
    2016:	f9 01       	movw	r30, r18
    2018:	e0 5c       	subi	r30, 0xC0	; 192
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	32 96       	adiw	r30, 0x02	; 2
    2022:	20 81       	ld	r18, Z
    2024:	31 81       	ldd	r19, Z+1	; 0x01
    2026:	82 1b       	sub	r24, r18
    2028:	93 0b       	sbc	r25, r19
    202a:	8f 73       	andi	r24, 0x3F	; 63
    202c:	99 27       	eor	r25, r25
    202e:	08 95       	ret

00002030 <_ZN14HardwareSerial4peekEv>:
    2030:	fc 01       	movw	r30, r24
    2032:	84 85       	ldd	r24, Z+12	; 0x0c
    2034:	95 85       	ldd	r25, Z+13	; 0x0d
    2036:	fc 01       	movw	r30, r24
    2038:	e0 5c       	subi	r30, 0xC0	; 192
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	40 81       	ld	r20, Z
    203e:	51 81       	ldd	r21, Z+1	; 0x01
    2040:	32 96       	adiw	r30, 0x02	; 2
    2042:	20 81       	ld	r18, Z
    2044:	31 81       	ldd	r19, Z+1	; 0x01
    2046:	42 17       	cp	r20, r18
    2048:	53 07       	cpc	r21, r19
    204a:	41 f0       	breq	.+16     	; 0x205c <_ZN14HardwareSerial4peekEv+0x2c>
    204c:	20 81       	ld	r18, Z
    204e:	31 81       	ldd	r19, Z+1	; 0x01
    2050:	fc 01       	movw	r30, r24
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	80 81       	ld	r24, Z
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	08 95       	ret
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	9f ef       	ldi	r25, 0xFF	; 255
    2060:	08 95       	ret

00002062 <_ZN14HardwareSerial4readEv>:
    2062:	fc 01       	movw	r30, r24
    2064:	84 85       	ldd	r24, Z+12	; 0x0c
    2066:	95 85       	ldd	r25, Z+13	; 0x0d
    2068:	fc 01       	movw	r30, r24
    206a:	e0 5c       	subi	r30, 0xC0	; 192
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	40 81       	ld	r20, Z
    2070:	51 81       	ldd	r21, Z+1	; 0x01
    2072:	32 96       	adiw	r30, 0x02	; 2
    2074:	20 81       	ld	r18, Z
    2076:	31 81       	ldd	r19, Z+1	; 0x01
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	81 f0       	breq	.+32     	; 0x209e <_ZN14HardwareSerial4readEv+0x3c>
    207e:	20 81       	ld	r18, Z
    2080:	31 81       	ldd	r19, Z+1	; 0x01
    2082:	dc 01       	movw	r26, r24
    2084:	a2 0f       	add	r26, r18
    2086:	b3 1f       	adc	r27, r19
    2088:	8c 91       	ld	r24, X
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	2f 5f       	subi	r18, 0xFF	; 255
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	2f 73       	andi	r18, 0x3F	; 63
    2094:	33 27       	eor	r19, r19
    2096:	31 83       	std	Z+1, r19	; 0x01
    2098:	20 83       	st	Z, r18
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	08 95       	ret
    209e:	8f ef       	ldi	r24, 0xFF	; 255
    20a0:	9f ef       	ldi	r25, 0xFF	; 255
    20a2:	08 95       	ret

000020a4 <_ZN14HardwareSerial5flushEv>:
    20a4:	fc 01       	movw	r30, r24
    20a6:	81 a1       	ldd	r24, Z+33	; 0x21
    20a8:	88 23       	and	r24, r24
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <_ZN14HardwareSerial5flushEv+0x12>
    20ac:	a4 89       	ldd	r26, Z+20	; 0x14
    20ae:	b5 89       	ldd	r27, Z+21	; 0x15
    20b0:	8c 91       	ld	r24, X
    20b2:	86 ff       	sbrs	r24, 6
    20b4:	fb cf       	rjmp	.-10     	; 0x20ac <_ZN14HardwareSerial5flushEv+0x8>
    20b6:	11 a2       	std	Z+33, r1	; 0x21
    20b8:	08 95       	ret

000020ba <_ZN14HardwareSerial5writeEh>:
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c6:	fc 01       	movw	r30, r24
    20c8:	e0 5c       	subi	r30, 0xC0	; 192
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	01 90       	ld	r0, Z+
    20ce:	f0 81       	ld	r31, Z
    20d0:	e0 2d       	mov	r30, r0
    20d2:	31 96       	adiw	r30, 0x01	; 1
    20d4:	ef 73       	andi	r30, 0x3F	; 63
    20d6:	ff 27       	eor	r31, r31
    20d8:	1e 2f       	mov	r17, r30
    20da:	7f 2f       	mov	r23, r31
    20dc:	dc 01       	movw	r26, r24
    20de:	ae 5b       	subi	r26, 0xBE	; 190
    20e0:	bf 4f       	sbci	r27, 0xFF	; 255
    20e2:	21 2f       	mov	r18, r17
    20e4:	37 2f       	mov	r19, r23
    20e6:	4d 91       	ld	r20, X+
    20e8:	5c 91       	ld	r21, X
    20ea:	11 97       	sbiw	r26, 0x01	; 1
    20ec:	e4 17       	cp	r30, r20
    20ee:	f5 07       	cpc	r31, r21
    20f0:	c1 f3       	breq	.-16     	; 0x20e2 <_ZN14HardwareSerial5writeEh+0x28>
    20f2:	fc 01       	movw	r30, r24
    20f4:	e0 5c       	subi	r30, 0xC0	; 192
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	40 81       	ld	r20, Z
    20fa:	51 81       	ldd	r21, Z+1	; 0x01
    20fc:	fc 01       	movw	r30, r24
    20fe:	e4 0f       	add	r30, r20
    2100:	f5 1f       	adc	r31, r21
    2102:	60 83       	st	Z, r22
    2104:	ee 85       	ldd	r30, Y+14	; 0x0e
    2106:	ff 85       	ldd	r31, Y+15	; 0x0f
    2108:	e0 5c       	subi	r30, 0xC0	; 192
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	31 83       	std	Z+1, r19	; 0x01
    210e:	20 83       	st	Z, r18
    2110:	ee 89       	ldd	r30, Y+22	; 0x16
    2112:	ff 89       	ldd	r31, Y+23	; 0x17
    2114:	40 81       	ld	r20, Z
    2116:	21 e0       	ldi	r18, 0x01	; 1
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	c9 01       	movw	r24, r18
    211c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <_ZN14HardwareSerial5writeEh+0x6a>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <_ZN14HardwareSerial5writeEh+0x66>
    2128:	84 2b       	or	r24, r20
    212a:	80 83       	st	Z, r24
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	ec 89       	ldd	r30, Y+20	; 0x14
    2132:	fd 89       	ldd	r31, Y+21	; 0x15
    2134:	80 81       	ld	r24, Z
    2136:	80 64       	ori	r24, 0x40	; 64
    2138:	80 83       	st	Z, r24
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	08 95       	ret

00002146 <__vector_25>:
    2146:	1f 92       	push	r1
    2148:	0f 92       	push	r0
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	0f 92       	push	r0
    214e:	11 24       	eor	r1, r1
    2150:	0b b6       	in	r0, 0x3b	; 59
    2152:	0f 92       	push	r0
    2154:	2f 93       	push	r18
    2156:	3f 93       	push	r19
    2158:	4f 93       	push	r20
    215a:	8f 93       	push	r24
    215c:	9f 93       	push	r25
    215e:	af 93       	push	r26
    2160:	bf 93       	push	r27
    2162:	ef 93       	push	r30
    2164:	ff 93       	push	r31
    2166:	80 91 c0 00 	lds	r24, 0x00C0
    216a:	82 fd       	sbrc	r24, 2
    216c:	1a c0       	rjmp	.+52     	; 0x21a2 <__vector_25+0x5c>
    216e:	40 91 c6 00 	lds	r20, 0x00C6
    2172:	80 91 af 1a 	lds	r24, 0x1AAF
    2176:	90 91 b0 1a 	lds	r25, 0x1AB0
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	8f 73       	andi	r24, 0x3F	; 63
    217e:	99 27       	eor	r25, r25
    2180:	20 91 b1 1a 	lds	r18, 0x1AB1
    2184:	30 91 b2 1a 	lds	r19, 0x1AB2
    2188:	82 17       	cp	r24, r18
    218a:	93 07       	cpc	r25, r19
    218c:	61 f0       	breq	.+24     	; 0x21a6 <__vector_25+0x60>
    218e:	ef ea       	ldi	r30, 0xAF	; 175
    2190:	fa e1       	ldi	r31, 0x1A	; 26
    2192:	a0 81       	ld	r26, Z
    2194:	b1 81       	ldd	r27, Z+1	; 0x01
    2196:	a1 59       	subi	r26, 0x91	; 145
    2198:	b5 4e       	sbci	r27, 0xE5	; 229
    219a:	4c 93       	st	X, r20
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <__vector_25+0x60>
    21a2:	80 91 c6 00 	lds	r24, 0x00C6
    21a6:	ff 91       	pop	r31
    21a8:	ef 91       	pop	r30
    21aa:	bf 91       	pop	r27
    21ac:	af 91       	pop	r26
    21ae:	9f 91       	pop	r25
    21b0:	8f 91       	pop	r24
    21b2:	4f 91       	pop	r20
    21b4:	3f 91       	pop	r19
    21b6:	2f 91       	pop	r18
    21b8:	0f 90       	pop	r0
    21ba:	0b be       	out	0x3b, r0	; 59
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	0f 90       	pop	r0
    21c2:	1f 90       	pop	r1
    21c4:	18 95       	reti

000021c6 <__vector_36>:
    21c6:	1f 92       	push	r1
    21c8:	0f 92       	push	r0
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	0f 92       	push	r0
    21ce:	11 24       	eor	r1, r1
    21d0:	0b b6       	in	r0, 0x3b	; 59
    21d2:	0f 92       	push	r0
    21d4:	2f 93       	push	r18
    21d6:	3f 93       	push	r19
    21d8:	4f 93       	push	r20
    21da:	8f 93       	push	r24
    21dc:	9f 93       	push	r25
    21de:	af 93       	push	r26
    21e0:	bf 93       	push	r27
    21e2:	ef 93       	push	r30
    21e4:	ff 93       	push	r31
    21e6:	80 91 c8 00 	lds	r24, 0x00C8
    21ea:	82 fd       	sbrc	r24, 2
    21ec:	1a c0       	rjmp	.+52     	; 0x2222 <__stack+0x23>
    21ee:	40 91 ce 00 	lds	r20, 0x00CE
    21f2:	80 91 27 1a 	lds	r24, 0x1A27
    21f6:	90 91 28 1a 	lds	r25, 0x1A28
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	8f 73       	andi	r24, 0x3F	; 63
    21fe:	99 27       	eor	r25, r25
    2200:	20 91 29 1a 	lds	r18, 0x1A29
    2204:	30 91 2a 1a 	lds	r19, 0x1A2A
    2208:	82 17       	cp	r24, r18
    220a:	93 07       	cpc	r25, r19
    220c:	61 f0       	breq	.+24     	; 0x2226 <__stack+0x27>
    220e:	e7 e2       	ldi	r30, 0x27	; 39
    2210:	fa e1       	ldi	r31, 0x1A	; 26
    2212:	a0 81       	ld	r26, Z
    2214:	b1 81       	ldd	r27, Z+1	; 0x01
    2216:	a9 51       	subi	r26, 0x19	; 25
    2218:	b6 4e       	sbci	r27, 0xE6	; 230
    221a:	4c 93       	st	X, r20
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__stack+0x27>
    2222:	80 91 ce 00 	lds	r24, 0x00CE
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	4f 91       	pop	r20
    2234:	3f 91       	pop	r19
    2236:	2f 91       	pop	r18
    2238:	0f 90       	pop	r0
    223a:	0b be       	out	0x3b, r0	; 59
    223c:	0f 90       	pop	r0
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	0f 90       	pop	r0
    2242:	1f 90       	pop	r1
    2244:	18 95       	reti

00002246 <__vector_51>:
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	0b b6       	in	r0, 0x3b	; 59
    2252:	0f 92       	push	r0
    2254:	2f 93       	push	r18
    2256:	3f 93       	push	r19
    2258:	4f 93       	push	r20
    225a:	8f 93       	push	r24
    225c:	9f 93       	push	r25
    225e:	af 93       	push	r26
    2260:	bf 93       	push	r27
    2262:	ef 93       	push	r30
    2264:	ff 93       	push	r31
    2266:	80 91 d0 00 	lds	r24, 0x00D0
    226a:	82 fd       	sbrc	r24, 2
    226c:	1a c0       	rjmp	.+52     	; 0x22a2 <__vector_51+0x5c>
    226e:	40 91 d6 00 	lds	r20, 0x00D6
    2272:	80 91 9f 19 	lds	r24, 0x199F
    2276:	90 91 a0 19 	lds	r25, 0x19A0
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	8f 73       	andi	r24, 0x3F	; 63
    227e:	99 27       	eor	r25, r25
    2280:	20 91 a1 19 	lds	r18, 0x19A1
    2284:	30 91 a2 19 	lds	r19, 0x19A2
    2288:	82 17       	cp	r24, r18
    228a:	93 07       	cpc	r25, r19
    228c:	61 f0       	breq	.+24     	; 0x22a6 <__vector_51+0x60>
    228e:	ef e9       	ldi	r30, 0x9F	; 159
    2290:	f9 e1       	ldi	r31, 0x19	; 25
    2292:	a0 81       	ld	r26, Z
    2294:	b1 81       	ldd	r27, Z+1	; 0x01
    2296:	a1 5a       	subi	r26, 0xA1	; 161
    2298:	b6 4e       	sbci	r27, 0xE6	; 230
    229a:	4c 93       	st	X, r20
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <__vector_51+0x60>
    22a2:	80 91 d6 00 	lds	r24, 0x00D6
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	4f 91       	pop	r20
    22b4:	3f 91       	pop	r19
    22b6:	2f 91       	pop	r18
    22b8:	0f 90       	pop	r0
    22ba:	0b be       	out	0x3b, r0	; 59
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <__vector_54>:
    22c6:	1f 92       	push	r1
    22c8:	0f 92       	push	r0
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	0f 92       	push	r0
    22ce:	11 24       	eor	r1, r1
    22d0:	0b b6       	in	r0, 0x3b	; 59
    22d2:	0f 92       	push	r0
    22d4:	2f 93       	push	r18
    22d6:	3f 93       	push	r19
    22d8:	4f 93       	push	r20
    22da:	8f 93       	push	r24
    22dc:	9f 93       	push	r25
    22de:	af 93       	push	r26
    22e0:	bf 93       	push	r27
    22e2:	ef 93       	push	r30
    22e4:	ff 93       	push	r31
    22e6:	80 91 30 01 	lds	r24, 0x0130
    22ea:	82 fd       	sbrc	r24, 2
    22ec:	1a c0       	rjmp	.+52     	; 0x2322 <__vector_54+0x5c>
    22ee:	40 91 36 01 	lds	r20, 0x0136
    22f2:	80 91 17 19 	lds	r24, 0x1917
    22f6:	90 91 18 19 	lds	r25, 0x1918
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	8f 73       	andi	r24, 0x3F	; 63
    22fe:	99 27       	eor	r25, r25
    2300:	20 91 19 19 	lds	r18, 0x1919
    2304:	30 91 1a 19 	lds	r19, 0x191A
    2308:	82 17       	cp	r24, r18
    230a:	93 07       	cpc	r25, r19
    230c:	61 f0       	breq	.+24     	; 0x2326 <__vector_54+0x60>
    230e:	e7 e1       	ldi	r30, 0x17	; 23
    2310:	f9 e1       	ldi	r31, 0x19	; 25
    2312:	a0 81       	ld	r26, Z
    2314:	b1 81       	ldd	r27, Z+1	; 0x01
    2316:	a9 52       	subi	r26, 0x29	; 41
    2318:	b7 4e       	sbci	r27, 0xE7	; 231
    231a:	4c 93       	st	X, r20
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <__vector_54+0x60>
    2322:	80 91 36 01 	lds	r24, 0x0136
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	4f 91       	pop	r20
    2334:	3f 91       	pop	r19
    2336:	2f 91       	pop	r18
    2338:	0f 90       	pop	r0
    233a:	0b be       	out	0x3b, r0	; 59
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	0f 90       	pop	r0
    2342:	1f 90       	pop	r1
    2344:	18 95       	reti

00002346 <__vector_26>:
    2346:	1f 92       	push	r1
    2348:	0f 92       	push	r0
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	0f 92       	push	r0
    234e:	11 24       	eor	r1, r1
    2350:	0b b6       	in	r0, 0x3b	; 59
    2352:	0f 92       	push	r0
    2354:	2f 93       	push	r18
    2356:	3f 93       	push	r19
    2358:	8f 93       	push	r24
    235a:	9f 93       	push	r25
    235c:	af 93       	push	r26
    235e:	bf 93       	push	r27
    2360:	ef 93       	push	r30
    2362:	ff 93       	push	r31
    2364:	20 91 6b 1a 	lds	r18, 0x1A6B
    2368:	30 91 6c 1a 	lds	r19, 0x1A6C
    236c:	80 91 6d 1a 	lds	r24, 0x1A6D
    2370:	90 91 6e 1a 	lds	r25, 0x1A6E
    2374:	28 17       	cp	r18, r24
    2376:	39 07       	cpc	r19, r25
    2378:	31 f4       	brne	.+12     	; 0x2386 <__vector_26+0x40>
    237a:	e1 ec       	ldi	r30, 0xC1	; 193
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7d       	andi	r24, 0xDF	; 223
    2382:	80 83       	st	Z, r24
    2384:	10 c0       	rjmp	.+32     	; 0x23a6 <__vector_26+0x60>
    2386:	ed e6       	ldi	r30, 0x6D	; 109
    2388:	fa e1       	ldi	r31, 0x1A	; 26
    238a:	a0 81       	ld	r26, Z
    238c:	b1 81       	ldd	r27, Z+1	; 0x01
    238e:	a5 5d       	subi	r26, 0xD5	; 213
    2390:	b5 4e       	sbci	r27, 0xE5	; 229
    2392:	2c 91       	ld	r18, X
    2394:	80 81       	ld	r24, Z
    2396:	91 81       	ldd	r25, Z+1	; 0x01
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	8f 73       	andi	r24, 0x3F	; 63
    239c:	99 27       	eor	r25, r25
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	20 93 c6 00 	sts	0x00C6, r18
    23a6:	ff 91       	pop	r31
    23a8:	ef 91       	pop	r30
    23aa:	bf 91       	pop	r27
    23ac:	af 91       	pop	r26
    23ae:	9f 91       	pop	r25
    23b0:	8f 91       	pop	r24
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0b be       	out	0x3b, r0	; 59
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_37>:
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	0b b6       	in	r0, 0x3b	; 59
    23d0:	0f 92       	push	r0
    23d2:	2f 93       	push	r18
    23d4:	3f 93       	push	r19
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	20 91 e3 19 	lds	r18, 0x19E3
    23e6:	30 91 e4 19 	lds	r19, 0x19E4
    23ea:	80 91 e5 19 	lds	r24, 0x19E5
    23ee:	90 91 e6 19 	lds	r25, 0x19E6
    23f2:	28 17       	cp	r18, r24
    23f4:	39 07       	cpc	r19, r25
    23f6:	31 f4       	brne	.+12     	; 0x2404 <__vector_37+0x40>
    23f8:	e9 ec       	ldi	r30, 0xC9	; 201
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 7d       	andi	r24, 0xDF	; 223
    2400:	80 83       	st	Z, r24
    2402:	10 c0       	rjmp	.+32     	; 0x2424 <__vector_37+0x60>
    2404:	e5 ee       	ldi	r30, 0xE5	; 229
    2406:	f9 e1       	ldi	r31, 0x19	; 25
    2408:	a0 81       	ld	r26, Z
    240a:	b1 81       	ldd	r27, Z+1	; 0x01
    240c:	ad 55       	subi	r26, 0x5D	; 93
    240e:	b6 4e       	sbci	r27, 0xE6	; 230
    2410:	2c 91       	ld	r18, X
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	8f 73       	andi	r24, 0x3F	; 63
    241a:	99 27       	eor	r25, r25
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	20 93 ce 00 	sts	0x00CE, r18
    2424:	ff 91       	pop	r31
    2426:	ef 91       	pop	r30
    2428:	bf 91       	pop	r27
    242a:	af 91       	pop	r26
    242c:	9f 91       	pop	r25
    242e:	8f 91       	pop	r24
    2430:	3f 91       	pop	r19
    2432:	2f 91       	pop	r18
    2434:	0f 90       	pop	r0
    2436:	0b be       	out	0x3b, r0	; 59
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f 90       	pop	r0
    243e:	1f 90       	pop	r1
    2440:	18 95       	reti

00002442 <__vector_52>:
    2442:	1f 92       	push	r1
    2444:	0f 92       	push	r0
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	0f 92       	push	r0
    244a:	11 24       	eor	r1, r1
    244c:	0b b6       	in	r0, 0x3b	; 59
    244e:	0f 92       	push	r0
    2450:	2f 93       	push	r18
    2452:	3f 93       	push	r19
    2454:	8f 93       	push	r24
    2456:	9f 93       	push	r25
    2458:	af 93       	push	r26
    245a:	bf 93       	push	r27
    245c:	ef 93       	push	r30
    245e:	ff 93       	push	r31
    2460:	20 91 5b 19 	lds	r18, 0x195B
    2464:	30 91 5c 19 	lds	r19, 0x195C
    2468:	80 91 5d 19 	lds	r24, 0x195D
    246c:	90 91 5e 19 	lds	r25, 0x195E
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	31 f4       	brne	.+12     	; 0x2482 <__vector_52+0x40>
    2476:	e1 ed       	ldi	r30, 0xD1	; 209
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7d       	andi	r24, 0xDF	; 223
    247e:	80 83       	st	Z, r24
    2480:	10 c0       	rjmp	.+32     	; 0x24a2 <__vector_52+0x60>
    2482:	ed e5       	ldi	r30, 0x5D	; 93
    2484:	f9 e1       	ldi	r31, 0x19	; 25
    2486:	a0 81       	ld	r26, Z
    2488:	b1 81       	ldd	r27, Z+1	; 0x01
    248a:	a5 5e       	subi	r26, 0xE5	; 229
    248c:	b6 4e       	sbci	r27, 0xE6	; 230
    248e:	2c 91       	ld	r18, X
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	8f 73       	andi	r24, 0x3F	; 63
    2498:	99 27       	eor	r25, r25
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	20 93 d6 00 	sts	0x00D6, r18
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <__vector_55>:
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	0b b6       	in	r0, 0x3b	; 59
    24cc:	0f 92       	push	r0
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	8f 93       	push	r24
    24d4:	9f 93       	push	r25
    24d6:	af 93       	push	r26
    24d8:	bf 93       	push	r27
    24da:	ef 93       	push	r30
    24dc:	ff 93       	push	r31
    24de:	20 91 d3 18 	lds	r18, 0x18D3
    24e2:	30 91 d4 18 	lds	r19, 0x18D4
    24e6:	80 91 d5 18 	lds	r24, 0x18D5
    24ea:	90 91 d6 18 	lds	r25, 0x18D6
    24ee:	28 17       	cp	r18, r24
    24f0:	39 07       	cpc	r19, r25
    24f2:	31 f4       	brne	.+12     	; 0x2500 <__vector_55+0x40>
    24f4:	e1 e3       	ldi	r30, 0x31	; 49
    24f6:	f1 e0       	ldi	r31, 0x01	; 1
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 7d       	andi	r24, 0xDF	; 223
    24fc:	80 83       	st	Z, r24
    24fe:	10 c0       	rjmp	.+32     	; 0x2520 <__vector_55+0x60>
    2500:	e5 ed       	ldi	r30, 0xD5	; 213
    2502:	f8 e1       	ldi	r31, 0x18	; 24
    2504:	a0 81       	ld	r26, Z
    2506:	b1 81       	ldd	r27, Z+1	; 0x01
    2508:	ad 56       	subi	r26, 0x6D	; 109
    250a:	b7 4e       	sbci	r27, 0xE7	; 231
    250c:	2c 91       	ld	r18, X
    250e:	80 81       	ld	r24, Z
    2510:	91 81       	ldd	r25, Z+1	; 0x01
    2512:	01 96       	adiw	r24, 0x01	; 1
    2514:	8f 73       	andi	r24, 0x3F	; 63
    2516:	99 27       	eor	r25, r25
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	20 93 36 01 	sts	0x0136, r18
    2520:	ff 91       	pop	r31
    2522:	ef 91       	pop	r30
    2524:	bf 91       	pop	r27
    2526:	af 91       	pop	r26
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	3f 91       	pop	r19
    252e:	2f 91       	pop	r18
    2530:	0f 90       	pop	r0
    2532:	0b be       	out	0x3b, r0	; 59
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	fc 01       	movw	r30, r24
    255c:	13 82       	std	Z+3, r1	; 0x03
    255e:	12 82       	std	Z+2, r1	; 0x02
    2560:	88 ee       	ldi	r24, 0xE8	; 232
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	84 83       	std	Z+4, r24	; 0x04
    256a:	95 83       	std	Z+5, r25	; 0x05
    256c:	a6 83       	std	Z+6, r26	; 0x06
    256e:	b7 83       	std	Z+7, r27	; 0x07
    2570:	81 ea       	ldi	r24, 0xA1	; 161
    2572:	92 e0       	ldi	r25, 0x02	; 2
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	75 87       	std	Z+13, r23	; 0x0d
    257a:	64 87       	std	Z+12, r22	; 0x0c
    257c:	57 87       	std	Z+15, r21	; 0x0f
    257e:	46 87       	std	Z+14, r20	; 0x0e
    2580:	31 8b       	std	Z+17, r19	; 0x11
    2582:	20 8b       	std	Z+16, r18	; 0x10
    2584:	13 8b       	std	Z+19, r17	; 0x13
    2586:	02 8b       	std	Z+18, r16	; 0x12
    2588:	f5 8a       	std	Z+21, r15	; 0x15
    258a:	e4 8a       	std	Z+20, r14	; 0x14
    258c:	d7 8a       	std	Z+23, r13	; 0x17
    258e:	c6 8a       	std	Z+22, r12	; 0x16
    2590:	b1 8e       	std	Z+25, r11	; 0x19
    2592:	a0 8e       	std	Z+24, r10	; 0x18
    2594:	93 8e       	std	Z+27, r9	; 0x1b
    2596:	82 8e       	std	Z+26, r8	; 0x1a
    2598:	88 89       	ldd	r24, Y+16	; 0x10
    259a:	84 8f       	std	Z+28, r24	; 0x1c
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	85 8f       	std	Z+29, r24	; 0x1d
    25a0:	8a 89       	ldd	r24, Y+18	; 0x12
    25a2:	86 8f       	std	Z+30, r24	; 0x1e
    25a4:	8b 89       	ldd	r24, Y+19	; 0x13
    25a6:	87 8f       	std	Z+31, r24	; 0x1f
    25a8:	8c 89       	ldd	r24, Y+20	; 0x14
    25aa:	80 a3       	std	Z+32, r24	; 0x20
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	bf 90       	pop	r11
    25be:	af 90       	pop	r10
    25c0:	9f 90       	pop	r9
    25c2:	8f 90       	pop	r8
    25c4:	08 95       	ret

000025c6 <_ZN14HardwareSerial5beginEm>:
    25c6:	cf 92       	push	r12
    25c8:	df 92       	push	r13
    25ca:	ef 92       	push	r14
    25cc:	ff 92       	push	r15
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	ec 01       	movw	r28, r24
    25d4:	6a 01       	movw	r12, r20
    25d6:	7b 01       	movw	r14, r22
    25d8:	41 15       	cp	r20, r1
    25da:	81 ee       	ldi	r24, 0xE1	; 225
    25dc:	58 07       	cpc	r21, r24
    25de:	61 05       	cpc	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	01 f1       	breq	.+64     	; 0x2624 <_ZN14HardwareSerial5beginEm+0x5e>
    25e4:	ec 89       	ldd	r30, Y+20	; 0x14
    25e6:	fd 89       	ldd	r31, Y+21	; 0x15
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	08 a0       	ldd	r0, Y+32	; 0x20
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <_ZN14HardwareSerial5beginEm+0x2e>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <_ZN14HardwareSerial5beginEm+0x2a>
    25f8:	80 83       	st	Z, r24
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	79 e0       	ldi	r23, 0x09	; 9
    25fe:	8d e3       	ldi	r24, 0x3D	; 61
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a7 01       	movw	r20, r14
    2604:	96 01       	movw	r18, r12
    2606:	b2 d3       	rcall	.+1892   	; 0x2d6c <__udivmodsi4>
    2608:	ba 01       	movw	r22, r20
    260a:	a9 01       	movw	r20, r18
    260c:	41 50       	subi	r20, 0x01	; 1
    260e:	51 09       	sbc	r21, r1
    2610:	61 09       	sbc	r22, r1
    2612:	71 09       	sbc	r23, r1
    2614:	76 95       	lsr	r23
    2616:	67 95       	ror	r22
    2618:	57 95       	ror	r21
    261a:	47 95       	ror	r20
    261c:	41 15       	cp	r20, r1
    261e:	80 e1       	ldi	r24, 0x10	; 16
    2620:	58 07       	cpc	r21, r24
    2622:	a0 f0       	brcs	.+40     	; 0x264c <_ZN14HardwareSerial5beginEm+0x86>
    2624:	ec 89       	ldd	r30, Y+20	; 0x14
    2626:	fd 89       	ldd	r31, Y+21	; 0x15
    2628:	10 82       	st	Z, r1
    262a:	60 e8       	ldi	r22, 0x80	; 128
    262c:	74 e8       	ldi	r23, 0x84	; 132
    262e:	8e e1       	ldi	r24, 0x1E	; 30
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a7 01       	movw	r20, r14
    2634:	96 01       	movw	r18, r12
    2636:	9a d3       	rcall	.+1844   	; 0x2d6c <__udivmodsi4>
    2638:	ba 01       	movw	r22, r20
    263a:	a9 01       	movw	r20, r18
    263c:	41 50       	subi	r20, 0x01	; 1
    263e:	51 09       	sbc	r21, r1
    2640:	61 09       	sbc	r22, r1
    2642:	71 09       	sbc	r23, r1
    2644:	76 95       	lsr	r23
    2646:	67 95       	ror	r22
    2648:	57 95       	ror	r21
    264a:	47 95       	ror	r20
    264c:	e8 89       	ldd	r30, Y+16	; 0x10
    264e:	f9 89       	ldd	r31, Y+17	; 0x11
    2650:	50 83       	st	Z, r21
    2652:	ea 89       	ldd	r30, Y+18	; 0x12
    2654:	fb 89       	ldd	r31, Y+19	; 0x13
    2656:	40 83       	st	Z, r20
    2658:	19 a2       	std	Y+33, r1	; 0x21
    265a:	ee 89       	ldd	r30, Y+22	; 0x16
    265c:	ff 89       	ldd	r31, Y+23	; 0x17
    265e:	40 81       	ld	r20, Z
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9c 01       	movw	r18, r24
    2666:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2668:	02 c0       	rjmp	.+4      	; 0x266e <_ZN14HardwareSerial5beginEm+0xa8>
    266a:	22 0f       	add	r18, r18
    266c:	33 1f       	adc	r19, r19
    266e:	0a 94       	dec	r0
    2670:	e2 f7       	brpl	.-8      	; 0x266a <_ZN14HardwareSerial5beginEm+0xa4>
    2672:	24 2b       	or	r18, r20
    2674:	20 83       	st	Z, r18
    2676:	ee 89       	ldd	r30, Y+22	; 0x16
    2678:	ff 89       	ldd	r31, Y+23	; 0x17
    267a:	40 81       	ld	r20, Z
    267c:	9c 01       	movw	r18, r24
    267e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <_ZN14HardwareSerial5beginEm+0xc0>
    2682:	22 0f       	add	r18, r18
    2684:	33 1f       	adc	r19, r19
    2686:	0a 94       	dec	r0
    2688:	e2 f7       	brpl	.-8      	; 0x2682 <_ZN14HardwareSerial5beginEm+0xbc>
    268a:	24 2b       	or	r18, r20
    268c:	20 83       	st	Z, r18
    268e:	ee 89       	ldd	r30, Y+22	; 0x16
    2690:	ff 89       	ldd	r31, Y+23	; 0x17
    2692:	40 81       	ld	r20, Z
    2694:	9c 01       	movw	r18, r24
    2696:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2698:	02 c0       	rjmp	.+4      	; 0x269e <_ZN14HardwareSerial5beginEm+0xd8>
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	0a 94       	dec	r0
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <_ZN14HardwareSerial5beginEm+0xd4>
    26a2:	24 2b       	or	r18, r20
    26a4:	20 83       	st	Z, r18
    26a6:	ee 89       	ldd	r30, Y+22	; 0x16
    26a8:	ff 89       	ldd	r31, Y+23	; 0x17
    26aa:	20 81       	ld	r18, Z
    26ac:	0f 8c       	ldd	r0, Y+31	; 0x1f
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <_ZN14HardwareSerial5beginEm+0xee>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <_ZN14HardwareSerial5beginEm+0xea>
    26b8:	80 95       	com	r24
    26ba:	82 23       	and	r24, r18
    26bc:	80 83       	st	Z, r24
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	08 95       	ret

000026cc <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    26cc:	5f 92       	push	r5
    26ce:	6f 92       	push	r6
    26d0:	7f 92       	push	r7
    26d2:	8f 92       	push	r8
    26d4:	9f 92       	push	r9
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    26ea:	55 24       	eor	r5, r5
    26ec:	53 94       	inc	r5
    26ee:	5f 92       	push	r5
    26f0:	0f 2e       	mov	r0, r31
    26f2:	f5 e0       	ldi	r31, 0x05	; 5
    26f4:	6f 2e       	mov	r6, r31
    26f6:	f0 2d       	mov	r31, r0
    26f8:	6f 92       	push	r6
    26fa:	0f 2e       	mov	r0, r31
    26fc:	f7 e0       	ldi	r31, 0x07	; 7
    26fe:	7f 2e       	mov	r7, r31
    2700:	f0 2d       	mov	r31, r0
    2702:	7f 92       	push	r7
    2704:	d3 e0       	ldi	r29, 0x03	; 3
    2706:	df 93       	push	r29
    2708:	c4 e0       	ldi	r28, 0x04	; 4
    270a:	cf 93       	push	r28
    270c:	0f 2e       	mov	r0, r31
    270e:	f6 ec       	ldi	r31, 0xC6	; 198
    2710:	8f 2e       	mov	r8, r31
    2712:	91 2c       	mov	r9, r1
    2714:	f0 2d       	mov	r31, r0
    2716:	0f 2e       	mov	r0, r31
    2718:	f2 ec       	ldi	r31, 0xC2	; 194
    271a:	af 2e       	mov	r10, r31
    271c:	b1 2c       	mov	r11, r1
    271e:	f0 2d       	mov	r31, r0
    2720:	0f 2e       	mov	r0, r31
    2722:	f1 ec       	ldi	r31, 0xC1	; 193
    2724:	cf 2e       	mov	r12, r31
    2726:	d1 2c       	mov	r13, r1
    2728:	f0 2d       	mov	r31, r0
    272a:	0f 2e       	mov	r0, r31
    272c:	f0 ec       	ldi	r31, 0xC0	; 192
    272e:	ef 2e       	mov	r14, r31
    2730:	f1 2c       	mov	r15, r1
    2732:	f0 2d       	mov	r31, r0
    2734:	04 ec       	ldi	r16, 0xC4	; 196
    2736:	10 e0       	ldi	r17, 0x00	; 0
    2738:	25 ec       	ldi	r18, 0xC5	; 197
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	4b e2       	ldi	r20, 0x2B	; 43
    273e:	5a e1       	ldi	r21, 0x1A	; 26
    2740:	6f e6       	ldi	r22, 0x6F	; 111
    2742:	7a e1       	ldi	r23, 0x1A	; 26
    2744:	81 e7       	ldi	r24, 0x71	; 113
    2746:	98 e1       	ldi	r25, 0x18	; 24
    2748:	fa de       	rcall	.-524    	; 0x253e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    274a:	5f 92       	push	r5
    274c:	6f 92       	push	r6
    274e:	7f 92       	push	r7
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	0f 2e       	mov	r0, r31
    2756:	fe ec       	ldi	r31, 0xCE	; 206
    2758:	8f 2e       	mov	r8, r31
    275a:	91 2c       	mov	r9, r1
    275c:	f0 2d       	mov	r31, r0
    275e:	0f 2e       	mov	r0, r31
    2760:	fa ec       	ldi	r31, 0xCA	; 202
    2762:	af 2e       	mov	r10, r31
    2764:	b1 2c       	mov	r11, r1
    2766:	f0 2d       	mov	r31, r0
    2768:	0f 2e       	mov	r0, r31
    276a:	f9 ec       	ldi	r31, 0xC9	; 201
    276c:	cf 2e       	mov	r12, r31
    276e:	d1 2c       	mov	r13, r1
    2770:	f0 2d       	mov	r31, r0
    2772:	0f 2e       	mov	r0, r31
    2774:	f8 ec       	ldi	r31, 0xC8	; 200
    2776:	ef 2e       	mov	r14, r31
    2778:	f1 2c       	mov	r15, r1
    277a:	f0 2d       	mov	r31, r0
    277c:	0c ec       	ldi	r16, 0xCC	; 204
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	2d ec       	ldi	r18, 0xCD	; 205
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	43 ea       	ldi	r20, 0xA3	; 163
    2786:	59 e1       	ldi	r21, 0x19	; 25
    2788:	67 ee       	ldi	r22, 0xE7	; 231
    278a:	79 e1       	ldi	r23, 0x19	; 25
    278c:	8f e4       	ldi	r24, 0x4F	; 79
    278e:	98 e1       	ldi	r25, 0x18	; 24
    2790:	d6 de       	rcall	.-596    	; 0x253e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    2792:	5f 92       	push	r5
    2794:	6f 92       	push	r6
    2796:	7f 92       	push	r7
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	0f 2e       	mov	r0, r31
    279e:	f6 ed       	ldi	r31, 0xD6	; 214
    27a0:	8f 2e       	mov	r8, r31
    27a2:	91 2c       	mov	r9, r1
    27a4:	f0 2d       	mov	r31, r0
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f2 ed       	ldi	r31, 0xD2	; 210
    27aa:	af 2e       	mov	r10, r31
    27ac:	b1 2c       	mov	r11, r1
    27ae:	f0 2d       	mov	r31, r0
    27b0:	0f 2e       	mov	r0, r31
    27b2:	f1 ed       	ldi	r31, 0xD1	; 209
    27b4:	cf 2e       	mov	r12, r31
    27b6:	d1 2c       	mov	r13, r1
    27b8:	f0 2d       	mov	r31, r0
    27ba:	0f 2e       	mov	r0, r31
    27bc:	f0 ed       	ldi	r31, 0xD0	; 208
    27be:	ef 2e       	mov	r14, r31
    27c0:	f1 2c       	mov	r15, r1
    27c2:	f0 2d       	mov	r31, r0
    27c4:	04 ed       	ldi	r16, 0xD4	; 212
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	25 ed       	ldi	r18, 0xD5	; 213
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4b e1       	ldi	r20, 0x1B	; 27
    27ce:	59 e1       	ldi	r21, 0x19	; 25
    27d0:	6f e5       	ldi	r22, 0x5F	; 95
    27d2:	79 e1       	ldi	r23, 0x19	; 25
    27d4:	8d e2       	ldi	r24, 0x2D	; 45
    27d6:	98 e1       	ldi	r25, 0x18	; 24
    27d8:	b2 de       	rcall	.-668    	; 0x253e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    27da:	5f 92       	push	r5
    27dc:	6f 92       	push	r6
    27de:	7f 92       	push	r7
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	0f 2e       	mov	r0, r31
    27e6:	f6 e3       	ldi	r31, 0x36	; 54
    27e8:	8f 2e       	mov	r8, r31
    27ea:	99 24       	eor	r9, r9
    27ec:	93 94       	inc	r9
    27ee:	f0 2d       	mov	r31, r0
    27f0:	0f 2e       	mov	r0, r31
    27f2:	f2 e3       	ldi	r31, 0x32	; 50
    27f4:	af 2e       	mov	r10, r31
    27f6:	bb 24       	eor	r11, r11
    27f8:	b3 94       	inc	r11
    27fa:	f0 2d       	mov	r31, r0
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f1 e3       	ldi	r31, 0x31	; 49
    2800:	cf 2e       	mov	r12, r31
    2802:	dd 24       	eor	r13, r13
    2804:	d3 94       	inc	r13
    2806:	f0 2d       	mov	r31, r0
    2808:	0f 2e       	mov	r0, r31
    280a:	f0 e3       	ldi	r31, 0x30	; 48
    280c:	ef 2e       	mov	r14, r31
    280e:	ff 24       	eor	r15, r15
    2810:	f3 94       	inc	r15
    2812:	f0 2d       	mov	r31, r0
    2814:	04 e3       	ldi	r16, 0x34	; 52
    2816:	11 e0       	ldi	r17, 0x01	; 1
    2818:	25 e3       	ldi	r18, 0x35	; 53
    281a:	31 e0       	ldi	r19, 0x01	; 1
    281c:	43 e9       	ldi	r20, 0x93	; 147
    281e:	58 e1       	ldi	r21, 0x18	; 24
    2820:	67 ed       	ldi	r22, 0xD7	; 215
    2822:	78 e1       	ldi	r23, 0x18	; 24
    2824:	8b e0       	ldi	r24, 0x0B	; 11
    2826:	98 e1       	ldi	r25, 0x18	; 24
    2828:	8a de       	rcall	.-748    	; 0x253e <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    282a:	8d b7       	in	r24, 0x3d	; 61
    282c:	9e b7       	in	r25, 0x3e	; 62
    282e:	44 96       	adiw	r24, 0x14	; 20
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	9e bf       	out	0x3e, r25	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	8d bf       	out	0x3d, r24	; 61
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	9f 90       	pop	r9
    2850:	8f 90       	pop	r8
    2852:	7f 90       	pop	r7
    2854:	6f 90       	pop	r6
    2856:	5f 90       	pop	r5
    2858:	08 95       	ret

0000285a <_ZN5Print5writeEPKhj>:
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	6c 01       	movw	r12, r24
    286c:	41 15       	cp	r20, r1
    286e:	51 05       	cpc	r21, r1
    2870:	b1 f0       	breq	.+44     	; 0x289e <_ZN5Print5writeEPKhj+0x44>
    2872:	06 2f       	mov	r16, r22
    2874:	17 2f       	mov	r17, r23
    2876:	ea 01       	movw	r28, r20
    2878:	e1 2c       	mov	r14, r1
    287a:	f1 2c       	mov	r15, r1
    287c:	d8 01       	movw	r26, r16
    287e:	6d 91       	ld	r22, X+
    2880:	8d 01       	movw	r16, r26
    2882:	d6 01       	movw	r26, r12
    2884:	ed 91       	ld	r30, X+
    2886:	fc 91       	ld	r31, X
    2888:	01 90       	ld	r0, Z+
    288a:	f0 81       	ld	r31, Z
    288c:	e0 2d       	mov	r30, r0
    288e:	c6 01       	movw	r24, r12
    2890:	19 95       	eicall
    2892:	e8 0e       	add	r14, r24
    2894:	f9 1e       	adc	r15, r25
    2896:	21 97       	sbiw	r28, 0x01	; 1
    2898:	20 97       	sbiw	r28, 0x00	; 0
    289a:	81 f7       	brne	.-32     	; 0x287c <_ZN5Print5writeEPKhj+0x22>
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <_ZN5Print5writeEPKhj+0x48>
    289e:	e1 2c       	mov	r14, r1
    28a0:	f1 2c       	mov	r15, r1
    28a2:	c7 01       	movw	r24, r14
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	08 95       	ret

000028b6 <_ZN5Print5printEPKc>:
    28b6:	61 15       	cp	r22, r1
    28b8:	71 05       	cpc	r23, r1
    28ba:	81 f0       	breq	.+32     	; 0x28dc <_ZN5Print5printEPKc+0x26>
    28bc:	fb 01       	movw	r30, r22
    28be:	01 90       	ld	r0, Z+
    28c0:	00 20       	and	r0, r0
    28c2:	e9 f7       	brne	.-6      	; 0x28be <_ZN5Print5printEPKc+0x8>
    28c4:	31 97       	sbiw	r30, 0x01	; 1
    28c6:	af 01       	movw	r20, r30
    28c8:	46 1b       	sub	r20, r22
    28ca:	57 0b       	sbc	r21, r23
    28cc:	dc 01       	movw	r26, r24
    28ce:	ed 91       	ld	r30, X+
    28d0:	fc 91       	ld	r31, X
    28d2:	02 80       	ldd	r0, Z+2	; 0x02
    28d4:	f3 81       	ldd	r31, Z+3	; 0x03
    28d6:	e0 2d       	mov	r30, r0
    28d8:	19 95       	eicall
    28da:	08 95       	ret
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	08 95       	ret

000028e2 <_ZN5Print5printEc>:
    28e2:	dc 01       	movw	r26, r24
    28e4:	ed 91       	ld	r30, X+
    28e6:	fc 91       	ld	r31, X
    28e8:	01 90       	ld	r0, Z+
    28ea:	f0 81       	ld	r31, Z
    28ec:	e0 2d       	mov	r30, r0
    28ee:	19 95       	eicall
    28f0:	08 95       	ret

000028f2 <_ZN5Print7printlnEv>:
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	ec 01       	movw	r28, r24
    28fc:	6d e0       	ldi	r22, 0x0D	; 13
    28fe:	f1 df       	rcall	.-30     	; 0x28e2 <_ZN5Print5printEc>
    2900:	8c 01       	movw	r16, r24
    2902:	6a e0       	ldi	r22, 0x0A	; 10
    2904:	ce 01       	movw	r24, r28
    2906:	ed df       	rcall	.-38     	; 0x28e2 <_ZN5Print5printEc>
    2908:	80 0f       	add	r24, r16
    290a:	91 1f       	adc	r25, r17
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	08 95       	ret

00002916 <_ZN5Print7printlnEPKc>:
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	ec 01       	movw	r28, r24
    2920:	ca df       	rcall	.-108    	; 0x28b6 <_ZN5Print5printEPKc>
    2922:	8c 01       	movw	r16, r24
    2924:	ce 01       	movw	r24, r28
    2926:	e5 df       	rcall	.-54     	; 0x28f2 <_ZN5Print7printlnEv>
    2928:	80 0f       	add	r24, r16
    292a:	91 1f       	adc	r25, r17
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	08 95       	ret

00002936 <_ZN5Print11printNumberEmh>:
    2936:	6f 92       	push	r6
    2938:	7f 92       	push	r7
    293a:	8f 92       	push	r8
    293c:	9f 92       	push	r9
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	a1 97       	sbiw	r28, 0x21	; 33
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	6c 01       	movw	r12, r24
    2964:	74 2e       	mov	r7, r20
    2966:	35 2f       	mov	r19, r21
    2968:	86 2f       	mov	r24, r22
    296a:	97 2f       	mov	r25, r23
    296c:	62 2e       	mov	r6, r18
    296e:	19 a2       	std	Y+33, r1	; 0x21
    2970:	21 e0       	ldi	r18, 0x01	; 1
    2972:	26 15       	cp	r18, r6
    2974:	20 f0       	brcs	.+8      	; 0x297e <_ZN5Print11printNumberEmh+0x48>
    2976:	0f 2e       	mov	r0, r31
    2978:	fa e0       	ldi	r31, 0x0A	; 10
    297a:	6f 2e       	mov	r6, r31
    297c:	f0 2d       	mov	r31, r0
    297e:	7e 01       	movw	r14, r28
    2980:	a1 e2       	ldi	r26, 0x21	; 33
    2982:	ea 0e       	add	r14, r26
    2984:	f1 1c       	adc	r15, r1
    2986:	86 2c       	mov	r8, r6
    2988:	91 2c       	mov	r9, r1
    298a:	a1 2c       	mov	r10, r1
    298c:	b1 2c       	mov	r11, r1
    298e:	67 2d       	mov	r22, r7
    2990:	73 2f       	mov	r23, r19
    2992:	a5 01       	movw	r20, r10
    2994:	94 01       	movw	r18, r8
    2996:	ea d1       	rcall	.+980    	; 0x2d6c <__udivmodsi4>
    2998:	e2 2f       	mov	r30, r18
    299a:	73 2f       	mov	r23, r19
    299c:	02 2f       	mov	r16, r18
    299e:	13 2f       	mov	r17, r19
    29a0:	24 2f       	mov	r18, r20
    29a2:	35 2f       	mov	r19, r21
    29a4:	f7 2d       	mov	r31, r7
    29a6:	6e 9e       	mul	r6, r30
    29a8:	f0 19       	sub	r31, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	b1 e0       	ldi	r27, 0x01	; 1
    29ae:	eb 1a       	sub	r14, r27
    29b0:	f1 08       	sbc	r15, r1
    29b2:	fa 30       	cpi	r31, 0x0A	; 10
    29b4:	10 f4       	brcc	.+4      	; 0x29ba <_ZN5Print11printNumberEmh+0x84>
    29b6:	f0 5d       	subi	r31, 0xD0	; 208
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <_ZN5Print11printNumberEmh+0x86>
    29ba:	f9 5c       	subi	r31, 0xC9	; 201
    29bc:	d7 01       	movw	r26, r14
    29be:	fc 93       	st	X, r31
    29c0:	01 2b       	or	r16, r17
    29c2:	02 2b       	or	r16, r18
    29c4:	03 2b       	or	r16, r19
    29c6:	29 f0       	breq	.+10     	; 0x29d2 <_ZN5Print11printNumberEmh+0x9c>
    29c8:	7e 2e       	mov	r7, r30
    29ca:	37 2f       	mov	r19, r23
    29cc:	84 2f       	mov	r24, r20
    29ce:	95 2f       	mov	r25, r21
    29d0:	de cf       	rjmp	.-68     	; 0x298e <_ZN5Print11printNumberEmh+0x58>
    29d2:	e1 14       	cp	r14, r1
    29d4:	f1 04       	cpc	r15, r1
    29d6:	91 f0       	breq	.+36     	; 0x29fc <_ZN5Print11printNumberEmh+0xc6>
    29d8:	f7 01       	movw	r30, r14
    29da:	01 90       	ld	r0, Z+
    29dc:	00 20       	and	r0, r0
    29de:	e9 f7       	brne	.-6      	; 0x29da <_ZN5Print11printNumberEmh+0xa4>
    29e0:	31 97       	sbiw	r30, 0x01	; 1
    29e2:	af 01       	movw	r20, r30
    29e4:	4e 19       	sub	r20, r14
    29e6:	5f 09       	sbc	r21, r15
    29e8:	d6 01       	movw	r26, r12
    29ea:	ed 91       	ld	r30, X+
    29ec:	fc 91       	ld	r31, X
    29ee:	02 80       	ldd	r0, Z+2	; 0x02
    29f0:	f3 81       	ldd	r31, Z+3	; 0x03
    29f2:	e0 2d       	mov	r30, r0
    29f4:	b7 01       	movw	r22, r14
    29f6:	c6 01       	movw	r24, r12
    29f8:	19 95       	eicall
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <_ZN5Print11printNumberEmh+0xca>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a1 96       	adiw	r28, 0x21	; 33
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
    2a1e:	af 90       	pop	r10
    2a20:	9f 90       	pop	r9
    2a22:	8f 90       	pop	r8
    2a24:	7f 90       	pop	r7
    2a26:	6f 90       	pop	r6
    2a28:	08 95       	ret

00002a2a <_ZN5Print5printEmi>:
    2a2a:	21 15       	cp	r18, r1
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	49 f4       	brne	.+18     	; 0x2a42 <_ZN5Print5printEmi+0x18>
    2a30:	dc 01       	movw	r26, r24
    2a32:	ed 91       	ld	r30, X+
    2a34:	fc 91       	ld	r31, X
    2a36:	01 90       	ld	r0, Z+
    2a38:	f0 81       	ld	r31, Z
    2a3a:	e0 2d       	mov	r30, r0
    2a3c:	64 2f       	mov	r22, r20
    2a3e:	19 95       	eicall
    2a40:	08 95       	ret
    2a42:	79 cf       	rjmp	.-270    	; 0x2936 <_ZN5Print11printNumberEmh>
    2a44:	08 95       	ret

00002a46 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2a46:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    2a48:	ab 01       	movw	r20, r22
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	ed cf       	rjmp	.-38     	; 0x2a2a <_ZN5Print5printEmi>
}
    2a50:	08 95       	ret

00002a52 <__vector_23>:
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	2f 93       	push	r18
    2a5e:	3f 93       	push	r19
    2a60:	8f 93       	push	r24
    2a62:	9f 93       	push	r25
    2a64:	af 93       	push	r26
    2a66:	bf 93       	push	r27
    2a68:	80 91 b4 1a 	lds	r24, 0x1AB4
    2a6c:	90 91 b5 1a 	lds	r25, 0x1AB5
    2a70:	a0 91 b6 1a 	lds	r26, 0x1AB6
    2a74:	b0 91 b7 1a 	lds	r27, 0x1AB7
    2a78:	30 91 b3 1a 	lds	r19, 0x1AB3
    2a7c:	23 e0       	ldi	r18, 0x03	; 3
    2a7e:	23 0f       	add	r18, r19
    2a80:	2d 37       	cpi	r18, 0x7D	; 125
    2a82:	20 f4       	brcc	.+8      	; 0x2a8c <__vector_23+0x3a>
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	a1 1d       	adc	r26, r1
    2a88:	b1 1d       	adc	r27, r1
    2a8a:	05 c0       	rjmp	.+10     	; 0x2a96 <__vector_23+0x44>
    2a8c:	26 e8       	ldi	r18, 0x86	; 134
    2a8e:	23 0f       	add	r18, r19
    2a90:	02 96       	adiw	r24, 0x02	; 2
    2a92:	a1 1d       	adc	r26, r1
    2a94:	b1 1d       	adc	r27, r1
    2a96:	20 93 b3 1a 	sts	0x1AB3, r18
    2a9a:	80 93 b4 1a 	sts	0x1AB4, r24
    2a9e:	90 93 b5 1a 	sts	0x1AB5, r25
    2aa2:	a0 93 b6 1a 	sts	0x1AB6, r26
    2aa6:	b0 93 b7 1a 	sts	0x1AB7, r27
    2aaa:	80 91 b8 1a 	lds	r24, 0x1AB8
    2aae:	90 91 b9 1a 	lds	r25, 0x1AB9
    2ab2:	a0 91 ba 1a 	lds	r26, 0x1ABA
    2ab6:	b0 91 bb 1a 	lds	r27, 0x1ABB
    2aba:	01 96       	adiw	r24, 0x01	; 1
    2abc:	a1 1d       	adc	r26, r1
    2abe:	b1 1d       	adc	r27, r1
    2ac0:	80 93 b8 1a 	sts	0x1AB8, r24
    2ac4:	90 93 b9 1a 	sts	0x1AB9, r25
    2ac8:	a0 93 ba 1a 	sts	0x1ABA, r26
    2acc:	b0 93 bb 1a 	sts	0x1ABB, r27
    2ad0:	bf 91       	pop	r27
    2ad2:	af 91       	pop	r26
    2ad4:	9f 91       	pop	r25
    2ad6:	8f 91       	pop	r24
    2ad8:	3f 91       	pop	r19
    2ada:	2f 91       	pop	r18
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	0f 90       	pop	r0
    2ae2:	1f 90       	pop	r1
    2ae4:	18 95       	reti

00002ae6 <millis>:
    2ae6:	2f b7       	in	r18, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	60 91 b4 1a 	lds	r22, 0x1AB4
    2aee:	70 91 b5 1a 	lds	r23, 0x1AB5
    2af2:	80 91 b6 1a 	lds	r24, 0x1AB6
    2af6:	90 91 b7 1a 	lds	r25, 0x1AB7
    2afa:	2f bf       	out	0x3f, r18	; 63
    2afc:	08 95       	ret

00002afe <micros>:
    2afe:	3f b7       	in	r19, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	80 91 b8 1a 	lds	r24, 0x1AB8
    2b06:	90 91 b9 1a 	lds	r25, 0x1AB9
    2b0a:	a0 91 ba 1a 	lds	r26, 0x1ABA
    2b0e:	b0 91 bb 1a 	lds	r27, 0x1ABB
    2b12:	26 b5       	in	r18, 0x26	; 38
    2b14:	a8 9b       	sbis	0x15, 0	; 21
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <micros+0x24>
    2b18:	2f 3f       	cpi	r18, 0xFF	; 255
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <micros+0x24>
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	a1 1d       	adc	r26, r1
    2b20:	b1 1d       	adc	r27, r1
    2b22:	3f bf       	out	0x3f, r19	; 63
    2b24:	ba 2f       	mov	r27, r26
    2b26:	a9 2f       	mov	r26, r25
    2b28:	98 2f       	mov	r25, r24
    2b2a:	88 27       	eor	r24, r24
    2b2c:	82 0f       	add	r24, r18
    2b2e:	91 1d       	adc	r25, r1
    2b30:	a1 1d       	adc	r26, r1
    2b32:	b1 1d       	adc	r27, r1
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	66 0f       	add	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	66 0f       	add	r22, r22
    2b42:	77 1f       	adc	r23, r23
    2b44:	88 1f       	adc	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	08 95       	ret

00002b4a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	39 f0       	breq	.+14     	; 0x2b5e <delayMicroseconds+0x14>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2b58:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <delayMicroseconds+0x10>
    2b5e:	08 95       	ret

00002b60 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2b60:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2b62:	84 b5       	in	r24, 0x24	; 36
    2b64:	82 60       	ori	r24, 0x02	; 2
    2b66:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2b68:	84 b5       	in	r24, 0x24	; 36
    2b6a:	81 60       	ori	r24, 0x01	; 1
    2b6c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2b6e:	85 b5       	in	r24, 0x25	; 37
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2b74:	85 b5       	in	r24, 0x25	; 37
    2b76:	81 60       	ori	r24, 0x01	; 1
    2b78:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2b7a:	ee e6       	ldi	r30, 0x6E	; 110
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	81 60       	ori	r24, 0x01	; 1
    2b82:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b84:	e1 e8       	ldi	r30, 0x81	; 129
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b8a:	80 81       	ld	r24, Z
    2b8c:	82 60       	ori	r24, 0x02	; 2
    2b8e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b90:	80 81       	ld	r24, Z
    2b92:	81 60       	ori	r24, 0x01	; 1
    2b94:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b96:	e0 e8       	ldi	r30, 0x80	; 128
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	81 60       	ori	r24, 0x01	; 1
    2b9e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ba0:	e1 eb       	ldi	r30, 0xB1	; 177
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	84 60       	ori	r24, 0x04	; 4
    2ba8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2baa:	e0 eb       	ldi	r30, 0xB0	; 176
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	81 60       	ori	r24, 0x01	; 1
    2bb2:	80 83       	st	Z, r24
	#warning Timer 2 not finished (may not be present on this CPU)
#endif


#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2bb4:	e1 e9       	ldi	r30, 0x91	; 145
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	82 60       	ori	r24, 0x02	; 2
    2bbc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2bbe:	80 81       	ld	r24, Z
    2bc0:	81 60       	ori	r24, 0x01	; 1
    2bc2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2bc4:	e0 e9       	ldi	r30, 0x90	; 144
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	81 60       	ori	r24, 0x01	; 1
    2bcc:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2bce:	e1 ea       	ldi	r30, 0xA1	; 161
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	82 60       	ori	r24, 0x02	; 2
    2bd6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2bd8:	80 81       	ld	r24, Z
    2bda:	81 60       	ori	r24, 0x01	; 1
    2bdc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2bde:	e0 ea       	ldi	r30, 0xA0	; 160
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	81 60       	ori	r24, 0x01	; 1
    2be6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2be8:	e1 e2       	ldi	r30, 0x21	; 33
    2bea:	f1 e0       	ldi	r31, 0x01	; 1
    2bec:	80 81       	ld	r24, Z
    2bee:	82 60       	ori	r24, 0x02	; 2
    2bf0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2bf2:	80 81       	ld	r24, Z
    2bf4:	81 60       	ori	r24, 0x01	; 1
    2bf6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2bf8:	e0 e2       	ldi	r30, 0x20	; 32
    2bfa:	f1 e0       	ldi	r31, 0x01	; 1
    2bfc:	80 81       	ld	r24, Z
    2bfe:	81 60       	ori	r24, 0x01	; 1
    2c00:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2c02:	ea e7       	ldi	r30, 0x7A	; 122
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	84 60       	ori	r24, 0x04	; 4
    2c0a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2c0c:	80 81       	ld	r24, Z
    2c0e:	82 60       	ori	r24, 0x02	; 2
    2c10:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2c12:	80 81       	ld	r24, Z
    2c14:	81 60       	ori	r24, 0x01	; 1
    2c16:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 68       	ori	r24, 0x80	; 128
    2c1c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2c1e:	10 92 c1 00 	sts	0x00C1, r1
    2c22:	08 95       	ret

00002c24 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	fc 01       	movw	r30, r24
    2c28:	31 97       	sbiw	r30, 0x01	; 1
    2c2a:	e1 31       	cpi	r30, 0x11	; 17
    2c2c:	f1 05       	cpc	r31, r1
    2c2e:	08 f0       	brcs	.+2      	; 0x2c32 <turnOffPWM+0xe>
    2c30:	58 c0       	rjmp	.+176    	; 0x2ce2 <turnOffPWM+0xbe>
    2c32:	ee 58       	subi	r30, 0x8E	; 142
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	bc c0       	rjmp	.+376    	; 0x2db0 <__tablejump2__>
    2c38:	e0 e8       	ldi	r30, 0x80	; 128
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8f 77       	andi	r24, 0x7F	; 127
    2c40:	80 83       	st	Z, r24
    2c42:	08 95       	ret
    2c44:	e0 e8       	ldi	r30, 0x80	; 128
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	8f 7d       	andi	r24, 0xDF	; 223
    2c4c:	80 83       	st	Z, r24
    2c4e:	08 95       	ret
    2c50:	84 b5       	in	r24, 0x24	; 36
    2c52:	8f 77       	andi	r24, 0x7F	; 127
    2c54:	84 bd       	out	0x24, r24	; 36
    2c56:	08 95       	ret
    2c58:	84 b5       	in	r24, 0x24	; 36
    2c5a:	8f 7d       	andi	r24, 0xDF	; 223
    2c5c:	84 bd       	out	0x24, r24	; 36
    2c5e:	08 95       	ret
    2c60:	e0 eb       	ldi	r30, 0xB0	; 176
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 77       	andi	r24, 0x7F	; 127
    2c68:	80 83       	st	Z, r24
    2c6a:	08 95       	ret
    2c6c:	e0 eb       	ldi	r30, 0xB0	; 176
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	8f 7d       	andi	r24, 0xDF	; 223
    2c74:	80 83       	st	Z, r24
    2c76:	08 95       	ret
    2c78:	e0 e9       	ldi	r30, 0x90	; 144
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8f 77       	andi	r24, 0x7F	; 127
    2c80:	80 83       	st	Z, r24
    2c82:	08 95       	ret
    2c84:	e0 e9       	ldi	r30, 0x90	; 144
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 7d       	andi	r24, 0xDF	; 223
    2c8c:	80 83       	st	Z, r24
    2c8e:	08 95       	ret
    2c90:	e0 e9       	ldi	r30, 0x90	; 144
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	87 7f       	andi	r24, 0xF7	; 247
    2c98:	80 83       	st	Z, r24
    2c9a:	08 95       	ret
    2c9c:	e0 ea       	ldi	r30, 0xA0	; 160
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 77       	andi	r24, 0x7F	; 127
    2ca4:	80 83       	st	Z, r24
    2ca6:	08 95       	ret
    2ca8:	e0 ea       	ldi	r30, 0xA0	; 160
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 7d       	andi	r24, 0xDF	; 223
    2cb0:	80 83       	st	Z, r24
    2cb2:	08 95       	ret
    2cb4:	e0 ea       	ldi	r30, 0xA0	; 160
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	87 7f       	andi	r24, 0xF7	; 247
    2cbc:	80 83       	st	Z, r24
    2cbe:	08 95       	ret
    2cc0:	e0 e2       	ldi	r30, 0x20	; 32
    2cc2:	f1 e0       	ldi	r31, 0x01	; 1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 77       	andi	r24, 0x7F	; 127
    2cc8:	80 83       	st	Z, r24
    2cca:	08 95       	ret
    2ccc:	e0 e2       	ldi	r30, 0x20	; 32
    2cce:	f1 e0       	ldi	r31, 0x01	; 1
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 7d       	andi	r24, 0xDF	; 223
    2cd4:	80 83       	st	Z, r24
    2cd6:	08 95       	ret
    2cd8:	e0 e2       	ldi	r30, 0x20	; 32
    2cda:	f1 e0       	ldi	r31, 0x01	; 1
    2cdc:	80 81       	ld	r24, Z
    2cde:	87 7f       	andi	r24, 0xF7	; 247
    2ce0:	80 83       	st	Z, r24
    2ce2:	08 95       	ret

00002ce4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	f9 01       	movw	r30, r18
    2cf2:	ea 5f       	subi	r30, 0xFA	; 250
    2cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2cf8:	f9 01       	movw	r30, r18
    2cfa:	e4 5b       	subi	r30, 0xB4	; 180
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2d00:	f9 01       	movw	r30, r18
    2d02:	ee 56       	subi	r30, 0x6E	; 110
    2d04:	fe 4f       	sbci	r31, 0xFE	; 254
    2d06:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2d08:	dd 23       	and	r29, r29
    2d0a:	c1 f0       	breq	.+48     	; 0x2d3c <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	8a df       	rcall	.-236    	; 0x2c24 <turnOffPWM>

	out = portOutputRegister(port);
    2d10:	2d 2f       	mov	r18, r29
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	f9 01       	movw	r30, r18
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	ee 50       	subi	r30, 0x0E	; 14
    2d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1e:	a5 91       	lpm	r26, Z+
    2d20:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2d22:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2d24:	f8 94       	cli

	if (val == LOW) {
    2d26:	c1 11       	cpse	r28, r1
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <digitalWrite+0x50>
		*out &= ~bit;
    2d2a:	ec 91       	ld	r30, X
    2d2c:	10 95       	com	r17
    2d2e:	1e 23       	and	r17, r30
    2d30:	1c 93       	st	X, r17
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <digitalWrite+0x56>
	} else {
		*out |= bit;
    2d34:	ec 91       	ld	r30, X
    2d36:	1e 2b       	or	r17, r30
    2d38:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    2d3a:	8f bf       	out	0x3f, r24	; 63
}
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	08 95       	ret

00002d44 <__udivmodhi4>:
    2d44:	aa 1b       	sub	r26, r26
    2d46:	bb 1b       	sub	r27, r27
    2d48:	51 e1       	ldi	r21, 0x11	; 17
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <__udivmodhi4_ep>

00002d4c <__udivmodhi4_loop>:
    2d4c:	aa 1f       	adc	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	a6 17       	cp	r26, r22
    2d52:	b7 07       	cpc	r27, r23
    2d54:	10 f0       	brcs	.+4      	; 0x2d5a <__udivmodhi4_ep>
    2d56:	a6 1b       	sub	r26, r22
    2d58:	b7 0b       	sbc	r27, r23

00002d5a <__udivmodhi4_ep>:
    2d5a:	88 1f       	adc	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	5a 95       	dec	r21
    2d60:	a9 f7       	brne	.-22     	; 0x2d4c <__udivmodhi4_loop>
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	08 95       	ret

00002d6c <__udivmodsi4>:
    2d6c:	a1 e2       	ldi	r26, 0x21	; 33
    2d6e:	1a 2e       	mov	r1, r26
    2d70:	aa 1b       	sub	r26, r26
    2d72:	bb 1b       	sub	r27, r27
    2d74:	fd 01       	movw	r30, r26
    2d76:	0d c0       	rjmp	.+26     	; 0x2d92 <__udivmodsi4_ep>

00002d78 <__udivmodsi4_loop>:
    2d78:	aa 1f       	adc	r26, r26
    2d7a:	bb 1f       	adc	r27, r27
    2d7c:	ee 1f       	adc	r30, r30
    2d7e:	ff 1f       	adc	r31, r31
    2d80:	a2 17       	cp	r26, r18
    2d82:	b3 07       	cpc	r27, r19
    2d84:	e4 07       	cpc	r30, r20
    2d86:	f5 07       	cpc	r31, r21
    2d88:	20 f0       	brcs	.+8      	; 0x2d92 <__udivmodsi4_ep>
    2d8a:	a2 1b       	sub	r26, r18
    2d8c:	b3 0b       	sbc	r27, r19
    2d8e:	e4 0b       	sbc	r30, r20
    2d90:	f5 0b       	sbc	r31, r21

00002d92 <__udivmodsi4_ep>:
    2d92:	66 1f       	adc	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	88 1f       	adc	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	1a 94       	dec	r1
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <__udivmodsi4_loop>
    2d9e:	60 95       	com	r22
    2da0:	70 95       	com	r23
    2da2:	80 95       	com	r24
    2da4:	90 95       	com	r25
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	bd 01       	movw	r22, r26
    2dac:	cf 01       	movw	r24, r30
    2dae:	08 95       	ret

00002db0 <__tablejump2__>:
    2db0:	ee 0f       	add	r30, r30
    2db2:	ff 1f       	adc	r31, r31

00002db4 <__tablejump__>:
    2db4:	05 90       	lpm	r0, Z+
    2db6:	f4 91       	lpm	r31, Z
    2db8:	e0 2d       	mov	r30, r0
    2dba:	19 94       	eijmp

00002dbc <__tablejump_elpm__>:
    2dbc:	07 90       	elpm	r0, Z+
    2dbe:	f6 91       	elpm	r31, Z
    2dc0:	e0 2d       	mov	r30, r0
    2dc2:	19 94       	eijmp

00002dc4 <memcpy>:
    2dc4:	fb 01       	movw	r30, r22
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <memcpy+0xa>
    2dca:	01 90       	ld	r0, Z+
    2dcc:	0d 92       	st	X+, r0
    2dce:	41 50       	subi	r20, 0x01	; 1
    2dd0:	50 40       	sbci	r21, 0x00	; 0
    2dd2:	d8 f7       	brcc	.-10     	; 0x2dca <memcpy+0x6>
    2dd4:	08 95       	ret

00002dd6 <_exit>:
    2dd6:	f8 94       	cli

00002dd8 <__stop_program>:
    2dd8:	ff cf       	rjmp	.-2      	; 0x2dd8 <__stop_program>
