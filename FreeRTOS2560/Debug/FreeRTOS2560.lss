
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800200  000036f8  0000378c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a5e  0080027e  0080027e  0000380a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000380a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000878  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e5e2  00000000  00000000  000040b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002579  00000000  00000000  00012694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005174  00000000  00000000  00014c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d10  00000000  00000000  00019d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002dee  00000000  00000000  0001ba94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a902  00000000  00000000  0001e882  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008d0  00000000  00000000  00029184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	93 c1       	rjmp	.+806    	; 0x32c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c1       	rjmp	.+802    	; 0x32c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c1       	rjmp	.+798    	; 0x32c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c1       	rjmp	.+794    	; 0x32c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c1       	rjmp	.+790    	; 0x32c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c1       	rjmp	.+786    	; 0x32c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c1       	rjmp	.+782    	; 0x32c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c1       	rjmp	.+778    	; 0x32c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c1       	rjmp	.+774    	; 0x32c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c1       	rjmp	.+770    	; 0x32c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c1       	rjmp	.+766    	; 0x32c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c1       	rjmp	.+762    	; 0x32c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_13>
      38:	79 c1       	rjmp	.+754    	; 0x32c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c1       	rjmp	.+750    	; 0x32c <__bad_interrupt>
      3e:	00 00       	nop
      40:	75 c1       	rjmp	.+746    	; 0x32c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c1       	rjmp	.+742    	; 0x32c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c1       	rjmp	.+738    	; 0x32c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c1       	rjmp	.+734    	; 0x32c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c1       	rjmp	.+730    	; 0x32c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c1       	rjmp	.+726    	; 0x32c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c1       	rjmp	.+722    	; 0x32c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__vector_23>
      60:	65 c1       	rjmp	.+714    	; 0x32c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__vector_25>
      68:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__vector_26>
      6c:	5f c1       	rjmp	.+702    	; 0x32c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c1       	rjmp	.+698    	; 0x32c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c1       	rjmp	.+694    	; 0x32c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c1       	rjmp	.+690    	; 0x32c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c1       	rjmp	.+686    	; 0x32c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c1       	rjmp	.+682    	; 0x32c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c1       	rjmp	.+678    	; 0x32c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c1       	rjmp	.+674    	; 0x32c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c1       	rjmp	.+670    	; 0x32c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_36>
      94:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__vector_37>
      98:	49 c1       	rjmp	.+658    	; 0x32c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__vector_39>
      a0:	45 c1       	rjmp	.+650    	; 0x32c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c1       	rjmp	.+646    	; 0x32c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	41 c1       	rjmp	.+642    	; 0x32c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3f c1       	rjmp	.+638    	; 0x32c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c1       	rjmp	.+634    	; 0x32c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c1       	rjmp	.+630    	; 0x32c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c1       	rjmp	.+626    	; 0x32c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c1       	rjmp	.+622    	; 0x32c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c1       	rjmp	.+618    	; 0x32c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c1       	rjmp	.+614    	; 0x32c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c1       	rjmp	.+610    	; 0x32c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__vector_51>
      d0:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__vector_52>
      d4:	2b c1       	rjmp	.+598    	; 0x32c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__vector_54>
      dc:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__vector_55>
      e0:	25 c1       	rjmp	.+586    	; 0x32c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e6 10       	cpse	r14, r6
      e6:	e9 10       	cpse	r14, r9
      e8:	e9 10       	cpse	r14, r9
      ea:	e9 10       	cpse	r14, r9
      ec:	e9 10       	cpse	r14, r9
      ee:	e9 10       	cpse	r14, r9
      f0:	e9 10       	cpse	r14, r9
      f2:	e9 10       	cpse	r14, r9
      f4:	00 10       	cpse	r0, r0
      f6:	e9 10       	cpse	r14, r9
      f8:	e9 10       	cpse	r14, r9
      fa:	e9 10       	cpse	r14, r9
      fc:	e9 10       	cpse	r14, r9
      fe:	e9 10       	cpse	r14, r9
     100:	e9 10       	cpse	r14, r9
     102:	e9 10       	cpse	r14, r9
     104:	00 10       	cpse	r0, r0
     106:	e9 10       	cpse	r14, r9
     108:	e9 10       	cpse	r14, r9
     10a:	e9 10       	cpse	r14, r9
     10c:	e9 10       	cpse	r14, r9
     10e:	e9 10       	cpse	r14, r9
     110:	e9 10       	cpse	r14, r9
     112:	e9 10       	cpse	r14, r9
     114:	08 10       	cpse	r0, r8
     116:	e9 10       	cpse	r14, r9
     118:	e9 10       	cpse	r14, r9
     11a:	e9 10       	cpse	r14, r9
     11c:	e9 10       	cpse	r14, r9
     11e:	e9 10       	cpse	r14, r9
     120:	e9 10       	cpse	r14, r9
     122:	e9 10       	cpse	r14, r9
     124:	2d 10       	cpse	r2, r13
     126:	e9 10       	cpse	r14, r9
     128:	e9 10       	cpse	r14, r9
     12a:	e9 10       	cpse	r14, r9
     12c:	e9 10       	cpse	r14, r9
     12e:	e9 10       	cpse	r14, r9
     130:	e9 10       	cpse	r14, r9
     132:	e9 10       	cpse	r14, r9
     134:	08 10       	cpse	r0, r8
     136:	e9 10       	cpse	r14, r9
     138:	e9 10       	cpse	r14, r9
     13a:	e9 10       	cpse	r14, r9
     13c:	e9 10       	cpse	r14, r9
     13e:	e9 10       	cpse	r14, r9
     140:	e9 10       	cpse	r14, r9
     142:	e9 10       	cpse	r14, r9
     144:	32 10       	cpse	r3, r2
     146:	e9 10       	cpse	r14, r9
     148:	e9 10       	cpse	r14, r9
     14a:	e9 10       	cpse	r14, r9
     14c:	e9 10       	cpse	r14, r9
     14e:	e9 10       	cpse	r14, r9
     150:	e9 10       	cpse	r14, r9
     152:	e9 10       	cpse	r14, r9
     154:	37 10       	cpse	r3, r7
     156:	e9 10       	cpse	r14, r9
     158:	e9 10       	cpse	r14, r9
     15a:	e9 10       	cpse	r14, r9
     15c:	e9 10       	cpse	r14, r9
     15e:	e9 10       	cpse	r14, r9
     160:	e9 10       	cpse	r14, r9
     162:	e9 10       	cpse	r14, r9
     164:	48 10       	cpse	r4, r8
     166:	e9 10       	cpse	r14, r9
     168:	e9 10       	cpse	r14, r9
     16a:	e9 10       	cpse	r14, r9
     16c:	e9 10       	cpse	r14, r9
     16e:	e9 10       	cpse	r14, r9
     170:	e9 10       	cpse	r14, r9
     172:	e9 10       	cpse	r14, r9
     174:	71 10       	cpse	r7, r1
     176:	e9 10       	cpse	r14, r9
     178:	e9 10       	cpse	r14, r9
     17a:	e9 10       	cpse	r14, r9
     17c:	e9 10       	cpse	r14, r9
     17e:	e9 10       	cpse	r14, r9
     180:	e9 10       	cpse	r14, r9
     182:	e9 10       	cpse	r14, r9
     184:	3c 10       	cpse	r3, r12
     186:	e9 10       	cpse	r14, r9
     188:	e9 10       	cpse	r14, r9
     18a:	e9 10       	cpse	r14, r9
     18c:	e9 10       	cpse	r14, r9
     18e:	e9 10       	cpse	r14, r9
     190:	e9 10       	cpse	r14, r9
     192:	e9 10       	cpse	r14, r9
     194:	56 10       	cpse	r5, r6
     196:	e9 10       	cpse	r14, r9
     198:	e9 10       	cpse	r14, r9
     19a:	e9 10       	cpse	r14, r9
     19c:	e9 10       	cpse	r14, r9
     19e:	e9 10       	cpse	r14, r9
     1a0:	e9 10       	cpse	r14, r9
     1a2:	e9 10       	cpse	r14, r9
     1a4:	73 10       	cpse	r7, r3
     1a6:	e9 10       	cpse	r14, r9
     1a8:	e9 10       	cpse	r14, r9
     1aa:	e9 10       	cpse	r14, r9
     1ac:	e9 10       	cpse	r14, r9
     1ae:	e9 10       	cpse	r14, r9
     1b0:	e9 10       	cpse	r14, r9
     1b2:	e9 10       	cpse	r14, r9
     1b4:	73 10       	cpse	r7, r3
     1b6:	e9 10       	cpse	r14, r9
     1b8:	e9 10       	cpse	r14, r9
     1ba:	e9 10       	cpse	r14, r9
     1bc:	e9 10       	cpse	r14, r9
     1be:	e9 10       	cpse	r14, r9
     1c0:	e9 10       	cpse	r14, r9
     1c2:	e9 10       	cpse	r14, r9
     1c4:	73 10       	cpse	r7, r3
     1c6:	e9 10       	cpse	r14, r9
     1c8:	e9 10       	cpse	r14, r9
     1ca:	e9 10       	cpse	r14, r9
     1cc:	e9 10       	cpse	r14, r9
     1ce:	e9 10       	cpse	r14, r9
     1d0:	e9 10       	cpse	r14, r9
     1d2:	e9 10       	cpse	r14, r9
     1d4:	73 10       	cpse	r7, r3
     1d6:	e9 10       	cpse	r14, r9
     1d8:	e9 10       	cpse	r14, r9
     1da:	e9 10       	cpse	r14, r9
     1dc:	e9 10       	cpse	r14, r9
     1de:	e9 10       	cpse	r14, r9
     1e0:	e9 10       	cpse	r14, r9
     1e2:	e9 10       	cpse	r14, r9
     1e4:	7c 10       	cpse	r7, r12
     1e6:	e9 10       	cpse	r14, r9
     1e8:	e9 10       	cpse	r14, r9
     1ea:	e9 10       	cpse	r14, r9
     1ec:	e9 10       	cpse	r14, r9
     1ee:	e9 10       	cpse	r14, r9
     1f0:	e9 10       	cpse	r14, r9
     1f2:	e9 10       	cpse	r14, r9
     1f4:	ad 10       	cpse	r10, r13
     1f6:	e9 10       	cpse	r14, r9
     1f8:	e9 10       	cpse	r14, r9
     1fa:	e9 10       	cpse	r14, r9
     1fc:	e9 10       	cpse	r14, r9
     1fe:	e9 10       	cpse	r14, r9
     200:	e9 10       	cpse	r14, r9
     202:	e9 10       	cpse	r14, r9
     204:	7c 10       	cpse	r7, r12
     206:	e9 10       	cpse	r14, r9
     208:	e9 10       	cpse	r14, r9
     20a:	e9 10       	cpse	r14, r9
     20c:	e9 10       	cpse	r14, r9
     20e:	e9 10       	cpse	r14, r9
     210:	e9 10       	cpse	r14, r9
     212:	e9 10       	cpse	r14, r9
     214:	ad 10       	cpse	r10, r13
     216:	e9 10       	cpse	r14, r9
     218:	e9 10       	cpse	r14, r9
     21a:	e9 10       	cpse	r14, r9
     21c:	e9 10       	cpse	r14, r9
     21e:	e9 10       	cpse	r14, r9
     220:	e9 10       	cpse	r14, r9
     222:	e9 10       	cpse	r14, r9
     224:	94 10       	cpse	r9, r4
     226:	e9 10       	cpse	r14, r9
     228:	e9 10       	cpse	r14, r9
     22a:	e9 10       	cpse	r14, r9
     22c:	e9 10       	cpse	r14, r9
     22e:	e9 10       	cpse	r14, r9
     230:	e9 10       	cpse	r14, r9
     232:	e9 10       	cpse	r14, r9
     234:	b1 10       	cpse	r11, r1
     236:	e9 10       	cpse	r14, r9
     238:	e9 10       	cpse	r14, r9
     23a:	e9 10       	cpse	r14, r9
     23c:	e9 10       	cpse	r14, r9
     23e:	e9 10       	cpse	r14, r9
     240:	e9 10       	cpse	r14, r9
     242:	e9 10       	cpse	r14, r9
     244:	b1 10       	cpse	r11, r1
     246:	e9 10       	cpse	r14, r9
     248:	e9 10       	cpse	r14, r9
     24a:	e9 10       	cpse	r14, r9
     24c:	e9 10       	cpse	r14, r9
     24e:	e9 10       	cpse	r14, r9
     250:	e9 10       	cpse	r14, r9
     252:	e9 10       	cpse	r14, r9
     254:	c6 10       	cpse	r12, r6
     256:	e9 10       	cpse	r14, r9
     258:	e9 10       	cpse	r14, r9
     25a:	e9 10       	cpse	r14, r9
     25c:	e9 10       	cpse	r14, r9
     25e:	e9 10       	cpse	r14, r9
     260:	e9 10       	cpse	r14, r9
     262:	e9 10       	cpse	r14, r9
     264:	e0 10       	cpse	r14, r0
     266:	e9 10       	cpse	r14, r9
     268:	e9 10       	cpse	r14, r9
     26a:	e9 10       	cpse	r14, r9
     26c:	e9 10       	cpse	r14, r9
     26e:	e9 10       	cpse	r14, r9
     270:	e9 10       	cpse	r14, r9
     272:	e9 10       	cpse	r14, r9
     274:	e0 10       	cpse	r14, r0
     276:	08 4a       	sbci	r16, 0xA8	; 168
     278:	d7 3b       	cpi	r29, 0xB7	; 183
     27a:	3b ce       	rjmp	.-906    	; 0xfffffef2 <__eeprom_end+0xff7efef2>
     27c:	01 6e       	ori	r16, 0xE1	; 225
     27e:	84 bc       	out	0x24, r8	; 36
     280:	bf fd       	.word	0xfdbf	; ????
     282:	c1 2f       	mov	r28, r17
     284:	3d 6c       	ori	r19, 0xCD	; 205
     286:	74 31       	cpi	r23, 0x14	; 20
     288:	9a bd       	out	0x2a, r25	; 42
     28a:	56 83       	std	Z+6, r21	; 0x06
     28c:	3d da       	rcall	.-2950   	; 0xfffff708 <__eeprom_end+0xff7ef708>
     28e:	3d 00       	.word	0x003d	; ????
     290:	c7 7f       	andi	r28, 0xF7	; 247
     292:	11 be       	out	0x31, r1	; 49
     294:	d9 e4       	ldi	r29, 0x49	; 73
     296:	bb 4c       	sbci	r27, 0xCB	; 203
     298:	3e 91       	ld	r19, -X
     29a:	6b aa       	std	Y+51, r6	; 0x33
     29c:	aa be       	out	0x3a, r10	; 58
     29e:	00 00       	nop
     2a0:	00 80       	ld	r0, Z
     2a2:	3f 00       	.word	0x003f	; ????

000002a4 <__trampolines_end>:
     2a4:	69 32       	cpi	r22, 0x29	; 41
     2a6:	63 52       	subi	r22, 0x23	; 35
     2a8:	65 61       	ori	r22, 0x15	; 21
     2aa:	64 20       	and	r6, r4
     2ac:	74 69       	ori	r23, 0x94	; 148
     2ae:	6d 65       	ori	r22, 0x5D	; 93
     2b0:	6f 75       	andi	r22, 0x5F	; 95
     2b2:	74 00       	.word	0x0074	; ????

000002b4 <_ZZ7i2cReadhPhhE3__c>:
     2b4:	69 32 63 52 65 61 64 20 66 61 69 6c 65 64 3a 20     i2cRead failed: 
	...

000002c6 <__ctors_start>:
     2c6:	c6 01       	movw	r24, r12
     2c8:	be 11       	cpse	r27, r14
     2ca:	9d 14       	cp	r9, r13

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d1 e2       	ldi	r29, 0x21	; 33
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0c bf       	out	0x3c, r16	; 60

000002dc <__do_copy_data>:
     2dc:	12 e0       	ldi	r17, 0x02	; 2
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b2 e0       	ldi	r27, 0x02	; 2
     2e2:	e8 ef       	ldi	r30, 0xF8	; 248
     2e4:	f6 e3       	ldi	r31, 0x36	; 54
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	ae 37       	cpi	r26, 0x7E	; 126
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	2c e0       	ldi	r18, 0x0C	; 12
     2f8:	ae e7       	ldi	r26, 0x7E	; 126
     2fa:	b2 e0       	ldi	r27, 0x02	; 2
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	ac 3d       	cpi	r26, 0xDC	; 220
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>

00000306 <__do_global_ctors>:
     306:	12 e0       	ldi	r17, 0x02	; 2
     308:	cc ec       	ldi	r28, 0xCC	; 204
     30a:	d2 e0       	ldi	r29, 0x02	; 2
     30c:	00 e0       	ldi	r16, 0x00	; 0
     30e:	06 c0       	rjmp	.+12     	; 0x31c <__do_global_ctors+0x16>
     310:	22 97       	sbiw	r28, 0x02	; 2
     312:	01 09       	sbc	r16, r1
     314:	fe 01       	movw	r30, r28
     316:	0b bf       	out	0x3b, r16	; 59
     318:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__tablejump_elpm__>
     31c:	c6 3c       	cpi	r28, 0xC6	; 198
     31e:	d1 07       	cpc	r29, r17
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 07       	cpc	r16, r24
     324:	a9 f7       	brne	.-22     	; 0x310 <__do_global_ctors+0xa>
     326:	03 d0       	rcall	.+6      	; 0x32e <main>
     328:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <_exit>

0000032c <__bad_interrupt>:
     32c:	69 ce       	rjmp	.-814    	; 0x0 <__vectors>

0000032e <main>:
	gyroYangle = pitch;
	compAngleX = roll;
	compAngleY = pitch;

	timer = micros();
}
     32e:	af 92       	push	r10
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	1f 92       	push	r1
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	a1 2c       	mov	r10, r1
     34a:	b1 2c       	mov	r11, r1
     34c:	c1 2c       	mov	r12, r1
     34e:	d1 2c       	mov	r13, r1
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	06 e0       	ldi	r16, 0x06	; 6
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	44 e0       	ldi	r20, 0x04	; 4
     35e:	54 e0       	ldi	r21, 0x04	; 4
     360:	68 e0       	ldi	r22, 0x08	; 8
     362:	72 e0       	ldi	r23, 0x02	; 2
     364:	89 ee       	ldi	r24, 0xE9	; 233
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <xTaskGenericCreate>
     36c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <vTaskStartScheduler>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	08 95       	ret

0000038c <_GLOBAL__sub_I_kalmanX>:
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	0f e6       	ldi	r16, 0x6F	; 111
     392:	12 e1       	ldi	r17, 0x12	; 18
     394:	23 e8       	ldi	r18, 0x83	; 131
     396:	3a e3       	ldi	r19, 0x3A	; 58
     398:	00 93 fa 02 	sts	0x02FA, r16
     39c:	10 93 fb 02 	sts	0x02FB, r17
     3a0:	20 93 fc 02 	sts	0x02FC, r18
     3a4:	30 93 fd 02 	sts	0x02FD, r19
     3a8:	46 ea       	ldi	r20, 0xA6	; 166
     3aa:	5b e9       	ldi	r21, 0x9B	; 155
     3ac:	64 e4       	ldi	r22, 0x44	; 68
     3ae:	7b e3       	ldi	r23, 0x3B	; 59
     3b0:	40 93 fe 02 	sts	0x02FE, r20
     3b4:	50 93 ff 02 	sts	0x02FF, r21
     3b8:	60 93 00 03 	sts	0x0300, r22
     3bc:	70 93 01 03 	sts	0x0301, r23
     3c0:	8f e8       	ldi	r24, 0x8F	; 143
     3c2:	92 ec       	ldi	r25, 0xC2	; 194
     3c4:	a5 ef       	ldi	r26, 0xF5	; 245
     3c6:	bc e3       	ldi	r27, 0x3C	; 60
     3c8:	80 93 02 03 	sts	0x0302, r24
     3cc:	90 93 03 03 	sts	0x0303, r25
     3d0:	a0 93 04 03 	sts	0x0304, r26
     3d4:	b0 93 05 03 	sts	0x0305, r27
     3d8:	10 92 06 03 	sts	0x0306, r1
     3dc:	10 92 07 03 	sts	0x0307, r1
     3e0:	10 92 08 03 	sts	0x0308, r1
     3e4:	10 92 09 03 	sts	0x0309, r1
     3e8:	10 92 0a 03 	sts	0x030A, r1
     3ec:	10 92 0b 03 	sts	0x030B, r1
     3f0:	10 92 0c 03 	sts	0x030C, r1
     3f4:	10 92 0d 03 	sts	0x030D, r1
     3f8:	10 92 12 03 	sts	0x0312, r1
     3fc:	10 92 13 03 	sts	0x0313, r1
     400:	10 92 14 03 	sts	0x0314, r1
     404:	10 92 15 03 	sts	0x0315, r1
     408:	10 92 16 03 	sts	0x0316, r1
     40c:	10 92 17 03 	sts	0x0317, r1
     410:	10 92 18 03 	sts	0x0318, r1
     414:	10 92 19 03 	sts	0x0319, r1
     418:	10 92 1a 03 	sts	0x031A, r1
     41c:	10 92 1b 03 	sts	0x031B, r1
     420:	10 92 1c 03 	sts	0x031C, r1
     424:	10 92 1d 03 	sts	0x031D, r1
     428:	10 92 1e 03 	sts	0x031E, r1
     42c:	10 92 1f 03 	sts	0x031F, r1
     430:	10 92 20 03 	sts	0x0320, r1
     434:	10 92 21 03 	sts	0x0321, r1
     438:	00 93 c2 02 	sts	0x02C2, r16
     43c:	10 93 c3 02 	sts	0x02C3, r17
     440:	20 93 c4 02 	sts	0x02C4, r18
     444:	30 93 c5 02 	sts	0x02C5, r19
     448:	40 93 c6 02 	sts	0x02C6, r20
     44c:	50 93 c7 02 	sts	0x02C7, r21
     450:	60 93 c8 02 	sts	0x02C8, r22
     454:	70 93 c9 02 	sts	0x02C9, r23
     458:	80 93 ca 02 	sts	0x02CA, r24
     45c:	90 93 cb 02 	sts	0x02CB, r25
     460:	a0 93 cc 02 	sts	0x02CC, r26
     464:	b0 93 cd 02 	sts	0x02CD, r27
     468:	10 92 ce 02 	sts	0x02CE, r1
     46c:	10 92 cf 02 	sts	0x02CF, r1
     470:	10 92 d0 02 	sts	0x02D0, r1
     474:	10 92 d1 02 	sts	0x02D1, r1
     478:	10 92 d2 02 	sts	0x02D2, r1
     47c:	10 92 d3 02 	sts	0x02D3, r1
     480:	10 92 d4 02 	sts	0x02D4, r1
     484:	10 92 d5 02 	sts	0x02D5, r1
     488:	10 92 da 02 	sts	0x02DA, r1
     48c:	10 92 db 02 	sts	0x02DB, r1
     490:	10 92 dc 02 	sts	0x02DC, r1
     494:	10 92 dd 02 	sts	0x02DD, r1
     498:	10 92 de 02 	sts	0x02DE, r1
     49c:	10 92 df 02 	sts	0x02DF, r1
     4a0:	10 92 e0 02 	sts	0x02E0, r1
     4a4:	10 92 e1 02 	sts	0x02E1, r1
     4a8:	10 92 e2 02 	sts	0x02E2, r1
     4ac:	10 92 e3 02 	sts	0x02E3, r1
     4b0:	10 92 e4 02 	sts	0x02E4, r1
     4b4:	10 92 e5 02 	sts	0x02E5, r1
     4b8:	10 92 e6 02 	sts	0x02E6, r1
     4bc:	10 92 e7 02 	sts	0x02E7, r1
     4c0:	10 92 e8 02 	sts	0x02E8, r1
     4c4:	10 92 e9 02 	sts	0x02E9, r1
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <_Z7i2cReadhPhh>:
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	c8 2f       	mov	r28, r24
     4e0:	f6 2e       	mov	r15, r22
     4e2:	17 2f       	mov	r17, r23
     4e4:	04 2f       	mov	r16, r20
     4e6:	68 e6       	ldi	r22, 0x68	; 104
     4e8:	89 ed       	ldi	r24, 0xD9	; 217
     4ea:	99 e0       	ldi	r25, 0x09	; 9
     4ec:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire17beginTransmissionEh>
     4f0:	6c 2f       	mov	r22, r28
     4f2:	89 ed       	ldi	r24, 0xD9	; 217
     4f4:	99 e0       	ldi	r25, 0x09	; 9
     4f6:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN7TwoWire5writeEh>
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	89 ed       	ldi	r24, 0xD9	; 217
     4fe:	99 e0       	ldi	r25, 0x09	; 9
     500:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN7TwoWire15endTransmissionEh>
     504:	c8 2f       	mov	r28, r24
     506:	88 23       	and	r24, r24
     508:	79 f0       	breq	.+30     	; 0x528 <_Z7i2cReadhPhh+0x5a>
     50a:	64 eb       	ldi	r22, 0xB4	; 180
     50c:	72 e0       	ldi	r23, 0x02	; 2
     50e:	81 e9       	ldi	r24, 0x91	; 145
     510:	9a e0       	ldi	r25, 0x0A	; 10
     512:	0e 94 92 15 	call	0x2b24	; 0x2b24 <_ZN5Print5printEPK19__FlashStringHelper>
     516:	4a e0       	ldi	r20, 0x0A	; 10
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	6c 2f       	mov	r22, r28
     51c:	81 e9       	ldi	r24, 0x91	; 145
     51e:	9a e0       	ldi	r25, 0x0A	; 10
     520:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <_ZN5Print7printlnEhi>
     524:	8c 2f       	mov	r24, r28
     526:	4c c0       	rjmp	.+152    	; 0x5c0 <_Z7i2cReadhPhh+0xf2>
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	40 2f       	mov	r20, r16
     52c:	68 e6       	ldi	r22, 0x68	; 104
     52e:	89 ed       	ldi	r24, 0xD9	; 217
     530:	99 e0       	ldi	r25, 0x09	; 9
     532:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN7TwoWire11requestFromEhhh>
     536:	00 23       	and	r16, r16
     538:	09 f4       	brne	.+2      	; 0x53c <_Z7i2cReadhPhh+0x6e>
     53a:	3f c0       	rjmp	.+126    	; 0x5ba <_Z7i2cReadhPhh+0xec>
     53c:	cf 2d       	mov	r28, r15
     53e:	d1 2f       	mov	r29, r17
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	89 ed       	ldi	r24, 0xD9	; 217
     544:	99 e0       	ldi	r25, 0x09	; 9
     546:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN7TwoWire9availableEv>
     54a:	89 2b       	or	r24, r25
     54c:	31 f0       	breq	.+12     	; 0x55a <_Z7i2cReadhPhh+0x8c>
     54e:	89 ed       	ldi	r24, 0xD9	; 217
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN7TwoWire4readEv>
     556:	88 83       	st	Y, r24
     558:	2b c0       	rjmp	.+86     	; 0x5b0 <_Z7i2cReadhPhh+0xe2>
     55a:	0e 94 21 18 	call	0x3042	; 0x3042 <micros>
     55e:	6b 01       	movw	r12, r22
     560:	7c 01       	movw	r14, r24
     562:	0e 94 21 18 	call	0x3042	; 0x3042 <micros>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	8c 19       	sub	r24, r12
     56c:	9d 09       	sbc	r25, r13
     56e:	ae 09       	sbc	r26, r14
     570:	bf 09       	sbc	r27, r15
     572:	88 3e       	cpi	r24, 0xE8	; 232
     574:	93 40       	sbci	r25, 0x03	; 3
     576:	a1 05       	cpc	r26, r1
     578:	b1 05       	cpc	r27, r1
     57a:	30 f4       	brcc	.+12     	; 0x588 <_Z7i2cReadhPhh+0xba>
     57c:	89 ed       	ldi	r24, 0xD9	; 217
     57e:	99 e0       	ldi	r25, 0x09	; 9
     580:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN7TwoWire9availableEv>
     584:	89 2b       	or	r24, r25
     586:	69 f3       	breq	.-38     	; 0x562 <_Z7i2cReadhPhh+0x94>
     588:	89 ed       	ldi	r24, 0xD9	; 217
     58a:	99 e0       	ldi	r25, 0x09	; 9
     58c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN7TwoWire9availableEv>
     590:	89 2b       	or	r24, r25
     592:	31 f0       	breq	.+12     	; 0x5a0 <_Z7i2cReadhPhh+0xd2>
     594:	89 ed       	ldi	r24, 0xD9	; 217
     596:	99 e0       	ldi	r25, 0x09	; 9
     598:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN7TwoWire4readEv>
     59c:	88 83       	st	Y, r24
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <_Z7i2cReadhPhh+0xe2>
     5a0:	64 ea       	ldi	r22, 0xA4	; 164
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	81 e9       	ldi	r24, 0x91	; 145
     5a6:	9a e0       	ldi	r25, 0x0A	; 10
     5a8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5ac:	85 e0       	ldi	r24, 0x05	; 5
     5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <_Z7i2cReadhPhh+0xf2>
     5b0:	1f 5f       	subi	r17, 0xFF	; 255
     5b2:	21 96       	adiw	r28, 0x01	; 1
     5b4:	10 13       	cpse	r17, r16
     5b6:	c5 cf       	rjmp	.-118    	; 0x542 <_Z7i2cReadhPhh+0x74>
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <_Z7i2cReadhPhh+0xf0>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <_Z7i2cReadhPhh+0xf2>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	08 95       	ret

000005d2 <_Z5task1Pv>:


//Accel Gyro + Kalman task
void task1(void* p){
     5d2:	2f 92       	push	r2
     5d4:	3f 92       	push	r3
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	e4 97       	sbiw	r28, 0x34	; 52
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
	Serial.println("Enter") ;
     606:	6f e0       	ldi	r22, 0x0F	; 15
     608:	72 e0       	ldi	r23, 0x02	; 2
     60a:	81 e9       	ldi	r24, 0x91	; 145
     60c:	9a e0       	ldi	r25, 0x0A	; 10
     60e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN5Print7printlnEPKc>
	/* Update all the values */
	while (i2cRead(0x3B, i2cData, 14));
     612:	4e e0       	ldi	r20, 0x0E	; 14
     614:	6e e7       	ldi	r22, 0x7E	; 126
     616:	72 e0       	ldi	r23, 0x02	; 2
     618:	8b e3       	ldi	r24, 0x3B	; 59
     61a:	59 df       	rcall	.-334    	; 0x4ce <_Z7i2cReadhPhh>
     61c:	81 11       	cpse	r24, r1
     61e:	f9 cf       	rjmp	.-14     	; 0x612 <_Z5task1Pv+0x40>
	accX = ((i2cData[0] << 8) | i2cData[1]);
     620:	60 91 7e 02 	lds	r22, 0x027E
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	76 2f       	mov	r23, r22
     628:	66 27       	eor	r22, r22
     62a:	80 91 7f 02 	lds	r24, 0x027F
     62e:	68 2b       	or	r22, r24
     630:	88 27       	eor	r24, r24
     632:	77 fd       	sbrc	r23, 7
     634:	80 95       	com	r24
     636:	98 2f       	mov	r25, r24
     638:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     63c:	60 93 be 02 	sts	0x02BE, r22
     640:	70 93 bf 02 	sts	0x02BF, r23
     644:	80 93 c0 02 	sts	0x02C0, r24
     648:	90 93 c1 02 	sts	0x02C1, r25
	accY = ((i2cData[2] << 8) | i2cData[3]);
     64c:	60 91 80 02 	lds	r22, 0x0280
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	76 2f       	mov	r23, r22
     654:	66 27       	eor	r22, r22
     656:	80 91 81 02 	lds	r24, 0x0281
     65a:	68 2b       	or	r22, r24
     65c:	88 27       	eor	r24, r24
     65e:	77 fd       	sbrc	r23, 7
     660:	80 95       	com	r24
     662:	98 2f       	mov	r25, r24
     664:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     668:	60 93 ba 02 	sts	0x02BA, r22
     66c:	70 93 bb 02 	sts	0x02BB, r23
     670:	80 93 bc 02 	sts	0x02BC, r24
     674:	90 93 bd 02 	sts	0x02BD, r25
	accZ = ((i2cData[4] << 8) | i2cData[5]);
     678:	60 91 82 02 	lds	r22, 0x0282
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	76 2f       	mov	r23, r22
     680:	66 27       	eor	r22, r22
     682:	80 91 83 02 	lds	r24, 0x0283
     686:	68 2b       	or	r22, r24
     688:	88 27       	eor	r24, r24
     68a:	77 fd       	sbrc	r23, 7
     68c:	80 95       	com	r24
     68e:	98 2f       	mov	r25, r24
     690:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     694:	60 93 b6 02 	sts	0x02B6, r22
     698:	70 93 b7 02 	sts	0x02B7, r23
     69c:	80 93 b8 02 	sts	0x02B8, r24
     6a0:	90 93 b9 02 	sts	0x02B9, r25
	tempRaw = (i2cData[6] << 8) | i2cData[7];
     6a4:	80 91 84 02 	lds	r24, 0x0284
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	98 2f       	mov	r25, r24
     6ac:	88 27       	eor	r24, r24
     6ae:	20 91 85 02 	lds	r18, 0x0285
     6b2:	82 2b       	or	r24, r18
     6b4:	90 93 a9 02 	sts	0x02A9, r25
     6b8:	80 93 a8 02 	sts	0x02A8, r24
	gyroX = (i2cData[8] << 8) | i2cData[9];
     6bc:	60 91 86 02 	lds	r22, 0x0286
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	76 2f       	mov	r23, r22
     6c4:	66 27       	eor	r22, r22
     6c6:	80 91 87 02 	lds	r24, 0x0287
     6ca:	68 2b       	or	r22, r24
     6cc:	88 27       	eor	r24, r24
     6ce:	77 fd       	sbrc	r23, 7
     6d0:	80 95       	com	r24
     6d2:	98 2f       	mov	r25, r24
     6d4:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     6d8:	60 93 b2 02 	sts	0x02B2, r22
     6dc:	70 93 b3 02 	sts	0x02B3, r23
     6e0:	80 93 b4 02 	sts	0x02B4, r24
     6e4:	90 93 b5 02 	sts	0x02B5, r25
	gyroY = (i2cData[10] << 8) | i2cData[11];
     6e8:	60 91 88 02 	lds	r22, 0x0288
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	76 2f       	mov	r23, r22
     6f0:	66 27       	eor	r22, r22
     6f2:	80 91 89 02 	lds	r24, 0x0289
     6f6:	68 2b       	or	r22, r24
     6f8:	88 27       	eor	r24, r24
     6fa:	77 fd       	sbrc	r23, 7
     6fc:	80 95       	com	r24
     6fe:	98 2f       	mov	r25, r24
     700:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     704:	60 93 ae 02 	sts	0x02AE, r22
     708:	70 93 af 02 	sts	0x02AF, r23
     70c:	80 93 b0 02 	sts	0x02B0, r24
     710:	90 93 b1 02 	sts	0x02B1, r25
	gyroZ = (i2cData[12] << 8) | i2cData[13];
     714:	60 91 8a 02 	lds	r22, 0x028A
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	76 2f       	mov	r23, r22
     71c:	66 27       	eor	r22, r22
     71e:	80 91 8b 02 	lds	r24, 0x028B
     722:	68 2b       	or	r22, r24
     724:	88 27       	eor	r24, r24
     726:	77 fd       	sbrc	r23, 7
     728:	80 95       	com	r24
     72a:	98 2f       	mov	r25, r24
     72c:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     730:	60 93 aa 02 	sts	0x02AA, r22
     734:	70 93 ab 02 	sts	0x02AB, r23
     738:	80 93 ac 02 	sts	0x02AC, r24
     73c:	90 93 ad 02 	sts	0x02AD, r25

	double dt = (double)(micros() - timer) / 1000000; // Calculate delta time
     740:	0e 94 21 18 	call	0x3042	; 0x3042 <micros>
     744:	00 91 8c 02 	lds	r16, 0x028C
     748:	10 91 8d 02 	lds	r17, 0x028D
     74c:	20 91 8e 02 	lds	r18, 0x028E
     750:	30 91 8f 02 	lds	r19, 0x028F
     754:	60 1b       	sub	r22, r16
     756:	71 0b       	sbc	r23, r17
     758:	82 0b       	sbc	r24, r18
     75a:	93 0b       	sbc	r25, r19
     75c:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatunsisf>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	34 e2       	ldi	r19, 0x24	; 36
     764:	44 e7       	ldi	r20, 0x74	; 116
     766:	59 e4       	ldi	r21, 0x49	; 73
     768:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     76c:	6d 83       	std	Y+5, r22	; 0x05
     76e:	7e 83       	std	Y+6, r23	; 0x06
     770:	8f 83       	std	Y+7, r24	; 0x07
     772:	98 87       	std	Y+8, r25	; 0x08
	timer = micros();
     774:	0e 94 21 18 	call	0x3042	; 0x3042 <micros>
     778:	60 93 8c 02 	sts	0x028C, r22
     77c:	70 93 8d 02 	sts	0x028D, r23
     780:	80 93 8e 02 	sts	0x028E, r24
     784:	90 93 8f 02 	sts	0x028F, r25

	// Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
	// atan2 outputs the value of -? to ? (radians) - see http://en.wikipedia.org/wiki/Atan2
	// It is then converted from radians to degrees
	#ifdef RESTRICT_PITCH // Eq. 25 and 26
	double roll  = atan2(accY, accZ) * RAD_TO_DEG;
     788:	c0 90 b6 02 	lds	r12, 0x02B6
     78c:	d0 90 b7 02 	lds	r13, 0x02B7
     790:	e0 90 b8 02 	lds	r14, 0x02B8
     794:	f0 90 b9 02 	lds	r15, 0x02B9
     798:	80 90 ba 02 	lds	r8, 0x02BA
     79c:	90 90 bb 02 	lds	r9, 0x02BB
     7a0:	a0 90 bc 02 	lds	r10, 0x02BC
     7a4:	b0 90 bd 02 	lds	r11, 0x02BD
     7a8:	a7 01       	movw	r20, r14
     7aa:	96 01       	movw	r18, r12
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 bb 18 	call	0x3176	; 0x3176 <atan2>
     7b4:	21 ee       	ldi	r18, 0xE1	; 225
     7b6:	3e e2       	ldi	r19, 0x2E	; 46
     7b8:	45 e6       	ldi	r20, 0x65	; 101
     7ba:	52 e4       	ldi	r21, 0x42	; 66
     7bc:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     7c0:	69 8b       	std	Y+17, r22	; 0x11
     7c2:	7a 8b       	std	Y+18, r23	; 0x12
     7c4:	8b 8b       	std	Y+19, r24	; 0x13
     7c6:	9c 8b       	std	Y+20, r25	; 0x14
	double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
     7c8:	a5 01       	movw	r20, r10
     7ca:	94 01       	movw	r18, r8
     7cc:	c5 01       	movw	r24, r10
     7ce:	b4 01       	movw	r22, r8
     7d0:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     7d4:	4b 01       	movw	r8, r22
     7d6:	5c 01       	movw	r10, r24
     7d8:	a7 01       	movw	r20, r14
     7da:	96 01       	movw	r18, r12
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	c5 01       	movw	r24, r10
     7ea:	b4 01       	movw	r22, r8
     7ec:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     7f0:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <sqrt>
     7f4:	9b 01       	movw	r18, r22
     7f6:	ac 01       	movw	r20, r24
     7f8:	80 91 be 02 	lds	r24, 0x02BE
     7fc:	90 91 bf 02 	lds	r25, 0x02BF
     800:	a0 91 c0 02 	lds	r26, 0x02C0
     804:	b0 91 c1 02 	lds	r27, 0x02C1
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	90 58       	subi	r25, 0x80	; 128
     80e:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     812:	0e 94 e6 18 	call	0x31cc	; 0x31cc <atan>
     816:	21 ee       	ldi	r18, 0xE1	; 225
     818:	3e e2       	ldi	r19, 0x2E	; 46
     81a:	45 e6       	ldi	r20, 0x65	; 101
     81c:	52 e4       	ldi	r21, 0x42	; 66
     81e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     822:	6d a3       	std	Y+37, r22	; 0x25
     824:	7e a3       	std	Y+38, r23	; 0x26
     826:	8f a3       	std	Y+39, r24	; 0x27
     828:	98 a7       	std	Y+40, r25	; 0x28
	#else // Eq. 28 and 29
	double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
	double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
	#endif

	double gyroXrate = gyroX / 131.0; // Convert to deg/s
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	43 e0       	ldi	r20, 0x03	; 3
     830:	53 e4       	ldi	r21, 0x43	; 67
     832:	60 91 b2 02 	lds	r22, 0x02B2
     836:	70 91 b3 02 	lds	r23, 0x02B3
     83a:	80 91 b4 02 	lds	r24, 0x02B4
     83e:	90 91 b5 02 	lds	r25, 0x02B5
     842:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     846:	6d a7       	std	Y+45, r22	; 0x2d
     848:	7e a7       	std	Y+46, r23	; 0x2e
     84a:	8f a7       	std	Y+47, r24	; 0x2f
     84c:	98 ab       	std	Y+48, r25	; 0x30
	double gyroYrate = gyroY / 131.0; // Convert to deg/s
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	43 e0       	ldi	r20, 0x03	; 3
     854:	53 e4       	ldi	r21, 0x43	; 67
     856:	60 91 ae 02 	lds	r22, 0x02AE
     85a:	70 91 af 02 	lds	r23, 0x02AF
     85e:	80 91 b0 02 	lds	r24, 0x02B0
     862:	90 91 b1 02 	lds	r25, 0x02B1
     866:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     86a:	6d 8f       	std	Y+29, r22	; 0x1d
     86c:	7e 8f       	std	Y+30, r23	; 0x1e
     86e:	8f 8f       	std	Y+31, r24	; 0x1f
     870:	98 a3       	std	Y+32, r25	; 0x20

	#ifdef RESTRICT_PITCH
	// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
	if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	44 eb       	ldi	r20, 0xB4	; 180
     878:	52 ec       	ldi	r21, 0xC2	; 194
     87a:	69 89       	ldd	r22, Y+17	; 0x11
     87c:	7a 89       	ldd	r23, Y+18	; 0x12
     87e:	8b 89       	ldd	r24, Y+19	; 0x13
     880:	9c 89       	ldd	r25, Y+20	; 0x14
     882:	0e 94 0e 19 	call	0x321c	; 0x321c <__cmpsf2>
     886:	88 23       	and	r24, r24
     888:	84 f4       	brge	.+32     	; 0x8aa <_Z5task1Pv+0x2d8>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	44 eb       	ldi	r20, 0xB4	; 180
     890:	52 e4       	ldi	r21, 0x42	; 66
     892:	60 91 94 02 	lds	r22, 0x0294
     896:	70 91 95 02 	lds	r23, 0x0295
     89a:	80 91 96 02 	lds	r24, 0x0296
     89e:	90 91 97 02 	lds	r25, 0x0297
     8a2:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	e4 f0       	brlt	.+56     	; 0x8e2 <_Z5task1Pv+0x310>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	44 eb       	ldi	r20, 0xB4	; 180
     8b0:	52 e4       	ldi	r21, 0x42	; 66
     8b2:	69 89       	ldd	r22, Y+17	; 0x11
     8b4:	7a 89       	ldd	r23, Y+18	; 0x12
     8b6:	8b 89       	ldd	r24, Y+19	; 0x13
     8b8:	9c 89       	ldd	r25, Y+20	; 0x14
     8ba:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
     8be:	18 16       	cp	r1, r24
     8c0:	ac f5       	brge	.+106    	; 0x92c <_Z5task1Pv+0x35a>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	44 eb       	ldi	r20, 0xB4	; 180
     8c8:	52 ec       	ldi	r21, 0xC2	; 194
     8ca:	60 91 94 02 	lds	r22, 0x0294
     8ce:	70 91 95 02 	lds	r23, 0x0295
     8d2:	80 91 96 02 	lds	r24, 0x0296
     8d6:	90 91 97 02 	lds	r25, 0x0297
     8da:	0e 94 0e 19 	call	0x321c	; 0x321c <__cmpsf2>
     8de:	88 23       	and	r24, r24
     8e0:	2c f5       	brge	.+74     	; 0x92c <_Z5task1Pv+0x35a>
        P[1][0] -= K[1] * P[0][0];
        P[1][1] -= K[1] * P[0][1];

        return angle;
    };
    void setAngle(double newAngle) { angle = newAngle; }; // Used to set angle, this should be set as the starting angle
     8e2:	89 89       	ldd	r24, Y+17	; 0x11
     8e4:	9a 89       	ldd	r25, Y+18	; 0x12
     8e6:	ab 89       	ldd	r26, Y+19	; 0x13
     8e8:	bc 89       	ldd	r27, Y+20	; 0x14
     8ea:	80 93 06 03 	sts	0x0306, r24
     8ee:	90 93 07 03 	sts	0x0307, r25
     8f2:	a0 93 08 03 	sts	0x0308, r26
     8f6:	b0 93 09 03 	sts	0x0309, r27
		kalmanX.setAngle(roll);
		compAngleX = roll;
     8fa:	80 93 9c 02 	sts	0x029C, r24
     8fe:	90 93 9d 02 	sts	0x029D, r25
     902:	a0 93 9e 02 	sts	0x029E, r26
     906:	b0 93 9f 02 	sts	0x029F, r27
		kalAngleX = roll;
     90a:	80 93 94 02 	sts	0x0294, r24
     90e:	90 93 95 02 	sts	0x0295, r25
     912:	a0 93 96 02 	sts	0x0296, r26
     916:	b0 93 97 02 	sts	0x0297, r27
		gyroXangle = roll;
     91a:	80 93 a4 02 	sts	0x02A4, r24
     91e:	90 93 a5 02 	sts	0x02A5, r25
     922:	a0 93 a6 02 	sts	0x02A6, r26
     926:	b0 93 a7 02 	sts	0x02A7, r27
     92a:	90 c1       	rjmp	.+800    	; 0xc4c <_Z5task1Pv+0x67a>
        // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

        // Discrete Kalman filter time update equations - Time Update ("Predict")
        // Update xhat - Project the state ahead
        /* Step 1 */
        rate = newRate - bias;
     92c:	0a e0       	ldi	r16, 0x0A	; 10
     92e:	13 e0       	ldi	r17, 0x03	; 3
     930:	d8 01       	movw	r26, r16
     932:	8d 91       	ld	r24, X+
     934:	9d 91       	ld	r25, X+
     936:	0d 90       	ld	r0, X+
     938:	bc 91       	ld	r27, X
     93a:	a0 2d       	mov	r26, r0
     93c:	89 87       	std	Y+9, r24	; 0x09
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	ab 87       	std	Y+11, r26	; 0x0b
     942:	bc 87       	std	Y+12, r27	; 0x0c
     944:	9c 01       	movw	r18, r24
     946:	ad 01       	movw	r20, r26
     948:	6d a5       	ldd	r22, Y+45	; 0x2d
     94a:	7e a5       	ldd	r23, Y+46	; 0x2e
     94c:	8f a5       	ldd	r24, Y+47	; 0x2f
     94e:	98 a9       	ldd	r25, Y+48	; 0x30
     950:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
     958:	60 93 0e 03 	sts	0x030E, r22
     95c:	70 93 0f 03 	sts	0x030F, r23
     960:	80 93 10 03 	sts	0x0310, r24
     964:	90 93 11 03 	sts	0x0311, r25
        angle += dt * rate;
     968:	6d 81       	ldd	r22, Y+5	; 0x05
     96a:	7e 81       	ldd	r23, Y+6	; 0x06
     96c:	8f 81       	ldd	r24, Y+7	; 0x07
     96e:	98 85       	ldd	r25, Y+8	; 0x08
     970:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     974:	e6 e0       	ldi	r30, 0x06	; 6
     976:	f3 e0       	ldi	r31, 0x03	; 3
     978:	20 81       	ld	r18, Z
     97a:	31 81       	ldd	r19, Z+1	; 0x01
     97c:	42 81       	ldd	r20, Z+2	; 0x02
     97e:	53 81       	ldd	r21, Z+3	; 0x03
     980:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     984:	6d 8b       	std	Y+21, r22	; 0x15
     986:	7e 8b       	std	Y+22, r23	; 0x16
     988:	8f 8b       	std	Y+23, r24	; 0x17
     98a:	98 8f       	std	Y+24, r25	; 0x18

        // Update estimation error covariance - Project the error covariance ahead
        /* Step 2 */
        P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     98c:	ae e1       	ldi	r26, 0x1E	; 30
     98e:	b3 e0       	ldi	r27, 0x03	; 3
     990:	8d 91       	ld	r24, X+
     992:	9d 91       	ld	r25, X+
     994:	0d 90       	ld	r0, X+
     996:	bc 91       	ld	r27, X
     998:	a0 2d       	mov	r26, r0
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	ab 83       	std	Y+3, r26	; 0x03
     9a0:	bc 83       	std	Y+4, r27	; 0x04
     9a2:	9c 01       	movw	r18, r24
     9a4:	ad 01       	movw	r20, r26
     9a6:	6d 81       	ldd	r22, Y+5	; 0x05
     9a8:	7e 81       	ldd	r23, Y+6	; 0x06
     9aa:	8f 81       	ldd	r24, Y+7	; 0x07
     9ac:	98 85       	ldd	r25, Y+8	; 0x08
     9ae:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     9b2:	6b 01       	movw	r12, r22
     9b4:	7c 01       	movw	r14, r24
     9b6:	e6 e1       	ldi	r30, 0x16	; 22
     9b8:	f3 e0       	ldi	r31, 0x03	; 3
     9ba:	40 80       	ld	r4, Z
     9bc:	51 80       	ldd	r5, Z+1	; 0x01
     9be:	62 80       	ldd	r6, Z+2	; 0x02
     9c0:	73 80       	ldd	r7, Z+3	; 0x03
     9c2:	aa e1       	ldi	r26, 0x1A	; 26
     9c4:	b3 e0       	ldi	r27, 0x03	; 3
     9c6:	8d 91       	ld	r24, X+
     9c8:	9d 91       	ld	r25, X+
     9ca:	0d 90       	ld	r0, X+
     9cc:	bc 91       	ld	r27, X
     9ce:	a0 2d       	mov	r26, r0
     9d0:	8d 87       	std	Y+13, r24	; 0x0d
     9d2:	9e 87       	std	Y+14, r25	; 0x0e
     9d4:	af 87       	std	Y+15, r26	; 0x0f
     9d6:	b8 8b       	std	Y+16, r27	; 0x10
     9d8:	0f 2e       	mov	r0, r31
     9da:	f2 e1       	ldi	r31, 0x12	; 18
     9dc:	2f 2e       	mov	r2, r31
     9de:	f3 e0       	ldi	r31, 0x03	; 3
     9e0:	3f 2e       	mov	r3, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	a3 01       	movw	r20, r6
     9e6:	92 01       	movw	r18, r4
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     9f0:	2d 85       	ldd	r18, Y+13	; 0x0d
     9f2:	3e 85       	ldd	r19, Y+14	; 0x0e
     9f4:	4f 85       	ldd	r20, Y+15	; 0x0f
     9f6:	58 89       	ldd	r21, Y+16	; 0x10
     9f8:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     9fc:	20 91 fa 02 	lds	r18, 0x02FA
     a00:	30 91 fb 02 	lds	r19, 0x02FB
     a04:	40 91 fc 02 	lds	r20, 0x02FC
     a08:	50 91 fd 02 	lds	r21, 0x02FD
     a0c:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	6d 81       	ldd	r22, Y+5	; 0x05
     a16:	7e 81       	ldd	r23, Y+6	; 0x06
     a18:	8f 81       	ldd	r24, Y+7	; 0x07
     a1a:	98 85       	ldd	r25, Y+8	; 0x08
     a1c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     a20:	f1 01       	movw	r30, r2
     a22:	20 81       	ld	r18, Z
     a24:	31 81       	ldd	r19, Z+1	; 0x01
     a26:	42 81       	ldd	r20, Z+2	; 0x02
     a28:	53 81       	ldd	r21, Z+3	; 0x03
     a2a:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
        P[0][1] -= dt * P[1][1];
     a32:	a7 01       	movw	r20, r14
     a34:	96 01       	movw	r18, r12
     a36:	c3 01       	movw	r24, r6
     a38:	b2 01       	movw	r22, r4
     a3a:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     a3e:	69 8f       	std	Y+25, r22	; 0x19
     a40:	7a 8f       	std	Y+26, r23	; 0x1a
     a42:	8b 8f       	std	Y+27, r24	; 0x1b
     a44:	9c 8f       	std	Y+28, r25	; 0x1c
        P[1][0] -= dt * P[1][1];
     a46:	a7 01       	movw	r20, r14
     a48:	96 01       	movw	r18, r12
     a4a:	6d 85       	ldd	r22, Y+13	; 0x0d
     a4c:	7e 85       	ldd	r23, Y+14	; 0x0e
     a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a50:	98 89       	ldd	r25, Y+16	; 0x10
     a52:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     a56:	6d 87       	std	Y+13, r22	; 0x0d
     a58:	7e 87       	std	Y+14, r23	; 0x0e
     a5a:	8f 87       	std	Y+15, r24	; 0x0f
     a5c:	98 8b       	std	Y+16, r25	; 0x10
        P[1][1] += Q_bias * dt;
     a5e:	20 91 fe 02 	lds	r18, 0x02FE
     a62:	30 91 ff 02 	lds	r19, 0x02FF
     a66:	40 91 00 03 	lds	r20, 0x0300
     a6a:	50 91 01 03 	lds	r21, 0x0301
     a6e:	6d 81       	ldd	r22, Y+5	; 0x05
     a70:	7e 81       	ldd	r23, Y+6	; 0x06
     a72:	8f 81       	ldd	r24, Y+7	; 0x07
     a74:	98 85       	ldd	r25, Y+8	; 0x08
     a76:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	69 81       	ldd	r22, Y+1	; 0x01
     a80:	7a 81       	ldd	r23, Y+2	; 0x02
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     a8a:	69 a3       	std	Y+33, r22	; 0x21
     a8c:	7a a3       	std	Y+34, r23	; 0x22
     a8e:	8b a3       	std	Y+35, r24	; 0x23
     a90:	9c a3       	std	Y+36, r25	; 0x24

        // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
        // Calculate Kalman gain - Compute the Kalman gain
        /* Step 4 */
        S = P[0][0] + R_measure;
     a92:	20 91 02 03 	lds	r18, 0x0302
     a96:	30 91 03 03 	lds	r19, 0x0303
     a9a:	40 91 04 03 	lds	r20, 0x0304
     a9e:	50 91 05 03 	lds	r21, 0x0305
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
     aae:	60 93 2e 03 	sts	0x032E, r22
     ab2:	70 93 2f 03 	sts	0x032F, r23
     ab6:	80 93 30 03 	sts	0x0330, r24
     aba:	90 93 31 03 	sts	0x0331, r25
        /* Step 5 */
        K[0] = P[0][0] / S;
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     aca:	2b 01       	movw	r4, r22
     acc:	3c 01       	movw	r6, r24
     ace:	60 93 22 03 	sts	0x0322, r22
     ad2:	70 93 23 03 	sts	0x0323, r23
     ad6:	80 93 24 03 	sts	0x0324, r24
     ada:	90 93 25 03 	sts	0x0325, r25
        K[1] = P[1][0] / S;
     ade:	a7 01       	movw	r20, r14
     ae0:	96 01       	movw	r18, r12
     ae2:	6d 85       	ldd	r22, Y+13	; 0x0d
     ae4:	7e 85       	ldd	r23, Y+14	; 0x0e
     ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae8:	98 89       	ldd	r25, Y+16	; 0x10
     aea:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	60 93 26 03 	sts	0x0326, r22
     af6:	70 93 27 03 	sts	0x0327, r23
     afa:	80 93 28 03 	sts	0x0328, r24
     afe:	90 93 29 03 	sts	0x0329, r25

        // Calculate angle and bias - Update estimate with measurement zk (newAngle)
        /* Step 3 */
        y = newAngle - angle;
     b02:	2d 89       	ldd	r18, Y+21	; 0x15
     b04:	3e 89       	ldd	r19, Y+22	; 0x16
     b06:	4f 89       	ldd	r20, Y+23	; 0x17
     b08:	58 8d       	ldd	r21, Y+24	; 0x18
     b0a:	69 89       	ldd	r22, Y+17	; 0x11
     b0c:	7a 89       	ldd	r23, Y+18	; 0x12
     b0e:	8b 89       	ldd	r24, Y+19	; 0x13
     b10:	9c 89       	ldd	r25, Y+20	; 0x14
     b12:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     b16:	69 83       	std	Y+1, r22	; 0x01
     b18:	7a 83       	std	Y+2, r23	; 0x02
     b1a:	8b 83       	std	Y+3, r24	; 0x03
     b1c:	9c 83       	std	Y+4, r25	; 0x04
     b1e:	60 93 2a 03 	sts	0x032A, r22
     b22:	70 93 2b 03 	sts	0x032B, r23
     b26:	80 93 2c 03 	sts	0x032C, r24
     b2a:	90 93 2d 03 	sts	0x032D, r25
        /* Step 6 */
        angle += K[0] * y;
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c3 01       	movw	r24, r6
     b34:	b2 01       	movw	r22, r4
     b36:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	6d 89       	ldd	r22, Y+21	; 0x15
     b40:	7e 89       	ldd	r23, Y+22	; 0x16
     b42:	8f 89       	ldd	r24, Y+23	; 0x17
     b44:	98 8d       	ldd	r25, Y+24	; 0x18
     b46:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     b4a:	6d 8b       	std	Y+21, r22	; 0x15
     b4c:	7e 8b       	std	Y+22, r23	; 0x16
     b4e:	8f 8b       	std	Y+23, r24	; 0x17
     b50:	98 8f       	std	Y+24, r25	; 0x18
     b52:	a6 e0       	ldi	r26, 0x06	; 6
     b54:	b3 e0       	ldi	r27, 0x03	; 3
     b56:	6d 93       	st	X+, r22
     b58:	7d 93       	st	X+, r23
     b5a:	8d 93       	st	X+, r24
     b5c:	9c 93       	st	X, r25
     b5e:	13 97       	sbiw	r26, 0x03	; 3
        bias += K[1] * y;
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	4b 81       	ldd	r20, Y+3	; 0x03
     b66:	5c 81       	ldd	r21, Y+4	; 0x04
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     b70:	9b 01       	movw	r18, r22
     b72:	ac 01       	movw	r20, r24
     b74:	69 85       	ldd	r22, Y+9	; 0x09
     b76:	7a 85       	ldd	r23, Y+10	; 0x0a
     b78:	8b 85       	ldd	r24, Y+11	; 0x0b
     b7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b7c:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     b80:	f8 01       	movw	r30, r16
     b82:	60 83       	st	Z, r22
     b84:	71 83       	std	Z+1, r23	; 0x01
     b86:	82 83       	std	Z+2, r24	; 0x02
     b88:	93 83       	std	Z+3, r25	; 0x03

        // Calculate estimation error covariance - Update the error covariance
        /* Step 7 */
        P[0][0] -= K[0] * P[0][0];
     b8a:	a3 01       	movw	r20, r6
     b8c:	92 01       	movw	r18, r4
     b8e:	c5 01       	movw	r24, r10
     b90:	b4 01       	movw	r22, r8
     b92:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c5 01       	movw	r24, r10
     b9c:	b4 01       	movw	r22, r8
     b9e:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
     ba6:	d1 01       	movw	r26, r2
     ba8:	6d 93       	st	X+, r22
     baa:	7d 93       	st	X+, r23
     bac:	8d 93       	st	X+, r24
     bae:	9c 93       	st	X, r25
     bb0:	13 97       	sbiw	r26, 0x03	; 3
        P[0][1] -= K[0] * P[0][1];
     bb2:	a3 01       	movw	r20, r6
     bb4:	92 01       	movw	r18, r4
     bb6:	69 8d       	ldd	r22, Y+25	; 0x19
     bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbe:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	69 8d       	ldd	r22, Y+25	; 0x19
     bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bce:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     bd2:	2b 01       	movw	r4, r22
     bd4:	3c 01       	movw	r6, r24
     bd6:	e6 e1       	ldi	r30, 0x16	; 22
     bd8:	f3 e0       	ldi	r31, 0x03	; 3
     bda:	60 83       	st	Z, r22
     bdc:	71 83       	std	Z+1, r23	; 0x01
     bde:	82 83       	std	Z+2, r24	; 0x02
     be0:	93 83       	std	Z+3, r25	; 0x03
        P[1][0] -= K[1] * P[0][0];
     be2:	a5 01       	movw	r20, r10
     be4:	94 01       	movw	r18, r8
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	6d 85       	ldd	r22, Y+13	; 0x0d
     bf4:	7e 85       	ldd	r23, Y+14	; 0x0e
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	98 89       	ldd	r25, Y+16	; 0x10
     bfa:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     bfe:	aa e1       	ldi	r26, 0x1A	; 26
     c00:	b3 e0       	ldi	r27, 0x03	; 3
     c02:	6d 93       	st	X+, r22
     c04:	7d 93       	st	X+, r23
     c06:	8d 93       	st	X+, r24
     c08:	9c 93       	st	X, r25
     c0a:	13 97       	sbiw	r26, 0x03	; 3
        P[1][1] -= K[1] * P[0][1];
     c0c:	a3 01       	movw	r20, r6
     c0e:	92 01       	movw	r18, r4
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	69 a1       	ldd	r22, Y+33	; 0x21
     c1e:	7a a1       	ldd	r23, Y+34	; 0x22
     c20:	8b a1       	ldd	r24, Y+35	; 0x23
     c22:	9c a1       	ldd	r25, Y+36	; 0x24
     c24:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     c28:	ee e1       	ldi	r30, 0x1E	; 30
     c2a:	f3 e0       	ldi	r31, 0x03	; 3
     c2c:	60 83       	st	Z, r22
     c2e:	71 83       	std	Z+1, r23	; 0x01
     c30:	82 83       	std	Z+2, r24	; 0x02
     c32:	93 83       	std	Z+3, r25	; 0x03
	} else
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
     c34:	8d 89       	ldd	r24, Y+21	; 0x15
     c36:	9e 89       	ldd	r25, Y+22	; 0x16
     c38:	af 89       	ldd	r26, Y+23	; 0x17
     c3a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c3c:	80 93 94 02 	sts	0x0294, r24
     c40:	90 93 95 02 	sts	0x0295, r25
     c44:	a0 93 96 02 	sts	0x0296, r26
     c48:	b0 93 97 02 	sts	0x0297, r27

	if (abs(kalAngleX) > 90)
     c4c:	80 91 94 02 	lds	r24, 0x0294
     c50:	90 91 95 02 	lds	r25, 0x0295
     c54:	a0 91 96 02 	lds	r26, 0x0296
     c58:	b0 91 97 02 	lds	r27, 0x0297
     c5c:	8d 87       	std	Y+13, r24	; 0x0d
     c5e:	9e 87       	std	Y+14, r25	; 0x0e
     c60:	af 87       	std	Y+15, r26	; 0x0f
     c62:	b8 8b       	std	Y+16, r27	; 0x10
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	a9 01       	movw	r20, r18
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
     c72:	18 16       	cp	r1, r24
     c74:	7c f4       	brge	.+30     	; 0xc94 <_Z5task1Pv+0x6c2>
     c76:	11 e0       	ldi	r17, 0x01	; 1
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	44 eb       	ldi	r20, 0xB4	; 180
     c7e:	52 e4       	ldi	r21, 0x42	; 66
     c80:	6d 85       	ldd	r22, Y+13	; 0x0d
     c82:	7e 85       	ldd	r23, Y+14	; 0x0e
     c84:	8f 85       	ldd	r24, Y+15	; 0x0f
     c86:	98 89       	ldd	r25, Y+16	; 0x10
     c88:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
     c8c:	18 16       	cp	r1, r24
     c8e:	84 f0       	brlt	.+32     	; 0xcb0 <_Z5task1Pv+0x6de>
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	0e c0       	rjmp	.+28     	; 0xcb0 <_Z5task1Pv+0x6de>
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	44 eb       	ldi	r20, 0xB4	; 180
     c9a:	52 ec       	ldi	r21, 0xC2	; 194
     c9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca2:	98 89       	ldd	r25, Y+16	; 0x10
     ca4:	0e 94 0e 19 	call	0x321c	; 0x321c <__cmpsf2>
     ca8:	18 2f       	mov	r17, r24
     caa:	11 1f       	adc	r17, r17
     cac:	11 27       	eor	r17, r17
     cae:	11 1f       	adc	r17, r17
     cb0:	11 23       	and	r17, r17
     cb2:	49 f0       	breq	.+18     	; 0xcc6 <_Z5task1Pv+0x6f4>
	gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
     cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cb8:	af 8d       	ldd	r26, Y+31	; 0x1f
     cba:	b8 a1       	ldd	r27, Y+32	; 0x20
     cbc:	b0 58       	subi	r27, 0x80	; 128
     cbe:	8d 8f       	std	Y+29, r24	; 0x1d
     cc0:	9e 8f       	std	Y+30, r25	; 0x1e
     cc2:	af 8f       	std	Y+31, r26	; 0x1f
     cc4:	b8 a3       	std	Y+32, r27	; 0x20
        // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

        // Discrete Kalman filter time update equations - Time Update ("Predict")
        // Update xhat - Project the state ahead
        /* Step 1 */
        rate = newRate - bias;
     cc6:	02 ed       	ldi	r16, 0xD2	; 210
     cc8:	12 e0       	ldi	r17, 0x02	; 2
     cca:	d8 01       	movw	r26, r16
     ccc:	8d 91       	ld	r24, X+
     cce:	9d 91       	ld	r25, X+
     cd0:	0d 90       	ld	r0, X+
     cd2:	bc 91       	ld	r27, X
     cd4:	a0 2d       	mov	r26, r0
     cd6:	8d 8b       	std	Y+21, r24	; 0x15
     cd8:	9e 8b       	std	Y+22, r25	; 0x16
     cda:	af 8b       	std	Y+23, r26	; 0x17
     cdc:	b8 8f       	std	Y+24, r27	; 0x18
     cde:	9c 01       	movw	r18, r24
     ce0:	ad 01       	movw	r20, r26
     ce2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ce4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ce6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ce8:	98 a1       	ldd	r25, Y+32	; 0x20
     cea:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	60 93 d6 02 	sts	0x02D6, r22
     cf6:	70 93 d7 02 	sts	0x02D7, r23
     cfa:	80 93 d8 02 	sts	0x02D8, r24
     cfe:	90 93 d9 02 	sts	0x02D9, r25
        angle += dt * rate;
     d02:	6d 81       	ldd	r22, Y+5	; 0x05
     d04:	7e 81       	ldd	r23, Y+6	; 0x06
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	98 85       	ldd	r25, Y+8	; 0x08
     d0a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     d0e:	ee ec       	ldi	r30, 0xCE	; 206
     d10:	f2 e0       	ldi	r31, 0x02	; 2
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	42 81       	ldd	r20, Z+2	; 0x02
     d18:	53 81       	ldd	r21, Z+3	; 0x03
     d1a:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     d1e:	69 8f       	std	Y+25, r22	; 0x19
     d20:	7a 8f       	std	Y+26, r23	; 0x1a
     d22:	8b 8f       	std	Y+27, r24	; 0x1b
     d24:	9c 8f       	std	Y+28, r25	; 0x1c

        // Update estimation error covariance - Project the error covariance ahead
        /* Step 2 */
        P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     d26:	a6 ee       	ldi	r26, 0xE6	; 230
     d28:	b2 e0       	ldi	r27, 0x02	; 2
     d2a:	8d 91       	ld	r24, X+
     d2c:	9d 91       	ld	r25, X+
     d2e:	0d 90       	ld	r0, X+
     d30:	bc 91       	ld	r27, X
     d32:	a0 2d       	mov	r26, r0
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	ab 83       	std	Y+3, r26	; 0x03
     d3a:	bc 83       	std	Y+4, r27	; 0x04
     d3c:	9c 01       	movw	r18, r24
     d3e:	ad 01       	movw	r20, r26
     d40:	6d 81       	ldd	r22, Y+5	; 0x05
     d42:	7e 81       	ldd	r23, Y+6	; 0x06
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     d4c:	6b 01       	movw	r12, r22
     d4e:	7c 01       	movw	r14, r24
     d50:	ee ed       	ldi	r30, 0xDE	; 222
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	40 80       	ld	r4, Z
     d56:	51 80       	ldd	r5, Z+1	; 0x01
     d58:	62 80       	ldd	r6, Z+2	; 0x02
     d5a:	73 80       	ldd	r7, Z+3	; 0x03
     d5c:	a2 ee       	ldi	r26, 0xE2	; 226
     d5e:	b2 e0       	ldi	r27, 0x02	; 2
     d60:	8d 91       	ld	r24, X+
     d62:	9d 91       	ld	r25, X+
     d64:	0d 90       	ld	r0, X+
     d66:	bc 91       	ld	r27, X
     d68:	a0 2d       	mov	r26, r0
     d6a:	89 87       	std	Y+9, r24	; 0x09
     d6c:	9a 87       	std	Y+10, r25	; 0x0a
     d6e:	ab 87       	std	Y+11, r26	; 0x0b
     d70:	bc 87       	std	Y+12, r27	; 0x0c
     d72:	0f 2e       	mov	r0, r31
     d74:	fa ed       	ldi	r31, 0xDA	; 218
     d76:	2f 2e       	mov	r2, r31
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	3f 2e       	mov	r3, r31
     d7c:	f0 2d       	mov	r31, r0
     d7e:	a3 01       	movw	r20, r6
     d80:	92 01       	movw	r18, r4
     d82:	c7 01       	movw	r24, r14
     d84:	b6 01       	movw	r22, r12
     d86:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     d8a:	29 85       	ldd	r18, Y+9	; 0x09
     d8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d90:	5c 85       	ldd	r21, Y+12	; 0x0c
     d92:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     d96:	20 91 c2 02 	lds	r18, 0x02C2
     d9a:	30 91 c3 02 	lds	r19, 0x02C3
     d9e:	40 91 c4 02 	lds	r20, 0x02C4
     da2:	50 91 c5 02 	lds	r21, 0x02C5
     da6:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	6d 81       	ldd	r22, Y+5	; 0x05
     db0:	7e 81       	ldd	r23, Y+6	; 0x06
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
     db4:	98 85       	ldd	r25, Y+8	; 0x08
     db6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     dba:	f1 01       	movw	r30, r2
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	42 81       	ldd	r20, Z+2	; 0x02
     dc2:	53 81       	ldd	r21, Z+3	; 0x03
     dc4:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     dc8:	4b 01       	movw	r8, r22
     dca:	5c 01       	movw	r10, r24
        P[0][1] -= dt * P[1][1];
     dcc:	a7 01       	movw	r20, r14
     dce:	96 01       	movw	r18, r12
     dd0:	c3 01       	movw	r24, r6
     dd2:	b2 01       	movw	r22, r4
     dd4:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     dd8:	69 a3       	std	Y+33, r22	; 0x21
     dda:	7a a3       	std	Y+34, r23	; 0x22
     ddc:	8b a3       	std	Y+35, r24	; 0x23
     dde:	9c a3       	std	Y+36, r25	; 0x24
        P[1][0] -= dt * P[1][1];
     de0:	a7 01       	movw	r20, r14
     de2:	96 01       	movw	r18, r12
     de4:	69 85       	ldd	r22, Y+9	; 0x09
     de6:	7a 85       	ldd	r23, Y+10	; 0x0a
     de8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dea:	9c 85       	ldd	r25, Y+12	; 0x0c
     dec:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     df0:	69 a7       	std	Y+41, r22	; 0x29
     df2:	7a a7       	std	Y+42, r23	; 0x2a
     df4:	8b a7       	std	Y+43, r24	; 0x2b
     df6:	9c a7       	std	Y+44, r25	; 0x2c
        P[1][1] += Q_bias * dt;
     df8:	20 91 c6 02 	lds	r18, 0x02C6
     dfc:	30 91 c7 02 	lds	r19, 0x02C7
     e00:	40 91 c8 02 	lds	r20, 0x02C8
     e04:	50 91 c9 02 	lds	r21, 0x02C9
     e08:	6d 81       	ldd	r22, Y+5	; 0x05
     e0a:	7e 81       	ldd	r23, Y+6	; 0x06
     e0c:	8f 81       	ldd	r24, Y+7	; 0x07
     e0e:	98 85       	ldd	r25, Y+8	; 0x08
     e10:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	69 81       	ldd	r22, Y+1	; 0x01
     e1a:	7a 81       	ldd	r23, Y+2	; 0x02
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     e24:	69 ab       	std	Y+49, r22	; 0x31
     e26:	7a ab       	std	Y+50, r23	; 0x32
     e28:	8b ab       	std	Y+51, r24	; 0x33
     e2a:	9c ab       	std	Y+52, r25	; 0x34

        // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
        // Calculate Kalman gain - Compute the Kalman gain
        /* Step 4 */
        S = P[0][0] + R_measure;
     e2c:	20 91 ca 02 	lds	r18, 0x02CA
     e30:	30 91 cb 02 	lds	r19, 0x02CB
     e34:	40 91 cc 02 	lds	r20, 0x02CC
     e38:	50 91 cd 02 	lds	r21, 0x02CD
     e3c:	c5 01       	movw	r24, r10
     e3e:	b4 01       	movw	r22, r8
     e40:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     e44:	6b 01       	movw	r12, r22
     e46:	7c 01       	movw	r14, r24
     e48:	60 93 f6 02 	sts	0x02F6, r22
     e4c:	70 93 f7 02 	sts	0x02F7, r23
     e50:	80 93 f8 02 	sts	0x02F8, r24
     e54:	90 93 f9 02 	sts	0x02F9, r25
        /* Step 5 */
        K[0] = P[0][0] / S;
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	c5 01       	movw	r24, r10
     e5e:	b4 01       	movw	r22, r8
     e60:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     e64:	2b 01       	movw	r4, r22
     e66:	3c 01       	movw	r6, r24
     e68:	60 93 ea 02 	sts	0x02EA, r22
     e6c:	70 93 eb 02 	sts	0x02EB, r23
     e70:	80 93 ec 02 	sts	0x02EC, r24
     e74:	90 93 ed 02 	sts	0x02ED, r25
        K[1] = P[1][0] / S;
     e78:	a7 01       	movw	r20, r14
     e7a:	96 01       	movw	r18, r12
     e7c:	69 a5       	ldd	r22, Y+41	; 0x29
     e7e:	7a a5       	ldd	r23, Y+42	; 0x2a
     e80:	8b a5       	ldd	r24, Y+43	; 0x2b
     e82:	9c a5       	ldd	r25, Y+44	; 0x2c
     e84:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     e88:	6b 01       	movw	r12, r22
     e8a:	7c 01       	movw	r14, r24
     e8c:	60 93 ee 02 	sts	0x02EE, r22
     e90:	70 93 ef 02 	sts	0x02EF, r23
     e94:	80 93 f0 02 	sts	0x02F0, r24
     e98:	90 93 f1 02 	sts	0x02F1, r25

        // Calculate angle and bias - Update estimate with measurement zk (newAngle)
        /* Step 3 */
        y = newAngle - angle;
     e9c:	29 8d       	ldd	r18, Y+25	; 0x19
     e9e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ea0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ea2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ea4:	6d a1       	ldd	r22, Y+37	; 0x25
     ea6:	7e a1       	ldd	r23, Y+38	; 0x26
     ea8:	8f a1       	ldd	r24, Y+39	; 0x27
     eaa:	98 a5       	ldd	r25, Y+40	; 0x28
     eac:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     eb0:	69 83       	std	Y+1, r22	; 0x01
     eb2:	7a 83       	std	Y+2, r23	; 0x02
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	9c 83       	std	Y+4, r25	; 0x04
     eb8:	60 93 f2 02 	sts	0x02F2, r22
     ebc:	70 93 f3 02 	sts	0x02F3, r23
     ec0:	80 93 f4 02 	sts	0x02F4, r24
     ec4:	90 93 f5 02 	sts	0x02F5, r25
        /* Step 6 */
        angle += K[0] * y;
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	c3 01       	movw	r24, r6
     ece:	b2 01       	movw	r22, r4
     ed0:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	69 8d       	ldd	r22, Y+25	; 0x19
     eda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     edc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ede:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee0:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     ee4:	69 87       	std	Y+9, r22	; 0x09
     ee6:	7a 87       	std	Y+10, r23	; 0x0a
     ee8:	8b 87       	std	Y+11, r24	; 0x0b
     eea:	9c 87       	std	Y+12, r25	; 0x0c
     eec:	ae ec       	ldi	r26, 0xCE	; 206
     eee:	b2 e0       	ldi	r27, 0x02	; 2
     ef0:	6d 93       	st	X+, r22
     ef2:	7d 93       	st	X+, r23
     ef4:	8d 93       	st	X+, r24
     ef6:	9c 93       	st	X, r25
     ef8:	13 97       	sbiw	r26, 0x03	; 3
        bias += K[1] * y;
     efa:	29 81       	ldd	r18, Y+1	; 0x01
     efc:	3a 81       	ldd	r19, Y+2	; 0x02
     efe:	4b 81       	ldd	r20, Y+3	; 0x03
     f00:	5c 81       	ldd	r21, Y+4	; 0x04
     f02:	c7 01       	movw	r24, r14
     f04:	b6 01       	movw	r22, r12
     f06:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	6d 89       	ldd	r22, Y+21	; 0x15
     f10:	7e 89       	ldd	r23, Y+22	; 0x16
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
     f1a:	f8 01       	movw	r30, r16
     f1c:	60 83       	st	Z, r22
     f1e:	71 83       	std	Z+1, r23	; 0x01
     f20:	82 83       	std	Z+2, r24	; 0x02
     f22:	93 83       	std	Z+3, r25	; 0x03

        // Calculate estimation error covariance - Update the error covariance
        /* Step 7 */
        P[0][0] -= K[0] * P[0][0];
     f24:	a3 01       	movw	r20, r6
     f26:	92 01       	movw	r18, r4
     f28:	c5 01       	movw	r24, r10
     f2a:	b4 01       	movw	r22, r8
     f2c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     f30:	9b 01       	movw	r18, r22
     f32:	ac 01       	movw	r20, r24
     f34:	c5 01       	movw	r24, r10
     f36:	b4 01       	movw	r22, r8
     f38:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     f3c:	4b 01       	movw	r8, r22
     f3e:	5c 01       	movw	r10, r24
     f40:	d1 01       	movw	r26, r2
     f42:	6d 93       	st	X+, r22
     f44:	7d 93       	st	X+, r23
     f46:	8d 93       	st	X+, r24
     f48:	9c 93       	st	X, r25
     f4a:	13 97       	sbiw	r26, 0x03	; 3
        P[0][1] -= K[0] * P[0][1];
     f4c:	a3 01       	movw	r20, r6
     f4e:	92 01       	movw	r18, r4
     f50:	69 a1       	ldd	r22, Y+33	; 0x21
     f52:	7a a1       	ldd	r23, Y+34	; 0x22
     f54:	8b a1       	ldd	r24, Y+35	; 0x23
     f56:	9c a1       	ldd	r25, Y+36	; 0x24
     f58:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	69 a1       	ldd	r22, Y+33	; 0x21
     f62:	7a a1       	ldd	r23, Y+34	; 0x22
     f64:	8b a1       	ldd	r24, Y+35	; 0x23
     f66:	9c a1       	ldd	r25, Y+36	; 0x24
     f68:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     f6c:	2b 01       	movw	r4, r22
     f6e:	3c 01       	movw	r6, r24
     f70:	ee ed       	ldi	r30, 0xDE	; 222
     f72:	f2 e0       	ldi	r31, 0x02	; 2
     f74:	60 83       	st	Z, r22
     f76:	71 83       	std	Z+1, r23	; 0x01
     f78:	82 83       	std	Z+2, r24	; 0x02
     f7a:	93 83       	std	Z+3, r25	; 0x03
        P[1][0] -= K[1] * P[0][0];
     f7c:	a5 01       	movw	r20, r10
     f7e:	94 01       	movw	r18, r8
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	69 a5       	ldd	r22, Y+41	; 0x29
     f8e:	7a a5       	ldd	r23, Y+42	; 0x2a
     f90:	8b a5       	ldd	r24, Y+43	; 0x2b
     f92:	9c a5       	ldd	r25, Y+44	; 0x2c
     f94:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     f98:	a2 ee       	ldi	r26, 0xE2	; 226
     f9a:	b2 e0       	ldi	r27, 0x02	; 2
     f9c:	6d 93       	st	X+, r22
     f9e:	7d 93       	st	X+, r23
     fa0:	8d 93       	st	X+, r24
     fa2:	9c 93       	st	X, r25
     fa4:	13 97       	sbiw	r26, 0x03	; 3
        P[1][1] -= K[1] * P[0][1];
     fa6:	a3 01       	movw	r20, r6
     fa8:	92 01       	movw	r18, r4
     faa:	c7 01       	movw	r24, r14
     fac:	b6 01       	movw	r22, r12
     fae:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	69 a9       	ldd	r22, Y+49	; 0x31
     fb8:	7a a9       	ldd	r23, Y+50	; 0x32
     fba:	8b a9       	ldd	r24, Y+51	; 0x33
     fbc:	9c a9       	ldd	r25, Y+52	; 0x34
     fbe:	0e 94 47 18 	call	0x308e	; 0x308e <__subsf3>
     fc2:	e6 ee       	ldi	r30, 0xE6	; 230
     fc4:	f2 e0       	ldi	r31, 0x02	; 2
     fc6:	60 83       	st	Z, r22
     fc8:	71 83       	std	Z+1, r23	; 0x01
     fca:	82 83       	std	Z+2, r24	; 0x02
     fcc:	93 83       	std	Z+3, r25	; 0x03
	kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd2:	ab 85       	ldd	r26, Y+11	; 0x0b
     fd4:	bc 85       	ldd	r27, Y+12	; 0x0c
     fd6:	80 93 90 02 	sts	0x0290, r24
     fda:	90 93 91 02 	sts	0x0291, r25
     fde:	a0 93 92 02 	sts	0x0292, r26
     fe2:	b0 93 93 02 	sts	0x0293, r27
	if (abs(kalAngleY) > 90)
	gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
	#endif

	gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
     fe6:	2d 81       	ldd	r18, Y+5	; 0x05
     fe8:	3e 81       	ldd	r19, Y+6	; 0x06
     fea:	4f 81       	ldd	r20, Y+7	; 0x07
     fec:	58 85       	ldd	r21, Y+8	; 0x08
     fee:	6d a5       	ldd	r22, Y+45	; 0x2d
     ff0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff4:	98 a9       	ldd	r25, Y+48	; 0x30
     ff6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     ffa:	2b 01       	movw	r4, r22
     ffc:	3c 01       	movw	r6, r24
     ffe:	20 91 a4 02 	lds	r18, 0x02A4
    1002:	30 91 a5 02 	lds	r19, 0x02A5
    1006:	40 91 a6 02 	lds	r20, 0x02A6
    100a:	50 91 a7 02 	lds	r21, 0x02A7
    100e:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    1012:	69 83       	std	Y+1, r22	; 0x01
    1014:	7a 83       	std	Y+2, r23	; 0x02
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	60 93 a4 02 	sts	0x02A4, r22
    101e:	70 93 a5 02 	sts	0x02A5, r23
    1022:	80 93 a6 02 	sts	0x02A6, r24
    1026:	90 93 a7 02 	sts	0x02A7, r25
	gyroYangle += gyroYrate * dt;
    102a:	2d 81       	ldd	r18, Y+5	; 0x05
    102c:	3e 81       	ldd	r19, Y+6	; 0x06
    102e:	4f 81       	ldd	r20, Y+7	; 0x07
    1030:	58 85       	ldd	r21, Y+8	; 0x08
    1032:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1034:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1036:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1038:	98 a1       	ldd	r25, Y+32	; 0x20
    103a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    103e:	4b 01       	movw	r8, r22
    1040:	5c 01       	movw	r10, r24
    1042:	20 91 a0 02 	lds	r18, 0x02A0
    1046:	30 91 a1 02 	lds	r19, 0x02A1
    104a:	40 91 a2 02 	lds	r20, 0x02A2
    104e:	50 91 a3 02 	lds	r21, 0x02A3
    1052:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    1056:	6b 01       	movw	r12, r22
    1058:	7c 01       	movw	r14, r24
    105a:	60 93 a0 02 	sts	0x02A0, r22
    105e:	70 93 a1 02 	sts	0x02A1, r23
    1062:	80 93 a2 02 	sts	0x02A2, r24
    1066:	90 93 a3 02 	sts	0x02A3, r25
	//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
	//gyroYangle += kalmanY.getRate() * dt;

	compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
    106a:	20 91 9c 02 	lds	r18, 0x029C
    106e:	30 91 9d 02 	lds	r19, 0x029D
    1072:	40 91 9e 02 	lds	r20, 0x029E
    1076:	50 91 9f 02 	lds	r21, 0x029F
    107a:	c3 01       	movw	r24, r6
    107c:	b2 01       	movw	r22, r4
    107e:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    1082:	2b e7       	ldi	r18, 0x7B	; 123
    1084:	34 e1       	ldi	r19, 0x14	; 20
    1086:	4e e6       	ldi	r20, 0x6E	; 110
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    108e:	2b 01       	movw	r4, r22
    1090:	3c 01       	movw	r6, r24
    1092:	29 e2       	ldi	r18, 0x29	; 41
    1094:	3c e5       	ldi	r19, 0x5C	; 92
    1096:	4f e8       	ldi	r20, 0x8F	; 143
    1098:	5d e3       	ldi	r21, 0x3D	; 61
    109a:	69 89       	ldd	r22, Y+17	; 0x11
    109c:	7a 89       	ldd	r23, Y+18	; 0x12
    109e:	8b 89       	ldd	r24, Y+19	; 0x13
    10a0:	9c 89       	ldd	r25, Y+20	; 0x14
    10a2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c3 01       	movw	r24, r6
    10ac:	b2 01       	movw	r22, r4
    10ae:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    10b2:	60 93 9c 02 	sts	0x029C, r22
    10b6:	70 93 9d 02 	sts	0x029D, r23
    10ba:	80 93 9e 02 	sts	0x029E, r24
    10be:	90 93 9f 02 	sts	0x029F, r25
	compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
    10c2:	20 91 98 02 	lds	r18, 0x0298
    10c6:	30 91 99 02 	lds	r19, 0x0299
    10ca:	40 91 9a 02 	lds	r20, 0x029A
    10ce:	50 91 9b 02 	lds	r21, 0x029B
    10d2:	c5 01       	movw	r24, r10
    10d4:	b4 01       	movw	r22, r8
    10d6:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    10da:	2b e7       	ldi	r18, 0x7B	; 123
    10dc:	34 e1       	ldi	r19, 0x14	; 20
    10de:	4e e6       	ldi	r20, 0x6E	; 110
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    10e6:	4b 01       	movw	r8, r22
    10e8:	5c 01       	movw	r10, r24
    10ea:	29 e2       	ldi	r18, 0x29	; 41
    10ec:	3c e5       	ldi	r19, 0x5C	; 92
    10ee:	4f e8       	ldi	r20, 0x8F	; 143
    10f0:	5d e3       	ldi	r21, 0x3D	; 61
    10f2:	6d a1       	ldd	r22, Y+37	; 0x25
    10f4:	7e a1       	ldd	r23, Y+38	; 0x26
    10f6:	8f a1       	ldd	r24, Y+39	; 0x27
    10f8:	98 a5       	ldd	r25, Y+40	; 0x28
    10fa:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	c5 01       	movw	r24, r10
    1104:	b4 01       	movw	r22, r8
    1106:	0e 94 48 18 	call	0x3090	; 0x3090 <__addsf3>
    110a:	60 93 98 02 	sts	0x0298, r22
    110e:	70 93 99 02 	sts	0x0299, r23
    1112:	80 93 9a 02 	sts	0x029A, r24
    1116:	90 93 9b 02 	sts	0x029B, r25

	// Reset the gyro angle when it has drifted too much
	if (gyroXangle < -180 || gyroXangle > 180)
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	44 e3       	ldi	r20, 0x34	; 52
    1120:	53 ec       	ldi	r21, 0xC3	; 195
    1122:	69 81       	ldd	r22, Y+1	; 0x01
    1124:	7a 81       	ldd	r23, Y+2	; 0x02
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	0e 94 0e 19 	call	0x321c	; 0x321c <__cmpsf2>
    112e:	88 23       	and	r24, r24
    1130:	64 f0       	brlt	.+24     	; 0x114a <_Z5task1Pv+0xb78>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	44 e3       	ldi	r20, 0x34	; 52
    1138:	53 e4       	ldi	r21, 0x43	; 67
    113a:	69 81       	ldd	r22, Y+1	; 0x01
    113c:	7a 81       	ldd	r23, Y+2	; 0x02
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
    1146:	18 16       	cp	r1, r24
    1148:	64 f4       	brge	.+24     	; 0x1162 <_Z5task1Pv+0xb90>
	gyroXangle = kalAngleX;
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	af 85       	ldd	r26, Y+15	; 0x0f
    1150:	b8 89       	ldd	r27, Y+16	; 0x10
    1152:	80 93 a4 02 	sts	0x02A4, r24
    1156:	90 93 a5 02 	sts	0x02A5, r25
    115a:	a0 93 a6 02 	sts	0x02A6, r26
    115e:	b0 93 a7 02 	sts	0x02A7, r27
	if (gyroYangle < -180 || gyroYangle > 180)
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	44 e3       	ldi	r20, 0x34	; 52
    1168:	53 ec       	ldi	r21, 0xC3	; 195
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 0e 19 	call	0x321c	; 0x321c <__cmpsf2>
    1172:	88 23       	and	r24, r24
    1174:	54 f0       	brlt	.+20     	; 0x118a <_Z5task1Pv+0xbb8>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	44 e3       	ldi	r20, 0x34	; 52
    117c:	53 e4       	ldi	r21, 0x43	; 67
    117e:	c7 01       	movw	r24, r14
    1180:	b6 01       	movw	r22, r12
    1182:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
    1186:	18 16       	cp	r1, r24
    1188:	64 f4       	brge	.+24     	; 0x11a2 <_Z5task1Pv+0xbd0>
	gyroYangle = kalAngleY;
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1190:	bc 85       	ldd	r27, Y+12	; 0x0c
    1192:	80 93 a0 02 	sts	0x02A0, r24
    1196:	90 93 a1 02 	sts	0x02A1, r25
    119a:	a0 93 a2 02 	sts	0x02A2, r26
    119e:	b0 93 a3 02 	sts	0x02A3, r27

	/* Print Data */
	#if 1 // Set to 1 to activate
	Serial.println("Accelerometer Data in 'g':") ;
    11a2:	65 e1       	ldi	r22, 0x15	; 21
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	81 e9       	ldi	r24, 0x91	; 145
    11a8:	9a e0       	ldi	r25, 0x0A	; 10
    11aa:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN5Print7printlnEPKc>
	Serial.print(accX); Serial.print("\t");
    11ae:	40 91 be 02 	lds	r20, 0x02BE
    11b2:	50 91 bf 02 	lds	r21, 0x02BF
    11b6:	60 91 c0 02 	lds	r22, 0x02C0
    11ba:	70 91 c1 02 	lds	r23, 0x02C1
    11be:	22 e0       	ldi	r18, 0x02	; 2
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e9       	ldi	r24, 0x91	; 145
    11c4:	9a e0       	ldi	r25, 0x0A	; 10
    11c6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <_ZN5Print5printEdi>
    11ca:	60 e3       	ldi	r22, 0x30	; 48
    11cc:	72 e0       	ldi	r23, 0x02	; 2
    11ce:	81 e9       	ldi	r24, 0x91	; 145
    11d0:	9a e0       	ldi	r25, 0x0A	; 10
    11d2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN5Print5printEPKc>
	
	Serial.print(accY); Serial.print("\t");
    11d6:	40 91 ba 02 	lds	r20, 0x02BA
    11da:	50 91 bb 02 	lds	r21, 0x02BB
    11de:	60 91 bc 02 	lds	r22, 0x02BC
    11e2:	70 91 bd 02 	lds	r23, 0x02BD
    11e6:	22 e0       	ldi	r18, 0x02	; 2
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e9       	ldi	r24, 0x91	; 145
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <_ZN5Print5printEdi>
    11f2:	60 e3       	ldi	r22, 0x30	; 48
    11f4:	72 e0       	ldi	r23, 0x02	; 2
    11f6:	81 e9       	ldi	r24, 0x91	; 145
    11f8:	9a e0       	ldi	r25, 0x0A	; 10
    11fa:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN5Print5printEPKc>
	Serial.println(accZ); 
    11fe:	40 91 b6 02 	lds	r20, 0x02B6
    1202:	50 91 b7 02 	lds	r21, 0x02B7
    1206:	60 91 b8 02 	lds	r22, 0x02B8
    120a:	70 91 b9 02 	lds	r23, 0x02B9
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e9       	ldi	r24, 0x91	; 145
    1214:	9a e0       	ldi	r25, 0x0A	; 10
    1216:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN5Print7printlnEdi>


	Serial.println("Gyroscope Data in :") ;
    121a:	62 e3       	ldi	r22, 0x32	; 50
    121c:	72 e0       	ldi	r23, 0x02	; 2
    121e:	81 e9       	ldi	r24, 0x91	; 145
    1220:	9a e0       	ldi	r25, 0x0A	; 10
    1222:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN5Print7printlnEPKc>
	Serial.print(gyroX); Serial.print("\t");
    1226:	40 91 b2 02 	lds	r20, 0x02B2
    122a:	50 91 b3 02 	lds	r21, 0x02B3
    122e:	60 91 b4 02 	lds	r22, 0x02B4
    1232:	70 91 b5 02 	lds	r23, 0x02B5
    1236:	22 e0       	ldi	r18, 0x02	; 2
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e9       	ldi	r24, 0x91	; 145
    123c:	9a e0       	ldi	r25, 0x0A	; 10
    123e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <_ZN5Print5printEdi>
    1242:	60 e3       	ldi	r22, 0x30	; 48
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	81 e9       	ldi	r24, 0x91	; 145
    1248:	9a e0       	ldi	r25, 0x0A	; 10
    124a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN5Print5printEPKc>
	Serial.print(gyroY); Serial.print("\t");
    124e:	40 91 ae 02 	lds	r20, 0x02AE
    1252:	50 91 af 02 	lds	r21, 0x02AF
    1256:	60 91 b0 02 	lds	r22, 0x02B0
    125a:	70 91 b1 02 	lds	r23, 0x02B1
    125e:	22 e0       	ldi	r18, 0x02	; 2
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e9       	ldi	r24, 0x91	; 145
    1264:	9a e0       	ldi	r25, 0x0A	; 10
    1266:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <_ZN5Print5printEdi>
    126a:	60 e3       	ldi	r22, 0x30	; 48
    126c:	72 e0       	ldi	r23, 0x02	; 2
    126e:	81 e9       	ldi	r24, 0x91	; 145
    1270:	9a e0       	ldi	r25, 0x0A	; 10
    1272:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN5Print5printEPKc>
	Serial.println(gyroZ);  
    1276:	40 91 aa 02 	lds	r20, 0x02AA
    127a:	50 91 ab 02 	lds	r21, 0x02AB
    127e:	60 91 ac 02 	lds	r22, 0x02AC
    1282:	70 91 ad 02 	lds	r23, 0x02AD
    1286:	22 e0       	ldi	r18, 0x02	; 2
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e9       	ldi	r24, 0x91	; 145
    128c:	9a e0       	ldi	r25, 0x0A	; 10
    128e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN5Print7printlnEdi>

	#endif
	
	Serial.println("End") ;
    1292:	66 e4       	ldi	r22, 0x46	; 70
    1294:	72 e0       	ldi	r23, 0x02	; 2
    1296:	81 e9       	ldi	r24, 0x91	; 145
    1298:	9a e0       	ldi	r25, 0x0A	; 10
    129a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN5Print7printlnEPKc>
	vTaskDelay(150) ;
    129e:	86 e9       	ldi	r24, 0x96	; 150
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	04 d5       	rcall	.+2568   	; 0x1cac <vTaskDelay>
}
    12a4:	e4 96       	adiw	r28, 0x34	; 52
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	3f 90       	pop	r3
    12d2:	2f 90       	pop	r2
    12d4:	08 95       	ret

000012d6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    12dc:	a8 d3       	rcall	.+1872   	; 0x1a2e <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    12de:	80 91 32 03 	lds	r24, 0x0332
    12e2:	90 91 33 03 	lds	r25, 0x0333
    12e6:	89 2b       	or	r24, r25
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    12ea:	87 e3       	ldi	r24, 0x37	; 55
    12ec:	93 e0       	ldi	r25, 0x03	; 3
    12ee:	90 93 33 03 	sts	0x0333, r25
    12f2:	80 93 32 03 	sts	0x0332, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    12f6:	40 91 34 03 	lds	r20, 0x0334
    12fa:	50 91 35 03 	lds	r21, 0x0335
    12fe:	9e 01       	movw	r18, r28
    1300:	24 0f       	add	r18, r20
    1302:	35 1f       	adc	r19, r21
    1304:	2b 3d       	cpi	r18, 0xDB	; 219
    1306:	85 e0       	ldi	r24, 0x05	; 5
    1308:	38 07       	cpc	r19, r24
    130a:	70 f4       	brcc	.+28     	; 0x1328 <pvPortMalloc+0x52>
    130c:	42 17       	cp	r20, r18
    130e:	53 07       	cpc	r21, r19
    1310:	70 f4       	brcc	.+28     	; 0x132e <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1312:	c0 91 32 03 	lds	r28, 0x0332
    1316:	d0 91 33 03 	lds	r29, 0x0333
    131a:	c4 0f       	add	r28, r20
    131c:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    131e:	30 93 35 03 	sts	0x0335, r19
    1322:	20 93 34 03 	sts	0x0334, r18
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1328:	c0 e0       	ldi	r28, 0x00	; 0
    132a:	d0 e0       	ldi	r29, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <pvPortMalloc+0x5c>
    132e:	c0 e0       	ldi	r28, 0x00	; 0
    1330:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1332:	3e d4       	rcall	.+2172   	; 0x1bb0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1334:	ce 01       	movw	r24, r28
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    133c:	08 95       	ret

0000133e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    133e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1340:	03 96       	adiw	r24, 0x03	; 3
    1342:	92 83       	std	Z+2, r25	; 0x02
    1344:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	34 83       	std	Z+4, r19	; 0x04
    134c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    134e:	96 83       	std	Z+6, r25	; 0x06
    1350:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1352:	90 87       	std	Z+8, r25	; 0x08
    1354:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1356:	10 82       	st	Z, r1
    1358:	08 95       	ret

0000135a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    135a:	fc 01       	movw	r30, r24
    135c:	11 86       	std	Z+9, r1	; 0x09
    135e:	10 86       	std	Z+8, r1	; 0x08
    1360:	08 95       	ret

00001362 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	9c 01       	movw	r18, r24
    1368:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    136a:	dc 01       	movw	r26, r24
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	cd 91       	ld	r28, X+
    1370:	dc 91       	ld	r29, X
    1372:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1374:	d3 83       	std	Z+3, r29	; 0x03
    1376:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	95 83       	std	Z+5, r25	; 0x05
    137e:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	dc 01       	movw	r26, r24
    1386:	13 96       	adiw	r26, 0x03	; 3
    1388:	7c 93       	st	X, r23
    138a:	6e 93       	st	-X, r22
    138c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    138e:	7d 83       	std	Y+5, r23	; 0x05
    1390:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1392:	31 87       	std	Z+9, r19	; 0x09
    1394:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1396:	f9 01       	movw	r30, r18
    1398:	80 81       	ld	r24, Z
    139a:	8f 5f       	subi	r24, 0xFF	; 255
    139c:	80 83       	st	Z, r24
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13aa:	48 81       	ld	r20, Y
    13ac:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    13ae:	4f 3f       	cpi	r20, 0xFF	; 255
    13b0:	2f ef       	ldi	r18, 0xFF	; 255
    13b2:	52 07       	cpc	r21, r18
    13b4:	21 f4       	brne	.+8      	; 0x13be <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    13b6:	fc 01       	movw	r30, r24
    13b8:	a7 81       	ldd	r26, Z+7	; 0x07
    13ba:	b0 85       	ldd	r27, Z+8	; 0x08
    13bc:	0d c0       	rjmp	.+26     	; 0x13d8 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13be:	dc 01       	movw	r26, r24
    13c0:	13 96       	adiw	r26, 0x03	; 3
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	ed 91       	ld	r30, X+
    13c6:	fc 91       	ld	r31, X
    13c8:	13 97       	sbiw	r26, 0x03	; 3
    13ca:	20 81       	ld	r18, Z
    13cc:	31 81       	ldd	r19, Z+1	; 0x01
    13ce:	42 17       	cp	r20, r18
    13d0:	53 07       	cpc	r21, r19
    13d2:	10 f0       	brcs	.+4      	; 0x13d8 <vListInsert+0x34>
    13d4:	df 01       	movw	r26, r30
    13d6:	f5 cf       	rjmp	.-22     	; 0x13c2 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	13 97       	sbiw	r26, 0x03	; 3
    13e0:	fb 83       	std	Y+3, r31	; 0x03
    13e2:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13e4:	d5 83       	std	Z+5, r29	; 0x05
    13e6:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    13e8:	bd 83       	std	Y+5, r27	; 0x05
    13ea:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    13ec:	13 96       	adiw	r26, 0x03	; 3
    13ee:	dc 93       	st	X, r29
    13f0:	ce 93       	st	-X, r28
    13f2:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    13f4:	99 87       	std	Y+9, r25	; 0x09
    13f6:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 81       	ld	r18, Z
    13fc:	2f 5f       	subi	r18, 0xFF	; 255
    13fe:	20 83       	st	Z, r18
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    140c:	a0 85       	ldd	r26, Z+8	; 0x08
    140e:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1410:	c2 81       	ldd	r28, Z+2	; 0x02
    1412:	d3 81       	ldd	r29, Z+3	; 0x03
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	9d 83       	std	Y+5, r25	; 0x05
    141a:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    141c:	c4 81       	ldd	r28, Z+4	; 0x04
    141e:	d5 81       	ldd	r29, Z+5	; 0x05
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	cd 91       	ld	r28, X+
    142c:	dc 91       	ld	r29, X
    142e:	12 97       	sbiw	r26, 0x02	; 2
    1430:	ce 17       	cp	r28, r30
    1432:	df 07       	cpc	r29, r31
    1434:	31 f4       	brne	.+12     	; 0x1442 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	9c 93       	st	X, r25
    143e:	8e 93       	st	-X, r24
    1440:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1442:	11 86       	std	Z+9, r1	; 0x09
    1444:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1446:	8c 91       	ld	r24, X
    1448:	81 50       	subi	r24, 0x01	; 1
    144a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1452:	31 e1       	ldi	r19, 0x11	; 17
    1454:	fc 01       	movw	r30, r24
    1456:	30 83       	st	Z, r19
    1458:	31 97       	sbiw	r30, 0x01	; 1
    145a:	22 e2       	ldi	r18, 0x22	; 34
    145c:	20 83       	st	Z, r18
    145e:	31 97       	sbiw	r30, 0x01	; 1
    1460:	a3 e3       	ldi	r26, 0x33	; 51
    1462:	a0 83       	st	Z, r26
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	60 83       	st	Z, r22
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	70 83       	st	Z, r23
    146c:	31 97       	sbiw	r30, 0x01	; 1
    146e:	10 82       	st	Z, r1
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	10 82       	st	Z, r1
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	60 e8       	ldi	r22, 0x80	; 128
    1478:	60 83       	st	Z, r22
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	10 82       	st	Z, r1
    147e:	31 97       	sbiw	r30, 0x01	; 1
    1480:	10 82       	st	Z, r1
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	10 82       	st	Z, r1
    1486:	31 97       	sbiw	r30, 0x01	; 1
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	60 83       	st	Z, r22
    148c:	31 97       	sbiw	r30, 0x01	; 1
    148e:	63 e0       	ldi	r22, 0x03	; 3
    1490:	60 83       	st	Z, r22
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	64 e0       	ldi	r22, 0x04	; 4
    1496:	60 83       	st	Z, r22
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	65 e0       	ldi	r22, 0x05	; 5
    149c:	60 83       	st	Z, r22
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	66 e0       	ldi	r22, 0x06	; 6
    14a2:	60 83       	st	Z, r22
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	67 e0       	ldi	r22, 0x07	; 7
    14a8:	60 83       	st	Z, r22
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	68 e0       	ldi	r22, 0x08	; 8
    14ae:	60 83       	st	Z, r22
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	69 e0       	ldi	r22, 0x09	; 9
    14b4:	60 83       	st	Z, r22
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	60 e1       	ldi	r22, 0x10	; 16
    14ba:	60 83       	st	Z, r22
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	30 83       	st	Z, r19
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	32 e1       	ldi	r19, 0x12	; 18
    14c4:	30 83       	st	Z, r19
    14c6:	31 97       	sbiw	r30, 0x01	; 1
    14c8:	33 e1       	ldi	r19, 0x13	; 19
    14ca:	30 83       	st	Z, r19
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	34 e1       	ldi	r19, 0x14	; 20
    14d0:	30 83       	st	Z, r19
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	35 e1       	ldi	r19, 0x15	; 21
    14d6:	30 83       	st	Z, r19
    14d8:	31 97       	sbiw	r30, 0x01	; 1
    14da:	36 e1       	ldi	r19, 0x16	; 22
    14dc:	30 83       	st	Z, r19
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	37 e1       	ldi	r19, 0x17	; 23
    14e2:	30 83       	st	Z, r19
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	38 e1       	ldi	r19, 0x18	; 24
    14e8:	30 83       	st	Z, r19
    14ea:	31 97       	sbiw	r30, 0x01	; 1
    14ec:	39 e1       	ldi	r19, 0x19	; 25
    14ee:	30 83       	st	Z, r19
    14f0:	31 97       	sbiw	r30, 0x01	; 1
    14f2:	30 e2       	ldi	r19, 0x20	; 32
    14f4:	30 83       	st	Z, r19
    14f6:	31 97       	sbiw	r30, 0x01	; 1
    14f8:	31 e2       	ldi	r19, 0x21	; 33
    14fa:	30 83       	st	Z, r19
    14fc:	31 97       	sbiw	r30, 0x01	; 1
    14fe:	20 83       	st	Z, r18
    1500:	31 97       	sbiw	r30, 0x01	; 1
    1502:	23 e2       	ldi	r18, 0x23	; 35
    1504:	20 83       	st	Z, r18
    1506:	31 97       	sbiw	r30, 0x01	; 1
    1508:	40 83       	st	Z, r20
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	50 83       	st	Z, r21
    150e:	31 97       	sbiw	r30, 0x01	; 1
    1510:	26 e2       	ldi	r18, 0x26	; 38
    1512:	20 83       	st	Z, r18
    1514:	31 97       	sbiw	r30, 0x01	; 1
    1516:	27 e2       	ldi	r18, 0x27	; 39
    1518:	20 83       	st	Z, r18
    151a:	31 97       	sbiw	r30, 0x01	; 1
    151c:	28 e2       	ldi	r18, 0x28	; 40
    151e:	20 83       	st	Z, r18
    1520:	31 97       	sbiw	r30, 0x01	; 1
    1522:	29 e2       	ldi	r18, 0x29	; 41
    1524:	20 83       	st	Z, r18
    1526:	31 97       	sbiw	r30, 0x01	; 1
    1528:	20 e3       	ldi	r18, 0x30	; 48
    152a:	20 83       	st	Z, r18
    152c:	31 97       	sbiw	r30, 0x01	; 1
    152e:	21 e3       	ldi	r18, 0x31	; 49
    1530:	20 83       	st	Z, r18
    1532:	89 97       	sbiw	r24, 0x29	; 41
    1534:	08 95       	ret

00001536 <xPortStartScheduler>:
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	80 93 b0 00 	sts	0x00B0, r24
    153c:	10 92 b2 00 	sts	0x00B2, r1
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	80 93 b3 00 	sts	0x00B3, r24
    1546:	e0 e7       	ldi	r30, 0x70	; 112
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	82 60       	ori	r24, 0x02	; 2
    154e:	80 83       	st	Z, r24
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	80 93 b1 00 	sts	0x00B1, r24
    1556:	a0 91 69 09 	lds	r26, 0x0969
    155a:	b0 91 6a 09 	lds	r27, 0x096A
    155e:	cd 91       	ld	r28, X+
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	dd 91       	ld	r29, X+
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	ff 91       	pop	r31
    1568:	ef 91       	pop	r30
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	9f 90       	pop	r9
    1594:	8f 90       	pop	r8
    1596:	7f 90       	pop	r7
    1598:	6f 90       	pop	r6
    159a:	5f 90       	pop	r5
    159c:	4f 90       	pop	r4
    159e:	3f 90       	pop	r3
    15a0:	2f 90       	pop	r2
    15a2:	1f 90       	pop	r1
    15a4:	0f 90       	pop	r0
    15a6:	0c be       	out	0x3c, r0	; 60
    15a8:	0f 90       	pop	r0
    15aa:	0b be       	out	0x3b, r0	; 59
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	18 95       	reti
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	08 95       	ret

000015b8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    15b8:	0f 92       	push	r0
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
    15c0:	0c b6       	in	r0, 0x3c	; 60
    15c2:	0f 92       	push	r0
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1f 92       	push	r1
    15ca:	11 24       	eor	r1, r1
    15cc:	2f 92       	push	r2
    15ce:	3f 92       	push	r3
    15d0:	4f 92       	push	r4
    15d2:	5f 92       	push	r5
    15d4:	6f 92       	push	r6
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	a0 91 69 09 	lds	r26, 0x0969
    160c:	b0 91 6a 09 	lds	r27, 0x096A
    1610:	0d b6       	in	r0, 0x3d	; 61
    1612:	0d 92       	st	X+, r0
    1614:	0e b6       	in	r0, 0x3e	; 62
    1616:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1618:	9a d3       	rcall	.+1844   	; 0x1d4e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    161a:	a0 91 69 09 	lds	r26, 0x0969
    161e:	b0 91 6a 09 	lds	r27, 0x096A
    1622:	cd 91       	ld	r28, X+
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	dd 91       	ld	r29, X+
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	bf 91       	pop	r27
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	9f 90       	pop	r9
    1658:	8f 90       	pop	r8
    165a:	7f 90       	pop	r7
    165c:	6f 90       	pop	r6
    165e:	5f 90       	pop	r5
    1660:	4f 90       	pop	r4
    1662:	3f 90       	pop	r3
    1664:	2f 90       	pop	r2
    1666:	1f 90       	pop	r1
    1668:	0f 90       	pop	r0
    166a:	0c be       	out	0x3c, r0	; 60
    166c:	0f 90       	pop	r0
    166e:	0b be       	out	0x3b, r0	; 59
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0

	asm volatile ( "reti" );
    1676:	18 95       	reti

00001678 <vPortYieldFromTick>:
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );

void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	0f 92       	push	r0
    1680:	0c b6       	in	r0, 0x3c	; 60
    1682:	0f 92       	push	r0
    1684:	0b b6       	in	r0, 0x3b	; 59
    1686:	0f 92       	push	r0
    1688:	1f 92       	push	r1
    168a:	11 24       	eor	r1, r1
    168c:	2f 92       	push	r2
    168e:	3f 92       	push	r3
    1690:	4f 92       	push	r4
    1692:	5f 92       	push	r5
    1694:	6f 92       	push	r6
    1696:	7f 92       	push	r7
    1698:	8f 92       	push	r8
    169a:	9f 92       	push	r9
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	a0 91 69 09 	lds	r26, 0x0969
    16cc:	b0 91 6a 09 	lds	r27, 0x096A
    16d0:	0d b6       	in	r0, 0x3d	; 61
    16d2:	0d 92       	st	X+, r0
    16d4:	0e b6       	in	r0, 0x3e	; 62
    16d6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    16d8:	b0 d1       	rcall	.+864    	; 0x1a3a <xTaskIncrementTick>
    16da:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    16dc:	38 d3       	rcall	.+1648   	; 0x1d4e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    16de:	a0 91 69 09 	lds	r26, 0x0969
    16e2:	b0 91 6a 09 	lds	r27, 0x096A
    16e6:	cd 91       	ld	r28, X+
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	dd 91       	ld	r29, X+
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	3f 90       	pop	r3
    1728:	2f 90       	pop	r2
    172a:	1f 90       	pop	r1
    172c:	0f 90       	pop	r0
    172e:	0c be       	out	0x3c, r0	; 60
    1730:	0f 90       	pop	r0
    1732:	0b be       	out	0x3b, r0	; 59
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0

	asm volatile ( "reti" );
    173a:	18 95       	reti

0000173c <__vector_13>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	ISR(_VECTOR(13), ISR_NAKED) //handler is naked, meaning compiler generates code for handler without any additional assembly code
	{
		vPortYieldFromTick();
    173c:	9d df       	rcall	.-198    	; 0x1678 <vPortYieldFromTick>
		asm volatile ( "reti" );
    173e:	18 95       	reti

00001740 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1740:	e0 91 31 09 	lds	r30, 0x0931
    1744:	f0 91 32 09 	lds	r31, 0x0932
    1748:	80 81       	ld	r24, Z
    174a:	81 11       	cpse	r24, r1
    174c:	07 c0       	rjmp	.+14     	; 0x175c <prvResetNextTaskUnblockTime+0x1c>
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	90 93 07 02 	sts	0x0207, r25
    1756:	80 93 06 02 	sts	0x0206, r24
    175a:	08 95       	ret
    175c:	e0 91 31 09 	lds	r30, 0x0931
    1760:	f0 91 32 09 	lds	r31, 0x0932
    1764:	05 80       	ldd	r0, Z+5	; 0x05
    1766:	f6 81       	ldd	r31, Z+6	; 0x06
    1768:	e0 2d       	mov	r30, r0
    176a:	06 80       	ldd	r0, Z+6	; 0x06
    176c:	f7 81       	ldd	r31, Z+7	; 0x07
    176e:	e0 2d       	mov	r30, r0
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	90 93 07 02 	sts	0x0207, r25
    1778:	80 93 06 02 	sts	0x0206, r24
    177c:	08 95       	ret

0000177e <prvAddCurrentTaskToDelayedList>:
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	ec 01       	movw	r28, r24
    1784:	e0 91 69 09 	lds	r30, 0x0969
    1788:	f0 91 6a 09 	lds	r31, 0x096A
    178c:	93 83       	std	Z+3, r25	; 0x03
    178e:	82 83       	std	Z+2, r24	; 0x02
    1790:	80 91 19 09 	lds	r24, 0x0919
    1794:	90 91 1a 09 	lds	r25, 0x091A
    1798:	c8 17       	cp	r28, r24
    179a:	d9 07       	cpc	r29, r25
    179c:	60 f4       	brcc	.+24     	; 0x17b6 <prvAddCurrentTaskToDelayedList+0x38>
    179e:	60 91 69 09 	lds	r22, 0x0969
    17a2:	70 91 6a 09 	lds	r23, 0x096A
    17a6:	80 91 2f 09 	lds	r24, 0x092F
    17aa:	90 91 30 09 	lds	r25, 0x0930
    17ae:	6e 5f       	subi	r22, 0xFE	; 254
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	f8 dd       	rcall	.-1040   	; 0x13a4 <vListInsert>
    17b4:	16 c0       	rjmp	.+44     	; 0x17e2 <prvAddCurrentTaskToDelayedList+0x64>
    17b6:	60 91 69 09 	lds	r22, 0x0969
    17ba:	70 91 6a 09 	lds	r23, 0x096A
    17be:	80 91 31 09 	lds	r24, 0x0931
    17c2:	90 91 32 09 	lds	r25, 0x0932
    17c6:	6e 5f       	subi	r22, 0xFE	; 254
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	ec dd       	rcall	.-1064   	; 0x13a4 <vListInsert>
    17cc:	80 91 06 02 	lds	r24, 0x0206
    17d0:	90 91 07 02 	lds	r25, 0x0207
    17d4:	c8 17       	cp	r28, r24
    17d6:	d9 07       	cpc	r29, r25
    17d8:	20 f4       	brcc	.+8      	; 0x17e2 <prvAddCurrentTaskToDelayedList+0x64>
    17da:	d0 93 07 02 	sts	0x0207, r29
    17de:	c0 93 06 02 	sts	0x0206, r28
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <xTaskGenericCreate>:
    17e8:	4f 92       	push	r4
    17ea:	5f 92       	push	r5
    17ec:	6f 92       	push	r6
    17ee:	7f 92       	push	r7
    17f0:	8f 92       	push	r8
    17f2:	9f 92       	push	r9
    17f4:	af 92       	push	r10
    17f6:	bf 92       	push	r11
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	4c 01       	movw	r8, r24
    180a:	5b 01       	movw	r10, r22
    180c:	2a 01       	movw	r4, r20
    180e:	39 01       	movw	r6, r18
    1810:	81 e2       	ldi	r24, 0x21	; 33
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	60 dd       	rcall	.-1344   	; 0x12d6 <pvPortMalloc>
    1816:	ec 01       	movw	r28, r24
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	09 f4       	brne	.+2      	; 0x181e <xTaskGenericCreate+0x36>
    181c:	cd c0       	rjmp	.+410    	; 0x19b8 <xTaskGenericCreate+0x1d0>
    181e:	c1 14       	cp	r12, r1
    1820:	d1 04       	cpc	r13, r1
    1822:	09 f0       	breq	.+2      	; 0x1826 <xTaskGenericCreate+0x3e>
    1824:	b2 c0       	rjmp	.+356    	; 0x198a <xTaskGenericCreate+0x1a2>
    1826:	c2 01       	movw	r24, r4
    1828:	56 dd       	rcall	.-1364   	; 0x12d6 <pvPortMalloc>
    182a:	98 8f       	std	Y+24, r25	; 0x18
    182c:	8f 8b       	std	Y+23, r24	; 0x17
    182e:	89 2b       	or	r24, r25
    1830:	09 f0       	breq	.+2      	; 0x1834 <xTaskGenericCreate+0x4c>
    1832:	ad c0       	rjmp	.+346    	; 0x198e <xTaskGenericCreate+0x1a6>
    1834:	ce 01       	movw	r24, r28
    1836:	82 dd       	rcall	.-1276   	; 0x133c <vPortFree>
    1838:	bf c0       	rjmp	.+382    	; 0x19b8 <xTaskGenericCreate+0x1d0>
    183a:	cf 01       	movw	r24, r30
    183c:	31 91       	ld	r19, Z+
    183e:	da 01       	movw	r26, r20
    1840:	3d 93       	st	X+, r19
    1842:	ad 01       	movw	r20, r26
    1844:	dc 01       	movw	r26, r24
    1846:	8c 91       	ld	r24, X
    1848:	88 23       	and	r24, r24
    184a:	11 f0       	breq	.+4      	; 0x1850 <xTaskGenericCreate+0x68>
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	a9 f7       	brne	.-22     	; 0x183a <xTaskGenericCreate+0x52>
    1850:	18 a2       	std	Y+32, r1	; 0x20
    1852:	10 2f       	mov	r17, r16
    1854:	04 30       	cpi	r16, 0x04	; 4
    1856:	08 f0       	brcs	.+2      	; 0x185a <xTaskGenericCreate+0x72>
    1858:	13 e0       	ldi	r17, 0x03	; 3
    185a:	1e 8b       	std	Y+22, r17	; 0x16
    185c:	5e 01       	movw	r10, r28
    185e:	b2 e0       	ldi	r27, 0x02	; 2
    1860:	ab 0e       	add	r10, r27
    1862:	b1 1c       	adc	r11, r1
    1864:	c5 01       	movw	r24, r10
    1866:	79 dd       	rcall	.-1294   	; 0x135a <vListInitialiseItem>
    1868:	ce 01       	movw	r24, r28
    186a:	0c 96       	adiw	r24, 0x0c	; 12
    186c:	76 dd       	rcall	.-1300   	; 0x135a <vListInitialiseItem>
    186e:	d9 87       	std	Y+9, r29	; 0x09
    1870:	c8 87       	std	Y+8, r28	; 0x08
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	81 1b       	sub	r24, r17
    1878:	91 09       	sbc	r25, r1
    187a:	9d 87       	std	Y+13, r25	; 0x0d
    187c:	8c 87       	std	Y+12, r24	; 0x0c
    187e:	db 8b       	std	Y+19, r29	; 0x13
    1880:	ca 8b       	std	Y+18, r28	; 0x12
    1882:	a3 01       	movw	r20, r6
    1884:	b4 01       	movw	r22, r8
    1886:	c6 01       	movw	r24, r12
    1888:	e4 dd       	rcall	.-1080   	; 0x1452 <pxPortInitialiseStack>
    188a:	99 83       	std	Y+1, r25	; 0x01
    188c:	88 83       	st	Y, r24
    188e:	e1 14       	cp	r14, r1
    1890:	f1 04       	cpc	r15, r1
    1892:	19 f0       	breq	.+6      	; 0x189a <xTaskGenericCreate+0xb2>
    1894:	f7 01       	movw	r30, r14
    1896:	d1 83       	std	Z+1, r29	; 0x01
    1898:	c0 83       	st	Z, r28
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	0f 92       	push	r0
    18a0:	80 91 1b 09 	lds	r24, 0x091B
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	80 93 1b 09 	sts	0x091B, r24
    18aa:	80 91 69 09 	lds	r24, 0x0969
    18ae:	90 91 6a 09 	lds	r25, 0x096A
    18b2:	89 2b       	or	r24, r25
    18b4:	69 f5       	brne	.+90     	; 0x1910 <xTaskGenericCreate+0x128>
    18b6:	d0 93 6a 09 	sts	0x096A, r29
    18ba:	c0 93 69 09 	sts	0x0969, r28
    18be:	80 91 1b 09 	lds	r24, 0x091B
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	a1 f5       	brne	.+104    	; 0x192e <xTaskGenericCreate+0x146>
    18c6:	85 e4       	ldi	r24, 0x45	; 69
    18c8:	99 e0       	ldi	r25, 0x09	; 9
    18ca:	39 dd       	rcall	.-1422   	; 0x133e <vListInitialise>
    18cc:	8e e4       	ldi	r24, 0x4E	; 78
    18ce:	99 e0       	ldi	r25, 0x09	; 9
    18d0:	36 dd       	rcall	.-1428   	; 0x133e <vListInitialise>
    18d2:	87 e5       	ldi	r24, 0x57	; 87
    18d4:	99 e0       	ldi	r25, 0x09	; 9
    18d6:	33 dd       	rcall	.-1434   	; 0x133e <vListInitialise>
    18d8:	80 e6       	ldi	r24, 0x60	; 96
    18da:	99 e0       	ldi	r25, 0x09	; 9
    18dc:	30 dd       	rcall	.-1440   	; 0x133e <vListInitialise>
    18de:	8c e3       	ldi	r24, 0x3C	; 60
    18e0:	99 e0       	ldi	r25, 0x09	; 9
    18e2:	2d dd       	rcall	.-1446   	; 0x133e <vListInitialise>
    18e4:	83 e3       	ldi	r24, 0x33	; 51
    18e6:	99 e0       	ldi	r25, 0x09	; 9
    18e8:	2a dd       	rcall	.-1452   	; 0x133e <vListInitialise>
    18ea:	86 e2       	ldi	r24, 0x26	; 38
    18ec:	99 e0       	ldi	r25, 0x09	; 9
    18ee:	27 dd       	rcall	.-1458   	; 0x133e <vListInitialise>
    18f0:	8d e1       	ldi	r24, 0x1D	; 29
    18f2:	99 e0       	ldi	r25, 0x09	; 9
    18f4:	24 dd       	rcall	.-1464   	; 0x133e <vListInitialise>
    18f6:	8c e3       	ldi	r24, 0x3C	; 60
    18f8:	99 e0       	ldi	r25, 0x09	; 9
    18fa:	90 93 32 09 	sts	0x0932, r25
    18fe:	80 93 31 09 	sts	0x0931, r24
    1902:	83 e3       	ldi	r24, 0x33	; 51
    1904:	99 e0       	ldi	r25, 0x09	; 9
    1906:	90 93 30 09 	sts	0x0930, r25
    190a:	80 93 2f 09 	sts	0x092F, r24
    190e:	0f c0       	rjmp	.+30     	; 0x192e <xTaskGenericCreate+0x146>
    1910:	80 91 17 09 	lds	r24, 0x0917
    1914:	81 11       	cpse	r24, r1
    1916:	0b c0       	rjmp	.+22     	; 0x192e <xTaskGenericCreate+0x146>
    1918:	e0 91 69 09 	lds	r30, 0x0969
    191c:	f0 91 6a 09 	lds	r31, 0x096A
    1920:	86 89       	ldd	r24, Z+22	; 0x16
    1922:	08 17       	cp	r16, r24
    1924:	20 f0       	brcs	.+8      	; 0x192e <xTaskGenericCreate+0x146>
    1926:	d0 93 6a 09 	sts	0x096A, r29
    192a:	c0 93 69 09 	sts	0x0969, r28
    192e:	80 91 13 09 	lds	r24, 0x0913
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	80 93 13 09 	sts	0x0913, r24
    1938:	8e 89       	ldd	r24, Y+22	; 0x16
    193a:	90 91 18 09 	lds	r25, 0x0918
    193e:	98 17       	cp	r25, r24
    1940:	10 f4       	brcc	.+4      	; 0x1946 <xTaskGenericCreate+0x15e>
    1942:	80 93 18 09 	sts	0x0918, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9c 01       	movw	r18, r24
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	b5 01       	movw	r22, r10
    195c:	8b 5b       	subi	r24, 0xBB	; 187
    195e:	96 4f       	sbci	r25, 0xF6	; 246
    1960:	00 dd       	rcall	.-1536   	; 0x1362 <vListInsertEnd>
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	80 91 17 09 	lds	r24, 0x0917
    196a:	88 23       	and	r24, r24
    196c:	51 f0       	breq	.+20     	; 0x1982 <xTaskGenericCreate+0x19a>
    196e:	e0 91 69 09 	lds	r30, 0x0969
    1972:	f0 91 6a 09 	lds	r31, 0x096A
    1976:	86 89       	ldd	r24, Z+22	; 0x16
    1978:	80 17       	cp	r24, r16
    197a:	28 f4       	brcc	.+10     	; 0x1986 <xTaskGenericCreate+0x19e>
    197c:	1d de       	rcall	.-966    	; 0x15b8 <vPortYield>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	1c c0       	rjmp	.+56     	; 0x19ba <xTaskGenericCreate+0x1d2>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	1a c0       	rjmp	.+52     	; 0x19ba <xTaskGenericCreate+0x1d2>
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	18 c0       	rjmp	.+48     	; 0x19ba <xTaskGenericCreate+0x1d2>
    198a:	d8 8e       	std	Y+24, r13	; 0x18
    198c:	cf 8a       	std	Y+23, r12	; 0x17
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	4f 1a       	sub	r4, r31
    1992:	51 08       	sbc	r5, r1
    1994:	cf 88       	ldd	r12, Y+23	; 0x17
    1996:	d8 8c       	ldd	r13, Y+24	; 0x18
    1998:	c4 0c       	add	r12, r4
    199a:	d5 1c       	adc	r13, r5
    199c:	d5 01       	movw	r26, r10
    199e:	8c 91       	ld	r24, X
    19a0:	89 8f       	std	Y+25, r24	; 0x19
    19a2:	8c 91       	ld	r24, X
    19a4:	88 23       	and	r24, r24
    19a6:	09 f4       	brne	.+2      	; 0x19aa <xTaskGenericCreate+0x1c2>
    19a8:	53 cf       	rjmp	.-346    	; 0x1850 <xTaskGenericCreate+0x68>
    19aa:	ae 01       	movw	r20, r28
    19ac:	46 5e       	subi	r20, 0xE6	; 230
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	f5 01       	movw	r30, r10
    19b2:	31 96       	adiw	r30, 0x01	; 1
    19b4:	27 e0       	ldi	r18, 0x07	; 7
    19b6:	41 cf       	rjmp	.-382    	; 0x183a <xTaskGenericCreate+0x52>
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	9f 90       	pop	r9
    19d0:	8f 90       	pop	r8
    19d2:	7f 90       	pop	r7
    19d4:	6f 90       	pop	r6
    19d6:	5f 90       	pop	r5
    19d8:	4f 90       	pop	r4
    19da:	08 95       	ret

000019dc <vTaskStartScheduler>:
    19dc:	af 92       	push	r10
    19de:	bf 92       	push	r11
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	a1 2c       	mov	r10, r1
    19ec:	b1 2c       	mov	r11, r1
    19ee:	c1 2c       	mov	r12, r1
    19f0:	d1 2c       	mov	r13, r1
    19f2:	e1 2c       	mov	r14, r1
    19f4:	f1 2c       	mov	r15, r1
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	45 e5       	ldi	r20, 0x55	; 85
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	6a e4       	ldi	r22, 0x4A	; 74
    1a02:	72 e0       	ldi	r23, 0x02	; 2
    1a04:	81 e7       	ldi	r24, 0x71	; 113
    1a06:	9e e0       	ldi	r25, 0x0E	; 14
    1a08:	ef de       	rcall	.-546    	; 0x17e8 <xTaskGenericCreate>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	41 f4       	brne	.+16     	; 0x1a1e <vTaskStartScheduler+0x42>
    1a0e:	f8 94       	cli
    1a10:	80 93 17 09 	sts	0x0917, r24
    1a14:	10 92 1a 09 	sts	0x091A, r1
    1a18:	10 92 19 09 	sts	0x0919, r1
    1a1c:	8c dd       	rcall	.-1256   	; 0x1536 <xPortStartScheduler>
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	bf 90       	pop	r11
    1a2a:	af 90       	pop	r10
    1a2c:	08 95       	ret

00001a2e <vTaskSuspendAll>:
    1a2e:	80 91 12 09 	lds	r24, 0x0912
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	80 93 12 09 	sts	0x0912, r24
    1a38:	08 95       	ret

00001a3a <xTaskIncrementTick>:
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	80 91 12 09 	lds	r24, 0x0912
    1a4e:	81 11       	cpse	r24, r1
    1a50:	96 c0       	rjmp	.+300    	; 0x1b7e <xTaskIncrementTick+0x144>
    1a52:	80 91 19 09 	lds	r24, 0x0919
    1a56:	90 91 1a 09 	lds	r25, 0x091A
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	90 93 1a 09 	sts	0x091A, r25
    1a60:	80 93 19 09 	sts	0x0919, r24
    1a64:	e0 90 19 09 	lds	r14, 0x0919
    1a68:	f0 90 1a 09 	lds	r15, 0x091A
    1a6c:	e1 14       	cp	r14, r1
    1a6e:	f1 04       	cpc	r15, r1
    1a70:	b1 f4       	brne	.+44     	; 0x1a9e <xTaskIncrementTick+0x64>
    1a72:	80 91 31 09 	lds	r24, 0x0931
    1a76:	90 91 32 09 	lds	r25, 0x0932
    1a7a:	20 91 2f 09 	lds	r18, 0x092F
    1a7e:	30 91 30 09 	lds	r19, 0x0930
    1a82:	30 93 32 09 	sts	0x0932, r19
    1a86:	20 93 31 09 	sts	0x0931, r18
    1a8a:	90 93 30 09 	sts	0x0930, r25
    1a8e:	80 93 2f 09 	sts	0x092F, r24
    1a92:	80 91 14 09 	lds	r24, 0x0914
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	80 93 14 09 	sts	0x0914, r24
    1a9c:	51 de       	rcall	.-862    	; 0x1740 <prvResetNextTaskUnblockTime>
    1a9e:	80 91 06 02 	lds	r24, 0x0206
    1aa2:	90 91 07 02 	lds	r25, 0x0207
    1aa6:	e8 16       	cp	r14, r24
    1aa8:	f9 06       	cpc	r15, r25
    1aaa:	08 f4       	brcc	.+2      	; 0x1aae <xTaskIncrementTick+0x74>
    1aac:	51 c0       	rjmp	.+162    	; 0x1b50 <xTaskIncrementTick+0x116>
    1aae:	d1 2c       	mov	r13, r1
    1ab0:	cc 24       	eor	r12, r12
    1ab2:	c3 94       	inc	r12
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <xTaskIncrementTick+0x7e>
    1ab6:	dc 2c       	mov	r13, r12
    1ab8:	e0 91 31 09 	lds	r30, 0x0931
    1abc:	f0 91 32 09 	lds	r31, 0x0932
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <xTaskIncrementTick+0x9a>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	90 93 07 02 	sts	0x0207, r25
    1ace:	80 93 06 02 	sts	0x0206, r24
    1ad2:	3f c0       	rjmp	.+126    	; 0x1b52 <xTaskIncrementTick+0x118>
    1ad4:	e0 91 31 09 	lds	r30, 0x0931
    1ad8:	f0 91 32 09 	lds	r31, 0x0932
    1adc:	05 80       	ldd	r0, Z+5	; 0x05
    1ade:	f6 81       	ldd	r31, Z+6	; 0x06
    1ae0:	e0 2d       	mov	r30, r0
    1ae2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ae4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ae6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae8:	3b 81       	ldd	r19, Y+3	; 0x03
    1aea:	e2 16       	cp	r14, r18
    1aec:	f3 06       	cpc	r15, r19
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <xTaskIncrementTick+0xc0>
    1af0:	30 93 07 02 	sts	0x0207, r19
    1af4:	20 93 06 02 	sts	0x0206, r18
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <xTaskIncrementTick+0x118>
    1afa:	8e 01       	movw	r16, r28
    1afc:	0e 5f       	subi	r16, 0xFE	; 254
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	c8 01       	movw	r24, r16
    1b02:	81 dc       	rcall	.-1790   	; 0x1406 <uxListRemove>
    1b04:	8c 89       	ldd	r24, Y+20	; 0x14
    1b06:	9d 89       	ldd	r25, Y+21	; 0x15
    1b08:	89 2b       	or	r24, r25
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <xTaskIncrementTick+0xd8>
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	0c 96       	adiw	r24, 0x0c	; 12
    1b10:	7a dc       	rcall	.-1804   	; 0x1406 <uxListRemove>
    1b12:	2e 89       	ldd	r18, Y+22	; 0x16
    1b14:	80 91 18 09 	lds	r24, 0x0918
    1b18:	82 17       	cp	r24, r18
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <xTaskIncrementTick+0xe6>
    1b1c:	20 93 18 09 	sts	0x0918, r18
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	c9 01       	movw	r24, r18
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	82 0f       	add	r24, r18
    1b32:	93 1f       	adc	r25, r19
    1b34:	b8 01       	movw	r22, r16
    1b36:	8b 5b       	subi	r24, 0xBB	; 187
    1b38:	96 4f       	sbci	r25, 0xF6	; 246
    1b3a:	13 dc       	rcall	.-2010   	; 0x1362 <vListInsertEnd>
    1b3c:	e0 91 69 09 	lds	r30, 0x0969
    1b40:	f0 91 6a 09 	lds	r31, 0x096A
    1b44:	9e 89       	ldd	r25, Y+22	; 0x16
    1b46:	86 89       	ldd	r24, Z+22	; 0x16
    1b48:	98 17       	cp	r25, r24
    1b4a:	08 f0       	brcs	.+2      	; 0x1b4e <xTaskIncrementTick+0x114>
    1b4c:	b4 cf       	rjmp	.-152    	; 0x1ab6 <xTaskIncrementTick+0x7c>
    1b4e:	b4 cf       	rjmp	.-152    	; 0x1ab8 <xTaskIncrementTick+0x7e>
    1b50:	d1 2c       	mov	r13, r1
    1b52:	e0 91 69 09 	lds	r30, 0x0969
    1b56:	f0 91 6a 09 	lds	r31, 0x096A
    1b5a:	86 89       	ldd	r24, Z+22	; 0x16
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	fc 01       	movw	r30, r24
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	8e 0f       	add	r24, r30
    1b6e:	9f 1f       	adc	r25, r31
    1b70:	fc 01       	movw	r30, r24
    1b72:	eb 5b       	subi	r30, 0xBB	; 187
    1b74:	f6 4f       	sbci	r31, 0xF6	; 246
    1b76:	80 81       	ld	r24, Z
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	40 f4       	brcc	.+16     	; 0x1b8c <xTaskIncrementTick+0x152>
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <xTaskIncrementTick+0x156>
    1b7e:	80 91 16 09 	lds	r24, 0x0916
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	80 93 16 09 	sts	0x0916, r24
    1b88:	d1 2c       	mov	r13, r1
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <xTaskIncrementTick+0x156>
    1b8c:	dd 24       	eor	r13, r13
    1b8e:	d3 94       	inc	r13
    1b90:	80 91 15 09 	lds	r24, 0x0915
    1b94:	88 23       	and	r24, r24
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <xTaskIncrementTick+0x162>
    1b98:	dd 24       	eor	r13, r13
    1b9a:	d3 94       	inc	r13
    1b9c:	8d 2d       	mov	r24, r13
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	08 95       	ret

00001bb0 <xTaskResumeAll>:
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	0f 92       	push	r0
    1bc4:	80 91 12 09 	lds	r24, 0x0912
    1bc8:	81 50       	subi	r24, 0x01	; 1
    1bca:	80 93 12 09 	sts	0x0912, r24
    1bce:	80 91 12 09 	lds	r24, 0x0912
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	5c c0       	rjmp	.+184    	; 0x1c8e <xTaskResumeAll+0xde>
    1bd6:	80 91 1b 09 	lds	r24, 0x091B
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <xTaskResumeAll+0x30>
    1bde:	59 c0       	rjmp	.+178    	; 0x1c92 <xTaskResumeAll+0xe2>
    1be0:	0f 2e       	mov	r0, r31
    1be2:	f6 e2       	ldi	r31, 0x26	; 38
    1be4:	ef 2e       	mov	r14, r31
    1be6:	f9 e0       	ldi	r31, 0x09	; 9
    1be8:	ff 2e       	mov	r15, r31
    1bea:	f0 2d       	mov	r31, r0
    1bec:	dd 24       	eor	r13, r13
    1bee:	d3 94       	inc	r13
    1bf0:	2d c0       	rjmp	.+90     	; 0x1c4c <xTaskResumeAll+0x9c>
    1bf2:	e0 91 2b 09 	lds	r30, 0x092B
    1bf6:	f0 91 2c 09 	lds	r31, 0x092C
    1bfa:	c6 81       	ldd	r28, Z+6	; 0x06
    1bfc:	d7 81       	ldd	r29, Z+7	; 0x07
    1bfe:	ce 01       	movw	r24, r28
    1c00:	0c 96       	adiw	r24, 0x0c	; 12
    1c02:	01 dc       	rcall	.-2046   	; 0x1406 <uxListRemove>
    1c04:	8e 01       	movw	r16, r28
    1c06:	0e 5f       	subi	r16, 0xFE	; 254
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	fc db       	rcall	.-2056   	; 0x1406 <uxListRemove>
    1c0e:	8e 89       	ldd	r24, Y+22	; 0x16
    1c10:	90 91 18 09 	lds	r25, 0x0918
    1c14:	98 17       	cp	r25, r24
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <xTaskResumeAll+0x6c>
    1c18:	80 93 18 09 	sts	0x0918, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9c 01       	movw	r18, r24
    1c20:	22 0f       	add	r18, r18
    1c22:	33 1f       	adc	r19, r19
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	22 0f       	add	r18, r18
    1c2a:	33 1f       	adc	r19, r19
    1c2c:	82 0f       	add	r24, r18
    1c2e:	93 1f       	adc	r25, r19
    1c30:	b8 01       	movw	r22, r16
    1c32:	8b 5b       	subi	r24, 0xBB	; 187
    1c34:	96 4f       	sbci	r25, 0xF6	; 246
    1c36:	95 db       	rcall	.-2262   	; 0x1362 <vListInsertEnd>
    1c38:	e0 91 69 09 	lds	r30, 0x0969
    1c3c:	f0 91 6a 09 	lds	r31, 0x096A
    1c40:	9e 89       	ldd	r25, Y+22	; 0x16
    1c42:	86 89       	ldd	r24, Z+22	; 0x16
    1c44:	98 17       	cp	r25, r24
    1c46:	10 f0       	brcs	.+4      	; 0x1c4c <xTaskResumeAll+0x9c>
    1c48:	d0 92 15 09 	sts	0x0915, r13
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	80 81       	ld	r24, Z
    1c50:	81 11       	cpse	r24, r1
    1c52:	cf cf       	rjmp	.-98     	; 0x1bf2 <xTaskResumeAll+0x42>
    1c54:	80 91 16 09 	lds	r24, 0x0916
    1c58:	88 23       	and	r24, r24
    1c5a:	91 f0       	breq	.+36     	; 0x1c80 <xTaskResumeAll+0xd0>
    1c5c:	80 91 16 09 	lds	r24, 0x0916
    1c60:	88 23       	and	r24, r24
    1c62:	71 f0       	breq	.+28     	; 0x1c80 <xTaskResumeAll+0xd0>
    1c64:	c1 e0       	ldi	r28, 0x01	; 1
    1c66:	e9 de       	rcall	.-558    	; 0x1a3a <xTaskIncrementTick>
    1c68:	81 11       	cpse	r24, r1
    1c6a:	c0 93 15 09 	sts	0x0915, r28
    1c6e:	80 91 16 09 	lds	r24, 0x0916
    1c72:	81 50       	subi	r24, 0x01	; 1
    1c74:	80 93 16 09 	sts	0x0916, r24
    1c78:	80 91 16 09 	lds	r24, 0x0916
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	f3 cf       	rjmp	.-26     	; 0x1c66 <xTaskResumeAll+0xb6>
    1c80:	80 91 15 09 	lds	r24, 0x0915
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <xTaskResumeAll+0xe6>
    1c88:	97 dc       	rcall	.-1746   	; 0x15b8 <vPortYield>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <xTaskResumeAll+0xe8>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <xTaskResumeAll+0xe8>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <xTaskResumeAll+0xe8>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	08 95       	ret

00001cac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	91 f0       	breq	.+36     	; 0x1cda <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1cb6:	bb de       	rcall	.-650    	; 0x1a2e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1cb8:	80 91 19 09 	lds	r24, 0x0919
    1cbc:	90 91 1a 09 	lds	r25, 0x091A
    1cc0:	c8 0f       	add	r28, r24
    1cc2:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1cc4:	80 91 69 09 	lds	r24, 0x0969
    1cc8:	90 91 6a 09 	lds	r25, 0x096A
    1ccc:	02 96       	adiw	r24, 0x02	; 2
    1cce:	9b db       	rcall	.-2250   	; 0x1406 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	55 dd       	rcall	.-1366   	; 0x177e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1cd4:	6d df       	rcall	.-294    	; 0x1bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    1cda:	6e dc       	rcall	.-1828   	; 0x15b8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1ce2:	0f 2e       	mov	r0, r31
    1ce4:	f5 e4       	ldi	r31, 0x45	; 69
    1ce6:	ef 2e       	mov	r14, r31
    1ce8:	f9 e0       	ldi	r31, 0x09	; 9
    1cea:	ff 2e       	mov	r15, r31
    1cec:	f0 2d       	mov	r31, r0
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1cee:	cd e1       	ldi	r28, 0x1D	; 29
    1cf0:	d9 e0       	ldi	r29, 0x09	; 9
    1cf2:	23 c0       	rjmp	.+70     	; 0x1d3a <prvIdleTask+0x58>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1cf4:	9c de       	rcall	.-712    	; 0x1a2e <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1cf6:	18 81       	ld	r17, Y
			}
			( void ) xTaskResumeAll();
    1cf8:	5b df       	rcall	.-330    	; 0x1bb0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1cfa:	11 23       	and	r17, r17
    1cfc:	f1 f0       	breq	.+60     	; 0x1d3a <prvIdleTask+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1d04:	e0 91 22 09 	lds	r30, 0x0922
    1d08:	f0 91 23 09 	lds	r31, 0x0923
    1d0c:	06 81       	ldd	r16, Z+6	; 0x06
    1d0e:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1d10:	c8 01       	movw	r24, r16
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	78 db       	rcall	.-2320   	; 0x1406 <uxListRemove>
					--uxCurrentNumberOfTasks;
    1d16:	80 91 1b 09 	lds	r24, 0x091B
    1d1a:	81 50       	subi	r24, 0x01	; 1
    1d1c:	80 93 1b 09 	sts	0x091B, r24
					--uxTasksDeleted;
    1d20:	80 91 1c 09 	lds	r24, 0x091C
    1d24:	81 50       	subi	r24, 0x01	; 1
    1d26:	80 93 1c 09 	sts	0x091C, r24
				}
				taskEXIT_CRITICAL();
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    1d2e:	f8 01       	movw	r30, r16
    1d30:	87 89       	ldd	r24, Z+23	; 0x17
    1d32:	90 8d       	ldd	r25, Z+24	; 0x18
    1d34:	03 db       	rcall	.-2554   	; 0x133c <vPortFree>
		vPortFree( pxTCB );
    1d36:	c8 01       	movw	r24, r16
    1d38:	01 db       	rcall	.-2558   	; 0x133c <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1d3a:	80 91 1c 09 	lds	r24, 0x091C
    1d3e:	81 11       	cpse	r24, r1
    1d40:	d9 cf       	rjmp	.-78     	; 0x1cf4 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d42:	f7 01       	movw	r30, r14
    1d44:	80 81       	ld	r24, Z
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	c0 f3       	brcs	.-16     	; 0x1d3a <prvIdleTask+0x58>
			{
				taskYIELD();
    1d4a:	36 dc       	rcall	.-1940   	; 0x15b8 <vPortYield>
    1d4c:	f6 cf       	rjmp	.-20     	; 0x1d3a <prvIdleTask+0x58>

00001d4e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1d4e:	80 91 12 09 	lds	r24, 0x0912
    1d52:	88 23       	and	r24, r24
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 15 09 	sts	0x0915, r24
    1d5c:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1d5e:	10 92 15 09 	sts	0x0915, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1d62:	80 91 18 09 	lds	r24, 0x0918
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	fc 01       	movw	r30, r24
    1d6a:	ee 0f       	add	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	8e 0f       	add	r24, r30
    1d78:	9f 1f       	adc	r25, r31
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	eb 5b       	subi	r30, 0xBB	; 187
    1d7e:	f6 4f       	sbci	r31, 0xF6	; 246
    1d80:	80 81       	ld	r24, Z
    1d82:	81 11       	cpse	r24, r1
    1d84:	17 c0       	rjmp	.+46     	; 0x1db4 <vTaskSwitchContext+0x66>
    1d86:	80 91 18 09 	lds	r24, 0x0918
    1d8a:	81 50       	subi	r24, 0x01	; 1
    1d8c:	80 93 18 09 	sts	0x0918, r24
    1d90:	80 91 18 09 	lds	r24, 0x0918
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	fc 01       	movw	r30, r24
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	ee 0f       	add	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	8e 0f       	add	r24, r30
    1da6:	9f 1f       	adc	r25, r31
    1da8:	fc 01       	movw	r30, r24
    1daa:	eb 5b       	subi	r30, 0xBB	; 187
    1dac:	f6 4f       	sbci	r31, 0xF6	; 246
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	49 f3       	breq	.-46     	; 0x1d86 <vTaskSwitchContext+0x38>
    1db4:	e0 91 18 09 	lds	r30, 0x0918
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	cf 01       	movw	r24, r30
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	e8 0f       	add	r30, r24
    1dca:	f9 1f       	adc	r31, r25
    1dcc:	eb 5b       	subi	r30, 0xBB	; 187
    1dce:	f6 4f       	sbci	r31, 0xF6	; 246
    1dd0:	a1 81       	ldd	r26, Z+1	; 0x01
    1dd2:	b2 81       	ldd	r27, Z+2	; 0x02
    1dd4:	12 96       	adiw	r26, 0x02	; 2
    1dd6:	0d 90       	ld	r0, X+
    1dd8:	bc 91       	ld	r27, X
    1dda:	a0 2d       	mov	r26, r0
    1ddc:	b2 83       	std	Z+2, r27	; 0x02
    1dde:	a1 83       	std	Z+1, r26	; 0x01
    1de0:	cf 01       	movw	r24, r30
    1de2:	03 96       	adiw	r24, 0x03	; 3
    1de4:	a8 17       	cp	r26, r24
    1de6:	b9 07       	cpc	r27, r25
    1de8:	31 f4       	brne	.+12     	; 0x1df6 <vTaskSwitchContext+0xa8>
    1dea:	12 96       	adiw	r26, 0x02	; 2
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	13 97       	sbiw	r26, 0x03	; 3
    1df2:	92 83       	std	Z+2, r25	; 0x02
    1df4:	81 83       	std	Z+1, r24	; 0x01
    1df6:	01 80       	ldd	r0, Z+1	; 0x01
    1df8:	f2 81       	ldd	r31, Z+2	; 0x02
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	86 81       	ldd	r24, Z+6	; 0x06
    1dfe:	97 81       	ldd	r25, Z+7	; 0x07
    1e00:	90 93 6a 09 	sts	0x096A, r25
    1e04:	80 93 69 09 	sts	0x0969, r24
    1e08:	08 95       	ret

00001e0a <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e0a:	41 32       	cpi	r20, 0x21	; 33
    1e0c:	08 f0       	brcs	.+2      	; 0x1e10 <twi_readFrom+0x6>
    1e0e:	45 c0       	rjmp	.+138    	; 0x1e9a <twi_readFrom+0x90>
    1e10:	90 91 d8 09 	lds	r25, 0x09D8
    1e14:	91 11       	cpse	r25, r1
    1e16:	fc cf       	rjmp	.-8      	; 0x1e10 <twi_readFrom+0x6>
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	90 93 d8 09 	sts	0x09D8, r25
    1e1e:	20 93 d6 09 	sts	0x09D6, r18
    1e22:	2f ef       	ldi	r18, 0xFF	; 255
    1e24:	20 93 6b 09 	sts	0x096B, r18
    1e28:	10 92 b0 09 	sts	0x09B0, r1
    1e2c:	24 0f       	add	r18, r20
    1e2e:	20 93 af 09 	sts	0x09AF, r18
    1e32:	90 93 d7 09 	sts	0x09D7, r25
    1e36:	90 91 d7 09 	lds	r25, 0x09D7
    1e3a:	88 0f       	add	r24, r24
    1e3c:	89 2b       	or	r24, r25
    1e3e:	80 93 d7 09 	sts	0x09D7, r24
    1e42:	80 91 d5 09 	lds	r24, 0x09D5
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	51 f4       	brne	.+20     	; 0x1e5e <twi_readFrom+0x54>
    1e4a:	10 92 d5 09 	sts	0x09D5, r1
    1e4e:	80 91 d7 09 	lds	r24, 0x09D7
    1e52:	80 93 bb 00 	sts	0x00BB, r24
    1e56:	85 ec       	ldi	r24, 0xC5	; 197
    1e58:	80 93 bc 00 	sts	0x00BC, r24
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <twi_readFrom+0x5a>
    1e5e:	85 ee       	ldi	r24, 0xE5	; 229
    1e60:	80 93 bc 00 	sts	0x00BC, r24
    1e64:	80 91 d8 09 	lds	r24, 0x09D8
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	e1 f3       	breq	.-8      	; 0x1e64 <twi_readFrom+0x5a>
    1e6c:	80 91 b0 09 	lds	r24, 0x09B0
    1e70:	84 17       	cp	r24, r20
    1e72:	10 f4       	brcc	.+4      	; 0x1e78 <twi_readFrom+0x6e>
    1e74:	40 91 b0 09 	lds	r20, 0x09B0
    1e78:	44 23       	and	r20, r20
    1e7a:	89 f0       	breq	.+34     	; 0x1e9e <twi_readFrom+0x94>
    1e7c:	e1 eb       	ldi	r30, 0xB1	; 177
    1e7e:	f9 e0       	ldi	r31, 0x09	; 9
    1e80:	a6 2f       	mov	r26, r22
    1e82:	b7 2f       	mov	r27, r23
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	24 0f       	add	r18, r20
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	2e 54       	subi	r18, 0x4E	; 78
    1e8c:	36 4f       	sbci	r19, 0xF6	; 246
    1e8e:	91 91       	ld	r25, Z+
    1e90:	9d 93       	st	X+, r25
    1e92:	e2 17       	cp	r30, r18
    1e94:	f3 07       	cpc	r31, r19
    1e96:	d9 f7       	brne	.-10     	; 0x1e8e <twi_readFrom+0x84>
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <twi_readFrom+0x98>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	08 95       	ret
    1e9e:	84 2f       	mov	r24, r20
    1ea0:	08 95       	ret
    1ea2:	84 2f       	mov	r24, r20
    1ea4:	08 95       	ret

00001ea6 <twi_writeTo>:
    1ea6:	0f 93       	push	r16
    1ea8:	41 32       	cpi	r20, 0x21	; 33
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <twi_writeTo+0x8>
    1eac:	50 c0       	rjmp	.+160    	; 0x1f4e <twi_writeTo+0xa8>
    1eae:	90 91 d8 09 	lds	r25, 0x09D8
    1eb2:	91 11       	cpse	r25, r1
    1eb4:	fc cf       	rjmp	.-8      	; 0x1eae <twi_writeTo+0x8>
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	90 93 d8 09 	sts	0x09D8, r25
    1ebc:	00 93 d6 09 	sts	0x09D6, r16
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	90 93 6b 09 	sts	0x096B, r25
    1ec6:	10 92 b0 09 	sts	0x09B0, r1
    1eca:	40 93 af 09 	sts	0x09AF, r20
    1ece:	44 23       	and	r20, r20
    1ed0:	69 f0       	breq	.+26     	; 0x1eec <twi_writeTo+0x46>
    1ed2:	fb 01       	movw	r30, r22
    1ed4:	a1 eb       	ldi	r26, 0xB1	; 177
    1ed6:	b9 e0       	ldi	r27, 0x09	; 9
    1ed8:	6f 5f       	subi	r22, 0xFF	; 255
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	41 50       	subi	r20, 0x01	; 1
    1ede:	64 0f       	add	r22, r20
    1ee0:	71 1d       	adc	r23, r1
    1ee2:	91 91       	ld	r25, Z+
    1ee4:	9d 93       	st	X+, r25
    1ee6:	e6 17       	cp	r30, r22
    1ee8:	f7 07       	cpc	r31, r23
    1eea:	d9 f7       	brne	.-10     	; 0x1ee2 <twi_writeTo+0x3c>
    1eec:	10 92 d7 09 	sts	0x09D7, r1
    1ef0:	90 91 d7 09 	lds	r25, 0x09D7
    1ef4:	88 0f       	add	r24, r24
    1ef6:	89 2b       	or	r24, r25
    1ef8:	80 93 d7 09 	sts	0x09D7, r24
    1efc:	80 91 d5 09 	lds	r24, 0x09D5
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	51 f4       	brne	.+20     	; 0x1f18 <twi_writeTo+0x72>
    1f04:	10 92 d5 09 	sts	0x09D5, r1
    1f08:	80 91 d7 09 	lds	r24, 0x09D7
    1f0c:	80 93 bb 00 	sts	0x00BB, r24
    1f10:	85 ec       	ldi	r24, 0xC5	; 197
    1f12:	80 93 bc 00 	sts	0x00BC, r24
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <twi_writeTo+0x78>
    1f18:	85 ee       	ldi	r24, 0xE5	; 229
    1f1a:	80 93 bc 00 	sts	0x00BC, r24
    1f1e:	22 23       	and	r18, r18
    1f20:	41 f0       	breq	.+16     	; 0x1f32 <twi_writeTo+0x8c>
    1f22:	80 91 d8 09 	lds	r24, 0x09D8
    1f26:	82 30       	cpi	r24, 0x02	; 2
    1f28:	21 f4       	brne	.+8      	; 0x1f32 <twi_writeTo+0x8c>
    1f2a:	80 91 d8 09 	lds	r24, 0x09D8
    1f2e:	82 30       	cpi	r24, 0x02	; 2
    1f30:	e1 f3       	breq	.-8      	; 0x1f2a <twi_writeTo+0x84>
    1f32:	80 91 6b 09 	lds	r24, 0x096B
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <twi_writeTo+0xac>
    1f3a:	80 91 6b 09 	lds	r24, 0x096B
    1f3e:	80 32       	cpi	r24, 0x20	; 32
    1f40:	51 f0       	breq	.+20     	; 0x1f56 <twi_writeTo+0xb0>
    1f42:	80 91 6b 09 	lds	r24, 0x096B
    1f46:	80 33       	cpi	r24, 0x30	; 48
    1f48:	41 f4       	brne	.+16     	; 0x1f5a <twi_writeTo+0xb4>
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <twi_writeTo+0xb6>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <twi_writeTo+0xb6>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <twi_writeTo+0xb6>
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <twi_writeTo+0xb6>
    1f5a:	84 e0       	ldi	r24, 0x04	; 4
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <twi_transmit>:
    1f60:	61 32       	cpi	r22, 0x21	; 33
    1f62:	a8 f4       	brcc	.+42     	; 0x1f8e <twi_transmit+0x2e>
    1f64:	20 91 d8 09 	lds	r18, 0x09D8
    1f68:	24 30       	cpi	r18, 0x04	; 4
    1f6a:	99 f4       	brne	.+38     	; 0x1f92 <twi_transmit+0x32>
    1f6c:	60 93 8d 09 	sts	0x098D, r22
    1f70:	66 23       	and	r22, r22
    1f72:	89 f0       	breq	.+34     	; 0x1f96 <twi_transmit+0x36>
    1f74:	fc 01       	movw	r30, r24
    1f76:	af e8       	ldi	r26, 0x8F	; 143
    1f78:	b9 e0       	ldi	r27, 0x09	; 9
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	61 50       	subi	r22, 0x01	; 1
    1f7e:	86 0f       	add	r24, r22
    1f80:	91 1d       	adc	r25, r1
    1f82:	21 91       	ld	r18, Z+
    1f84:	2d 93       	st	X+, r18
    1f86:	e8 17       	cp	r30, r24
    1f88:	f9 07       	cpc	r31, r25
    1f8a:	d9 f7       	brne	.-10     	; 0x1f82 <twi_transmit+0x22>
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <twi_transmit+0x3a>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	08 95       	ret
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	08 95       	ret
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	08 95       	ret
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	08 95       	ret

00001f9e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1f9e:	85 ed       	ldi	r24, 0xD5	; 213
    1fa0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1fa4:	ec eb       	ldi	r30, 0xBC	; 188
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	84 fd       	sbrc	r24, 4
    1fac:	fd cf       	rjmp	.-6      	; 0x1fa8 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1fae:	10 92 d8 09 	sts	0x09D8, r1
    1fb2:	08 95       	ret

00001fb4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1fb4:	85 ec       	ldi	r24, 0xC5	; 197
    1fb6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1fba:	10 92 d8 09 	sts	0x09D8, r1
    1fbe:	08 95       	ret

00001fc0 <__vector_39>:
}

ISR(TWI_vect)
{
    1fc0:	1f 92       	push	r1
    1fc2:	0f 92       	push	r0
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	0f 92       	push	r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	0b b6       	in	r0, 0x3b	; 59
    1fcc:	0f 92       	push	r0
    1fce:	2f 93       	push	r18
    1fd0:	3f 93       	push	r19
    1fd2:	4f 93       	push	r20
    1fd4:	5f 93       	push	r21
    1fd6:	6f 93       	push	r22
    1fd8:	7f 93       	push	r23
    1fda:	8f 93       	push	r24
    1fdc:	9f 93       	push	r25
    1fde:	af 93       	push	r26
    1fe0:	bf 93       	push	r27
    1fe2:	ef 93       	push	r30
    1fe4:	ff 93       	push	r31
  switch(TW_STATUS){
    1fe6:	80 91 b9 00 	lds	r24, 0x00B9
    1fea:	88 7f       	andi	r24, 0xF8	; 248
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	89 3c       	cpi	r24, 0xC9	; 201
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <__vector_39+0x36>
    1ff4:	ee c0       	rjmp	.+476    	; 0x21d2 <__vector_39+0x212>
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	ee 58       	subi	r30, 0x8E	; 142
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2000:	80 91 d7 09 	lds	r24, 0x09D7
    2004:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2008:	85 ec       	ldi	r24, 0xC5	; 197
    200a:	80 93 bc 00 	sts	0x00BC, r24
    200e:	e1 c0       	rjmp	.+450    	; 0x21d2 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2010:	90 91 b0 09 	lds	r25, 0x09B0
    2014:	80 91 af 09 	lds	r24, 0x09AF
    2018:	98 17       	cp	r25, r24
    201a:	80 f4       	brcc	.+32     	; 0x203c <__vector_39+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    201c:	e0 91 b0 09 	lds	r30, 0x09B0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	8e 0f       	add	r24, r30
    2024:	80 93 b0 09 	sts	0x09B0, r24
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	ef 54       	subi	r30, 0x4F	; 79
    202c:	f6 4f       	sbci	r31, 0xF6	; 246
    202e:	80 81       	ld	r24, Z
    2030:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2034:	85 ec       	ldi	r24, 0xC5	; 197
    2036:	80 93 bc 00 	sts	0x00BC, r24
    203a:	cb c0       	rjmp	.+406    	; 0x21d2 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    203c:	80 91 d6 09 	lds	r24, 0x09D6
    2040:	88 23       	and	r24, r24
    2042:	11 f0       	breq	.+4      	; 0x2048 <__vector_39+0x88>
          twi_stop();
    2044:	ac df       	rcall	.-168    	; 0x1f9e <twi_stop>
    2046:	c5 c0       	rjmp	.+394    	; 0x21d2 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 d5 09 	sts	0x09D5, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    204e:	84 ea       	ldi	r24, 0xA4	; 164
    2050:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2054:	10 92 d8 09 	sts	0x09D8, r1
    2058:	bc c0       	rjmp	.+376    	; 0x21d2 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	80 93 6b 09 	sts	0x096B, r24
      twi_stop();
    2060:	9e df       	rcall	.-196    	; 0x1f9e <twi_stop>
      break;
    2062:	b7 c0       	rjmp	.+366    	; 0x21d2 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2064:	80 e3       	ldi	r24, 0x30	; 48
    2066:	80 93 6b 09 	sts	0x096B, r24
      twi_stop();
    206a:	99 df       	rcall	.-206    	; 0x1f9e <twi_stop>
      break;
    206c:	b2 c0       	rjmp	.+356    	; 0x21d2 <__vector_39+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    206e:	88 e3       	ldi	r24, 0x38	; 56
    2070:	80 93 6b 09 	sts	0x096B, r24
      twi_releaseBus();
    2074:	9f df       	rcall	.-194    	; 0x1fb4 <twi_releaseBus>
      break;
    2076:	ad c0       	rjmp	.+346    	; 0x21d2 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2078:	e0 91 b0 09 	lds	r30, 0x09B0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	8e 0f       	add	r24, r30
    2080:	80 93 b0 09 	sts	0x09B0, r24
    2084:	80 91 bb 00 	lds	r24, 0x00BB
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	ef 54       	subi	r30, 0x4F	; 79
    208c:	f6 4f       	sbci	r31, 0xF6	; 246
    208e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2090:	90 91 b0 09 	lds	r25, 0x09B0
    2094:	80 91 af 09 	lds	r24, 0x09AF
    2098:	98 17       	cp	r25, r24
    209a:	20 f4       	brcc	.+8      	; 0x20a4 <__vector_39+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    209c:	85 ec       	ldi	r24, 0xC5	; 197
    209e:	80 93 bc 00 	sts	0x00BC, r24
    20a2:	97 c0       	rjmp	.+302    	; 0x21d2 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20a4:	85 e8       	ldi	r24, 0x85	; 133
    20a6:	80 93 bc 00 	sts	0x00BC, r24
    20aa:	93 c0       	rjmp	.+294    	; 0x21d2 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20ac:	e0 91 b0 09 	lds	r30, 0x09B0
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	8e 0f       	add	r24, r30
    20b4:	80 93 b0 09 	sts	0x09B0, r24
    20b8:	80 91 bb 00 	lds	r24, 0x00BB
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	ef 54       	subi	r30, 0x4F	; 79
    20c0:	f6 4f       	sbci	r31, 0xF6	; 246
    20c2:	80 83       	st	Z, r24
	if (twi_sendStop)
    20c4:	80 91 d6 09 	lds	r24, 0x09D6
    20c8:	88 23       	and	r24, r24
    20ca:	11 f0       	breq	.+4      	; 0x20d0 <__vector_39+0x110>
          twi_stop();
    20cc:	68 df       	rcall	.-304    	; 0x1f9e <twi_stop>
    20ce:	81 c0       	rjmp	.+258    	; 0x21d2 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 d5 09 	sts	0x09D5, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20d6:	84 ea       	ldi	r24, 0xA4	; 164
    20d8:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    20dc:	10 92 d8 09 	sts	0x09D8, r1
    20e0:	78 c0       	rjmp	.+240    	; 0x21d2 <__vector_39+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    20e2:	5d df       	rcall	.-326    	; 0x1f9e <twi_stop>
      break;
    20e4:	76 c0       	rjmp	.+236    	; 0x21d2 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	80 93 d8 09 	sts	0x09D8, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    20ec:	10 92 6c 09 	sts	0x096C, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20f0:	85 ec       	ldi	r24, 0xC5	; 197
    20f2:	80 93 bc 00 	sts	0x00BC, r24
    20f6:	6d c0       	rjmp	.+218    	; 0x21d2 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    20f8:	80 91 6c 09 	lds	r24, 0x096C
    20fc:	80 32       	cpi	r24, 0x20	; 32
    20fe:	80 f4       	brcc	.+32     	; 0x2120 <__vector_39+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2100:	e0 91 6c 09 	lds	r30, 0x096C
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8e 0f       	add	r24, r30
    2108:	80 93 6c 09 	sts	0x096C, r24
    210c:	80 91 bb 00 	lds	r24, 0x00BB
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	e3 59       	subi	r30, 0x93	; 147
    2114:	f6 4f       	sbci	r31, 0xF6	; 246
    2116:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2118:	85 ec       	ldi	r24, 0xC5	; 197
    211a:	80 93 bc 00 	sts	0x00BC, r24
    211e:	59 c0       	rjmp	.+178    	; 0x21d2 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2120:	85 e8       	ldi	r24, 0x85	; 133
    2122:	80 93 bc 00 	sts	0x00BC, r24
    2126:	55 c0       	rjmp	.+170    	; 0x21d2 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2128:	80 91 6c 09 	lds	r24, 0x096C
    212c:	80 32       	cpi	r24, 0x20	; 32
    212e:	30 f4       	brcc	.+12     	; 0x213c <__vector_39+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2130:	e0 91 6c 09 	lds	r30, 0x096C
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	e3 59       	subi	r30, 0x93	; 147
    2138:	f6 4f       	sbci	r31, 0xF6	; 246
    213a:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    213c:	30 df       	rcall	.-416    	; 0x1f9e <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    213e:	60 91 6c 09 	lds	r22, 0x096C
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	e0 91 d1 09 	lds	r30, 0x09D1
    2148:	f0 91 d2 09 	lds	r31, 0x09D2
    214c:	8d e6       	ldi	r24, 0x6D	; 109
    214e:	99 e0       	ldi	r25, 0x09	; 9
    2150:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2152:	10 92 6c 09 	sts	0x096C, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2156:	2e df       	rcall	.-420    	; 0x1fb4 <twi_releaseBus>
      break;
    2158:	3c c0       	rjmp	.+120    	; 0x21d2 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    215a:	85 e8       	ldi	r24, 0x85	; 133
    215c:	80 93 bc 00 	sts	0x00BC, r24
    2160:	38 c0       	rjmp	.+112    	; 0x21d2 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2162:	84 e0       	ldi	r24, 0x04	; 4
    2164:	80 93 d8 09 	sts	0x09D8, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2168:	10 92 8e 09 	sts	0x098E, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    216c:	10 92 8d 09 	sts	0x098D, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2170:	e0 91 d3 09 	lds	r30, 0x09D3
    2174:	f0 91 d4 09 	lds	r31, 0x09D4
    2178:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    217a:	80 91 8d 09 	lds	r24, 0x098D
    217e:	81 11       	cpse	r24, r1
    2180:	05 c0       	rjmp	.+10     	; 0x218c <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	80 93 8d 09 	sts	0x098D, r24
        twi_txBuffer[0] = 0x00;
    2188:	10 92 8f 09 	sts	0x098F, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    218c:	e0 91 8e 09 	lds	r30, 0x098E
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	8e 0f       	add	r24, r30
    2194:	80 93 8e 09 	sts	0x098E, r24
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	e1 57       	subi	r30, 0x71	; 113
    219c:	f6 4f       	sbci	r31, 0xF6	; 246
    219e:	80 81       	ld	r24, Z
    21a0:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    21a4:	90 91 8e 09 	lds	r25, 0x098E
    21a8:	80 91 8d 09 	lds	r24, 0x098D
    21ac:	98 17       	cp	r25, r24
    21ae:	20 f4       	brcc	.+8      	; 0x21b8 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21b0:	85 ec       	ldi	r24, 0xC5	; 197
    21b2:	80 93 bc 00 	sts	0x00BC, r24
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21b8:	85 e8       	ldi	r24, 0x85	; 133
    21ba:	80 93 bc 00 	sts	0x00BC, r24
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21c0:	85 ec       	ldi	r24, 0xC5	; 197
    21c2:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    21c6:	10 92 d8 09 	sts	0x09D8, r1
      break;
    21ca:	03 c0       	rjmp	.+6      	; 0x21d2 <__vector_39+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    21cc:	10 92 6b 09 	sts	0x096B, r1
      twi_stop();
    21d0:	e6 de       	rcall	.-564    	; 0x1f9e <twi_stop>
      break;
  }
}
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0b be       	out	0x3b, r0	; 59
    21ee:	0f 90       	pop	r0
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	0f 90       	pop	r0
    21f4:	1f 90       	pop	r1
    21f6:	18 95       	reti

000021f8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    21f8:	80 91 09 0a 	lds	r24, 0x0A09
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	20 91 0a 0a 	lds	r18, 0x0A0A
    2202:	82 1b       	sub	r24, r18
    2204:	91 09       	sbc	r25, r1
    2206:	08 95       	ret

00002208 <_ZN7TwoWire4readEv>:
    2208:	20 91 0a 0a 	lds	r18, 0x0A0A
    220c:	80 91 09 0a 	lds	r24, 0x0A09
    2210:	28 17       	cp	r18, r24
    2212:	50 f4       	brcc	.+20     	; 0x2228 <_ZN7TwoWire4readEv+0x20>
    2214:	e2 2f       	mov	r30, r18
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	e5 5f       	subi	r30, 0xF5	; 245
    221a:	f5 4f       	sbci	r31, 0xF5	; 245
    221c:	80 81       	ld	r24, Z
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	20 93 0a 0a 	sts	0x0A0A, r18
    2226:	08 95       	ret
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	9f ef       	ldi	r25, 0xFF	; 255
    222c:	08 95       	ret

0000222e <_ZN7TwoWire4peekEv>:
    222e:	e0 91 0a 0a 	lds	r30, 0x0A0A
    2232:	80 91 09 0a 	lds	r24, 0x0A09
    2236:	e8 17       	cp	r30, r24
    2238:	30 f4       	brcc	.+12     	; 0x2246 <_ZN7TwoWire4peekEv+0x18>
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	e5 5f       	subi	r30, 0xF5	; 245
    223e:	f5 4f       	sbci	r31, 0xF5	; 245
    2240:	80 81       	ld	r24, Z
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	08 95       	ret
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	08 95       	ret

0000224c <_ZN7TwoWire5flushEv>:
    224c:	08 95       	ret

0000224e <_ZN7TwoWire5writeEPKhj>:
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	8c 01       	movw	r16, r24
    2260:	7b 01       	movw	r14, r22
    2262:	6a 01       	movw	r12, r20
    2264:	80 91 e5 09 	lds	r24, 0x09E5
    2268:	88 23       	and	r24, r24
    226a:	99 f0       	breq	.+38     	; 0x2292 <_ZN7TwoWire5writeEPKhj+0x44>
    226c:	41 15       	cp	r20, r1
    226e:	51 05       	cpc	r21, r1
    2270:	99 f0       	breq	.+38     	; 0x2298 <_ZN7TwoWire5writeEPKhj+0x4a>
    2272:	eb 01       	movw	r28, r22
    2274:	e4 0e       	add	r14, r20
    2276:	f5 1e       	adc	r15, r21
    2278:	69 91       	ld	r22, Y+
    227a:	d8 01       	movw	r26, r16
    227c:	ed 91       	ld	r30, X+
    227e:	fc 91       	ld	r31, X
    2280:	01 90       	ld	r0, Z+
    2282:	f0 81       	ld	r31, Z
    2284:	e0 2d       	mov	r30, r0
    2286:	c8 01       	movw	r24, r16
    2288:	19 95       	eicall
    228a:	ce 15       	cp	r28, r14
    228c:	df 05       	cpc	r29, r15
    228e:	a1 f7       	brne	.-24     	; 0x2278 <_ZN7TwoWire5writeEPKhj+0x2a>
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <_ZN7TwoWire5writeEPKhj+0x4a>
    2292:	64 2f       	mov	r22, r20
    2294:	c7 01       	movw	r24, r14
    2296:	64 de       	rcall	.-824    	; 0x1f60 <twi_transmit>
    2298:	c6 01       	movw	r24, r12
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	08 95       	ret

000022ac <_ZN7TwoWire5writeEh>:
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	1f 92       	push	r1
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	69 83       	std	Y+1, r22	; 0x01
    22b8:	20 91 e5 09 	lds	r18, 0x09E5
    22bc:	22 23       	and	r18, r18
    22be:	e1 f0       	breq	.+56     	; 0x22f8 <_ZN7TwoWire5writeEh+0x4c>
    22c0:	20 91 e6 09 	lds	r18, 0x09E6
    22c4:	20 32       	cpi	r18, 0x20	; 32
    22c6:	40 f0       	brcs	.+16     	; 0x22d8 <_ZN7TwoWire5writeEh+0x2c>
    22c8:	21 e0       	ldi	r18, 0x01	; 1
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	33 83       	std	Z+3, r19	; 0x03
    22d0:	22 83       	std	Z+2, r18	; 0x02
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	16 c0       	rjmp	.+44     	; 0x2304 <_ZN7TwoWire5writeEh+0x58>
    22d8:	80 91 e7 09 	lds	r24, 0x09E7
    22dc:	e8 2f       	mov	r30, r24
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	e8 51       	subi	r30, 0x18	; 24
    22e2:	f6 4f       	sbci	r31, 0xF6	; 246
    22e4:	99 81       	ldd	r25, Y+1	; 0x01
    22e6:	90 83       	st	Z, r25
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	80 93 e7 09 	sts	0x09E7, r24
    22ee:	80 93 e6 09 	sts	0x09E6, r24
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	06 c0       	rjmp	.+12     	; 0x2304 <_ZN7TwoWire5writeEh+0x58>
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	30 de       	rcall	.-928    	; 0x1f60 <twi_transmit>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0f 90       	pop	r0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <_ZN7TwoWireC1Ev>:
    230c:	fc 01       	movw	r30, r24
    230e:	13 82       	std	Z+3, r1	; 0x03
    2310:	12 82       	std	Z+2, r1	; 0x02
    2312:	48 ee       	ldi	r20, 0xE8	; 232
    2314:	53 e0       	ldi	r21, 0x03	; 3
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	44 83       	std	Z+4, r20	; 0x04
    231c:	55 83       	std	Z+5, r21	; 0x05
    231e:	66 83       	std	Z+6, r22	; 0x06
    2320:	77 83       	std	Z+7, r23	; 0x07
    2322:	83 e5       	ldi	r24, 0x53	; 83
    2324:	92 e0       	ldi	r25, 0x02	; 2
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	08 95       	ret

0000232c <_ZN7TwoWire11requestFromEhhh>:
    232c:	86 2f       	mov	r24, r22
    232e:	41 32       	cpi	r20, 0x21	; 33
    2330:	08 f0       	brcs	.+2      	; 0x2334 <_ZN7TwoWire11requestFromEhhh+0x8>
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	6b e0       	ldi	r22, 0x0B	; 11
    2336:	7a e0       	ldi	r23, 0x0A	; 10
    2338:	68 dd       	rcall	.-1328   	; 0x1e0a <twi_readFrom>
    233a:	10 92 0a 0a 	sts	0x0A0A, r1
    233e:	80 93 09 0a 	sts	0x0A09, r24
    2342:	08 95       	ret

00002344 <_ZN7TwoWire17beginTransmissionEh>:
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 e5 09 	sts	0x09E5, r24
    234a:	60 93 08 0a 	sts	0x0A08, r22
    234e:	10 92 e7 09 	sts	0x09E7, r1
    2352:	10 92 e6 09 	sts	0x09E6, r1
    2356:	08 95       	ret

00002358 <_ZN7TwoWire15endTransmissionEh>:
    2358:	0f 93       	push	r16
    235a:	06 2f       	mov	r16, r22
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	40 91 e6 09 	lds	r20, 0x09E6
    2362:	68 ee       	ldi	r22, 0xE8	; 232
    2364:	79 e0       	ldi	r23, 0x09	; 9
    2366:	80 91 08 0a 	lds	r24, 0x0A08
    236a:	9d dd       	rcall	.-1222   	; 0x1ea6 <twi_writeTo>
    236c:	10 92 e7 09 	sts	0x09E7, r1
    2370:	10 92 e6 09 	sts	0x09E6, r1
    2374:	10 92 e5 09 	sts	0x09E5, r1
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    237c:	89 ed       	ldi	r24, 0xD9	; 217
    237e:	99 e0       	ldi	r25, 0x09	; 9
    2380:	c5 cf       	rjmp	.-118    	; 0x230c <_ZN7TwoWireC1Ev>
    2382:	08 95       	ret

00002384 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    2384:	fc 01       	movw	r30, r24
    2386:	24 85       	ldd	r18, Z+12	; 0x0c
    2388:	35 85       	ldd	r19, Z+13	; 0x0d
    238a:	f9 01       	movw	r30, r18
    238c:	e0 5c       	subi	r30, 0xC0	; 192
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	32 96       	adiw	r30, 0x02	; 2
    2396:	20 81       	ld	r18, Z
    2398:	31 81       	ldd	r19, Z+1	; 0x01
    239a:	82 1b       	sub	r24, r18
    239c:	93 0b       	sbc	r25, r19
    239e:	8f 73       	andi	r24, 0x3F	; 63
    23a0:	99 27       	eor	r25, r25
    23a2:	08 95       	ret

000023a4 <_ZN14HardwareSerial4peekEv>:
    23a4:	fc 01       	movw	r30, r24
    23a6:	84 85       	ldd	r24, Z+12	; 0x0c
    23a8:	95 85       	ldd	r25, Z+13	; 0x0d
    23aa:	fc 01       	movw	r30, r24
    23ac:	e0 5c       	subi	r30, 0xC0	; 192
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	40 81       	ld	r20, Z
    23b2:	51 81       	ldd	r21, Z+1	; 0x01
    23b4:	32 96       	adiw	r30, 0x02	; 2
    23b6:	20 81       	ld	r18, Z
    23b8:	31 81       	ldd	r19, Z+1	; 0x01
    23ba:	42 17       	cp	r20, r18
    23bc:	53 07       	cpc	r21, r19
    23be:	41 f0       	breq	.+16     	; 0x23d0 <_ZN14HardwareSerial4peekEv+0x2c>
    23c0:	20 81       	ld	r18, Z
    23c2:	31 81       	ldd	r19, Z+1	; 0x01
    23c4:	fc 01       	movw	r30, r24
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	80 81       	ld	r24, Z
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	08 95       	ret
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	9f ef       	ldi	r25, 0xFF	; 255
    23d4:	08 95       	ret

000023d6 <_ZN14HardwareSerial4readEv>:
    23d6:	fc 01       	movw	r30, r24
    23d8:	84 85       	ldd	r24, Z+12	; 0x0c
    23da:	95 85       	ldd	r25, Z+13	; 0x0d
    23dc:	fc 01       	movw	r30, r24
    23de:	e0 5c       	subi	r30, 0xC0	; 192
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	40 81       	ld	r20, Z
    23e4:	51 81       	ldd	r21, Z+1	; 0x01
    23e6:	32 96       	adiw	r30, 0x02	; 2
    23e8:	20 81       	ld	r18, Z
    23ea:	31 81       	ldd	r19, Z+1	; 0x01
    23ec:	42 17       	cp	r20, r18
    23ee:	53 07       	cpc	r21, r19
    23f0:	81 f0       	breq	.+32     	; 0x2412 <_ZN14HardwareSerial4readEv+0x3c>
    23f2:	20 81       	ld	r18, Z
    23f4:	31 81       	ldd	r19, Z+1	; 0x01
    23f6:	dc 01       	movw	r26, r24
    23f8:	a2 0f       	add	r26, r18
    23fa:	b3 1f       	adc	r27, r19
    23fc:	8c 91       	ld	r24, X
    23fe:	20 81       	ld	r18, Z
    2400:	31 81       	ldd	r19, Z+1	; 0x01
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	2f 73       	andi	r18, 0x3F	; 63
    2408:	33 27       	eor	r19, r19
    240a:	31 83       	std	Z+1, r19	; 0x01
    240c:	20 83       	st	Z, r18
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	08 95       	ret
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	9f ef       	ldi	r25, 0xFF	; 255
    2416:	08 95       	ret

00002418 <_ZN14HardwareSerial5flushEv>:
    2418:	fc 01       	movw	r30, r24
    241a:	81 a1       	ldd	r24, Z+33	; 0x21
    241c:	88 23       	and	r24, r24
    241e:	29 f0       	breq	.+10     	; 0x242a <_ZN14HardwareSerial5flushEv+0x12>
    2420:	a4 89       	ldd	r26, Z+20	; 0x14
    2422:	b5 89       	ldd	r27, Z+21	; 0x15
    2424:	8c 91       	ld	r24, X
    2426:	86 ff       	sbrs	r24, 6
    2428:	fb cf       	rjmp	.-10     	; 0x2420 <_ZN14HardwareSerial5flushEv+0x8>
    242a:	11 a2       	std	Z+33, r1	; 0x21
    242c:	08 95       	ret

0000242e <_ZN14HardwareSerial5writeEh>:
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	ec 01       	movw	r28, r24
    2436:	8e 85       	ldd	r24, Y+14	; 0x0e
    2438:	9f 85       	ldd	r25, Y+15	; 0x0f
    243a:	fc 01       	movw	r30, r24
    243c:	e0 5c       	subi	r30, 0xC0	; 192
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	01 90       	ld	r0, Z+
    2442:	f0 81       	ld	r31, Z
    2444:	e0 2d       	mov	r30, r0
    2446:	31 96       	adiw	r30, 0x01	; 1
    2448:	ef 73       	andi	r30, 0x3F	; 63
    244a:	ff 27       	eor	r31, r31
    244c:	1e 2f       	mov	r17, r30
    244e:	7f 2f       	mov	r23, r31
    2450:	dc 01       	movw	r26, r24
    2452:	ae 5b       	subi	r26, 0xBE	; 190
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	21 2f       	mov	r18, r17
    2458:	37 2f       	mov	r19, r23
    245a:	4d 91       	ld	r20, X+
    245c:	5c 91       	ld	r21, X
    245e:	11 97       	sbiw	r26, 0x01	; 1
    2460:	e4 17       	cp	r30, r20
    2462:	f5 07       	cpc	r31, r21
    2464:	c1 f3       	breq	.-16     	; 0x2456 <_ZN14HardwareSerial5writeEh+0x28>
    2466:	fc 01       	movw	r30, r24
    2468:	e0 5c       	subi	r30, 0xC0	; 192
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	40 81       	ld	r20, Z
    246e:	51 81       	ldd	r21, Z+1	; 0x01
    2470:	fc 01       	movw	r30, r24
    2472:	e4 0f       	add	r30, r20
    2474:	f5 1f       	adc	r31, r21
    2476:	60 83       	st	Z, r22
    2478:	ee 85       	ldd	r30, Y+14	; 0x0e
    247a:	ff 85       	ldd	r31, Y+15	; 0x0f
    247c:	e0 5c       	subi	r30, 0xC0	; 192
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	31 83       	std	Z+1, r19	; 0x01
    2482:	20 83       	st	Z, r18
    2484:	ee 89       	ldd	r30, Y+22	; 0x16
    2486:	ff 89       	ldd	r31, Y+23	; 0x17
    2488:	40 81       	ld	r20, Z
    248a:	21 e0       	ldi	r18, 0x01	; 1
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	c9 01       	movw	r24, r18
    2490:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <_ZN14HardwareSerial5writeEh+0x6a>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <_ZN14HardwareSerial5writeEh+0x66>
    249c:	84 2b       	or	r24, r20
    249e:	80 83       	st	Z, r24
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	89 a3       	std	Y+33, r24	; 0x21
    24a4:	ec 89       	ldd	r30, Y+20	; 0x14
    24a6:	fd 89       	ldd	r31, Y+21	; 0x15
    24a8:	80 81       	ld	r24, Z
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	80 83       	st	Z, r24
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	08 95       	ret

000024ba <__vector_25>:
    24ba:	1f 92       	push	r1
    24bc:	0f 92       	push	r0
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	0f 92       	push	r0
    24c2:	11 24       	eor	r1, r1
    24c4:	0b b6       	in	r0, 0x3b	; 59
    24c6:	0f 92       	push	r0
    24c8:	2f 93       	push	r18
    24ca:	3f 93       	push	r19
    24cc:	4f 93       	push	r20
    24ce:	8f 93       	push	r24
    24d0:	9f 93       	push	r25
    24d2:	af 93       	push	r26
    24d4:	bf 93       	push	r27
    24d6:	ef 93       	push	r30
    24d8:	ff 93       	push	r31
    24da:	80 91 c0 00 	lds	r24, 0x00C0
    24de:	82 fd       	sbrc	r24, 2
    24e0:	1a c0       	rjmp	.+52     	; 0x2516 <__vector_25+0x5c>
    24e2:	40 91 c6 00 	lds	r20, 0x00C6
    24e6:	80 91 cf 0c 	lds	r24, 0x0CCF
    24ea:	90 91 d0 0c 	lds	r25, 0x0CD0
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	8f 73       	andi	r24, 0x3F	; 63
    24f2:	99 27       	eor	r25, r25
    24f4:	20 91 d1 0c 	lds	r18, 0x0CD1
    24f8:	30 91 d2 0c 	lds	r19, 0x0CD2
    24fc:	82 17       	cp	r24, r18
    24fe:	93 07       	cpc	r25, r19
    2500:	61 f0       	breq	.+24     	; 0x251a <__vector_25+0x60>
    2502:	ef ec       	ldi	r30, 0xCF	; 207
    2504:	fc e0       	ldi	r31, 0x0C	; 12
    2506:	a0 81       	ld	r26, Z
    2508:	b1 81       	ldd	r27, Z+1	; 0x01
    250a:	a1 57       	subi	r26, 0x71	; 113
    250c:	b3 4f       	sbci	r27, 0xF3	; 243
    250e:	4c 93       	st	X, r20
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
    2514:	02 c0       	rjmp	.+4      	; 0x251a <__vector_25+0x60>
    2516:	80 91 c6 00 	lds	r24, 0x00C6
    251a:	ff 91       	pop	r31
    251c:	ef 91       	pop	r30
    251e:	bf 91       	pop	r27
    2520:	af 91       	pop	r26
    2522:	9f 91       	pop	r25
    2524:	8f 91       	pop	r24
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0b be       	out	0x3b, r0	; 59
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <__vector_36>:
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	0b b6       	in	r0, 0x3b	; 59
    2546:	0f 92       	push	r0
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	8f 93       	push	r24
    2550:	9f 93       	push	r25
    2552:	af 93       	push	r26
    2554:	bf 93       	push	r27
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
    255a:	80 91 c8 00 	lds	r24, 0x00C8
    255e:	82 fd       	sbrc	r24, 2
    2560:	1a c0       	rjmp	.+52     	; 0x2596 <__vector_36+0x5c>
    2562:	40 91 ce 00 	lds	r20, 0x00CE
    2566:	80 91 47 0c 	lds	r24, 0x0C47
    256a:	90 91 48 0c 	lds	r25, 0x0C48
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	8f 73       	andi	r24, 0x3F	; 63
    2572:	99 27       	eor	r25, r25
    2574:	20 91 49 0c 	lds	r18, 0x0C49
    2578:	30 91 4a 0c 	lds	r19, 0x0C4A
    257c:	82 17       	cp	r24, r18
    257e:	93 07       	cpc	r25, r19
    2580:	61 f0       	breq	.+24     	; 0x259a <__vector_36+0x60>
    2582:	e7 e4       	ldi	r30, 0x47	; 71
    2584:	fc e0       	ldi	r31, 0x0C	; 12
    2586:	a0 81       	ld	r26, Z
    2588:	b1 81       	ldd	r27, Z+1	; 0x01
    258a:	a9 5f       	subi	r26, 0xF9	; 249
    258c:	b3 4f       	sbci	r27, 0xF3	; 243
    258e:	4c 93       	st	X, r20
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	02 c0       	rjmp	.+4      	; 0x259a <__vector_36+0x60>
    2596:	80 91 ce 00 	lds	r24, 0x00CE
    259a:	ff 91       	pop	r31
    259c:	ef 91       	pop	r30
    259e:	bf 91       	pop	r27
    25a0:	af 91       	pop	r26
    25a2:	9f 91       	pop	r25
    25a4:	8f 91       	pop	r24
    25a6:	4f 91       	pop	r20
    25a8:	3f 91       	pop	r19
    25aa:	2f 91       	pop	r18
    25ac:	0f 90       	pop	r0
    25ae:	0b be       	out	0x3b, r0	; 59
    25b0:	0f 90       	pop	r0
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	0f 90       	pop	r0
    25b6:	1f 90       	pop	r1
    25b8:	18 95       	reti

000025ba <__vector_51>:
    25ba:	1f 92       	push	r1
    25bc:	0f 92       	push	r0
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	0f 92       	push	r0
    25c2:	11 24       	eor	r1, r1
    25c4:	0b b6       	in	r0, 0x3b	; 59
    25c6:	0f 92       	push	r0
    25c8:	2f 93       	push	r18
    25ca:	3f 93       	push	r19
    25cc:	4f 93       	push	r20
    25ce:	8f 93       	push	r24
    25d0:	9f 93       	push	r25
    25d2:	af 93       	push	r26
    25d4:	bf 93       	push	r27
    25d6:	ef 93       	push	r30
    25d8:	ff 93       	push	r31
    25da:	80 91 d0 00 	lds	r24, 0x00D0
    25de:	82 fd       	sbrc	r24, 2
    25e0:	1a c0       	rjmp	.+52     	; 0x2616 <__vector_51+0x5c>
    25e2:	40 91 d6 00 	lds	r20, 0x00D6
    25e6:	80 91 bf 0b 	lds	r24, 0x0BBF
    25ea:	90 91 c0 0b 	lds	r25, 0x0BC0
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	8f 73       	andi	r24, 0x3F	; 63
    25f2:	99 27       	eor	r25, r25
    25f4:	20 91 c1 0b 	lds	r18, 0x0BC1
    25f8:	30 91 c2 0b 	lds	r19, 0x0BC2
    25fc:	82 17       	cp	r24, r18
    25fe:	93 07       	cpc	r25, r19
    2600:	61 f0       	breq	.+24     	; 0x261a <__vector_51+0x60>
    2602:	ef eb       	ldi	r30, 0xBF	; 191
    2604:	fb e0       	ldi	r31, 0x0B	; 11
    2606:	a0 81       	ld	r26, Z
    2608:	b1 81       	ldd	r27, Z+1	; 0x01
    260a:	a1 58       	subi	r26, 0x81	; 129
    260c:	b4 4f       	sbci	r27, 0xF4	; 244
    260e:	4c 93       	st	X, r20
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	02 c0       	rjmp	.+4      	; 0x261a <__vector_51+0x60>
    2616:	80 91 d6 00 	lds	r24, 0x00D6
    261a:	ff 91       	pop	r31
    261c:	ef 91       	pop	r30
    261e:	bf 91       	pop	r27
    2620:	af 91       	pop	r26
    2622:	9f 91       	pop	r25
    2624:	8f 91       	pop	r24
    2626:	4f 91       	pop	r20
    2628:	3f 91       	pop	r19
    262a:	2f 91       	pop	r18
    262c:	0f 90       	pop	r0
    262e:	0b be       	out	0x3b, r0	; 59
    2630:	0f 90       	pop	r0
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	0f 90       	pop	r0
    2636:	1f 90       	pop	r1
    2638:	18 95       	reti

0000263a <__vector_54>:
    263a:	1f 92       	push	r1
    263c:	0f 92       	push	r0
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	0f 92       	push	r0
    2642:	11 24       	eor	r1, r1
    2644:	0b b6       	in	r0, 0x3b	; 59
    2646:	0f 92       	push	r0
    2648:	2f 93       	push	r18
    264a:	3f 93       	push	r19
    264c:	4f 93       	push	r20
    264e:	8f 93       	push	r24
    2650:	9f 93       	push	r25
    2652:	af 93       	push	r26
    2654:	bf 93       	push	r27
    2656:	ef 93       	push	r30
    2658:	ff 93       	push	r31
    265a:	80 91 30 01 	lds	r24, 0x0130
    265e:	82 fd       	sbrc	r24, 2
    2660:	1a c0       	rjmp	.+52     	; 0x2696 <__vector_54+0x5c>
    2662:	40 91 36 01 	lds	r20, 0x0136
    2666:	80 91 37 0b 	lds	r24, 0x0B37
    266a:	90 91 38 0b 	lds	r25, 0x0B38
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	8f 73       	andi	r24, 0x3F	; 63
    2672:	99 27       	eor	r25, r25
    2674:	20 91 39 0b 	lds	r18, 0x0B39
    2678:	30 91 3a 0b 	lds	r19, 0x0B3A
    267c:	82 17       	cp	r24, r18
    267e:	93 07       	cpc	r25, r19
    2680:	61 f0       	breq	.+24     	; 0x269a <__vector_54+0x60>
    2682:	e7 e3       	ldi	r30, 0x37	; 55
    2684:	fb e0       	ldi	r31, 0x0B	; 11
    2686:	a0 81       	ld	r26, Z
    2688:	b1 81       	ldd	r27, Z+1	; 0x01
    268a:	a9 50       	subi	r26, 0x09	; 9
    268c:	b5 4f       	sbci	r27, 0xF5	; 245
    268e:	4c 93       	st	X, r20
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	02 c0       	rjmp	.+4      	; 0x269a <__vector_54+0x60>
    2696:	80 91 36 01 	lds	r24, 0x0136
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0b be       	out	0x3b, r0	; 59
    26b0:	0f 90       	pop	r0
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	0f 90       	pop	r0
    26b6:	1f 90       	pop	r1
    26b8:	18 95       	reti

000026ba <__vector_26>:
    26ba:	1f 92       	push	r1
    26bc:	0f 92       	push	r0
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	0b b6       	in	r0, 0x3b	; 59
    26c6:	0f 92       	push	r0
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	af 93       	push	r26
    26d2:	bf 93       	push	r27
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
    26d8:	20 91 8b 0c 	lds	r18, 0x0C8B
    26dc:	30 91 8c 0c 	lds	r19, 0x0C8C
    26e0:	80 91 8d 0c 	lds	r24, 0x0C8D
    26e4:	90 91 8e 0c 	lds	r25, 0x0C8E
    26e8:	28 17       	cp	r18, r24
    26ea:	39 07       	cpc	r19, r25
    26ec:	31 f4       	brne	.+12     	; 0x26fa <__vector_26+0x40>
    26ee:	e1 ec       	ldi	r30, 0xC1	; 193
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8f 7d       	andi	r24, 0xDF	; 223
    26f6:	80 83       	st	Z, r24
    26f8:	10 c0       	rjmp	.+32     	; 0x271a <__vector_26+0x60>
    26fa:	ed e8       	ldi	r30, 0x8D	; 141
    26fc:	fc e0       	ldi	r31, 0x0C	; 12
    26fe:	a0 81       	ld	r26, Z
    2700:	b1 81       	ldd	r27, Z+1	; 0x01
    2702:	a5 5b       	subi	r26, 0xB5	; 181
    2704:	b3 4f       	sbci	r27, 0xF3	; 243
    2706:	2c 91       	ld	r18, X
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	8f 73       	andi	r24, 0x3F	; 63
    2710:	99 27       	eor	r25, r25
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	20 93 c6 00 	sts	0x00C6, r18
    271a:	ff 91       	pop	r31
    271c:	ef 91       	pop	r30
    271e:	bf 91       	pop	r27
    2720:	af 91       	pop	r26
    2722:	9f 91       	pop	r25
    2724:	8f 91       	pop	r24
    2726:	3f 91       	pop	r19
    2728:	2f 91       	pop	r18
    272a:	0f 90       	pop	r0
    272c:	0b be       	out	0x3b, r0	; 59
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	0f 90       	pop	r0
    2734:	1f 90       	pop	r1
    2736:	18 95       	reti

00002738 <__vector_37>:
    2738:	1f 92       	push	r1
    273a:	0f 92       	push	r0
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	0f 92       	push	r0
    2740:	11 24       	eor	r1, r1
    2742:	0b b6       	in	r0, 0x3b	; 59
    2744:	0f 92       	push	r0
    2746:	2f 93       	push	r18
    2748:	3f 93       	push	r19
    274a:	8f 93       	push	r24
    274c:	9f 93       	push	r25
    274e:	af 93       	push	r26
    2750:	bf 93       	push	r27
    2752:	ef 93       	push	r30
    2754:	ff 93       	push	r31
    2756:	20 91 03 0c 	lds	r18, 0x0C03
    275a:	30 91 04 0c 	lds	r19, 0x0C04
    275e:	80 91 05 0c 	lds	r24, 0x0C05
    2762:	90 91 06 0c 	lds	r25, 0x0C06
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	31 f4       	brne	.+12     	; 0x2778 <__vector_37+0x40>
    276c:	e9 ec       	ldi	r30, 0xC9	; 201
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8f 7d       	andi	r24, 0xDF	; 223
    2774:	80 83       	st	Z, r24
    2776:	10 c0       	rjmp	.+32     	; 0x2798 <__vector_37+0x60>
    2778:	e5 e0       	ldi	r30, 0x05	; 5
    277a:	fc e0       	ldi	r31, 0x0C	; 12
    277c:	a0 81       	ld	r26, Z
    277e:	b1 81       	ldd	r27, Z+1	; 0x01
    2780:	ad 53       	subi	r26, 0x3D	; 61
    2782:	b4 4f       	sbci	r27, 0xF4	; 244
    2784:	2c 91       	ld	r18, X
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	8f 73       	andi	r24, 0x3F	; 63
    278e:	99 27       	eor	r25, r25
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
    2794:	20 93 ce 00 	sts	0x00CE, r18
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	3f 91       	pop	r19
    27a6:	2f 91       	pop	r18
    27a8:	0f 90       	pop	r0
    27aa:	0b be       	out	0x3b, r0	; 59
    27ac:	0f 90       	pop	r0
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	0f 90       	pop	r0
    27b2:	1f 90       	pop	r1
    27b4:	18 95       	reti

000027b6 <__vector_52>:
    27b6:	1f 92       	push	r1
    27b8:	0f 92       	push	r0
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	0f 92       	push	r0
    27be:	11 24       	eor	r1, r1
    27c0:	0b b6       	in	r0, 0x3b	; 59
    27c2:	0f 92       	push	r0
    27c4:	2f 93       	push	r18
    27c6:	3f 93       	push	r19
    27c8:	8f 93       	push	r24
    27ca:	9f 93       	push	r25
    27cc:	af 93       	push	r26
    27ce:	bf 93       	push	r27
    27d0:	ef 93       	push	r30
    27d2:	ff 93       	push	r31
    27d4:	20 91 7b 0b 	lds	r18, 0x0B7B
    27d8:	30 91 7c 0b 	lds	r19, 0x0B7C
    27dc:	80 91 7d 0b 	lds	r24, 0x0B7D
    27e0:	90 91 7e 0b 	lds	r25, 0x0B7E
    27e4:	28 17       	cp	r18, r24
    27e6:	39 07       	cpc	r19, r25
    27e8:	31 f4       	brne	.+12     	; 0x27f6 <__vector_52+0x40>
    27ea:	e1 ed       	ldi	r30, 0xD1	; 209
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7d       	andi	r24, 0xDF	; 223
    27f2:	80 83       	st	Z, r24
    27f4:	10 c0       	rjmp	.+32     	; 0x2816 <__vector_52+0x60>
    27f6:	ed e7       	ldi	r30, 0x7D	; 125
    27f8:	fb e0       	ldi	r31, 0x0B	; 11
    27fa:	a0 81       	ld	r26, Z
    27fc:	b1 81       	ldd	r27, Z+1	; 0x01
    27fe:	a5 5c       	subi	r26, 0xC5	; 197
    2800:	b4 4f       	sbci	r27, 0xF4	; 244
    2802:	2c 91       	ld	r18, X
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 96       	adiw	r24, 0x01	; 1
    280a:	8f 73       	andi	r24, 0x3F	; 63
    280c:	99 27       	eor	r25, r25
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	20 93 d6 00 	sts	0x00D6, r18
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	bf 91       	pop	r27
    281c:	af 91       	pop	r26
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	3f 91       	pop	r19
    2824:	2f 91       	pop	r18
    2826:	0f 90       	pop	r0
    2828:	0b be       	out	0x3b, r0	; 59
    282a:	0f 90       	pop	r0
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	0f 90       	pop	r0
    2830:	1f 90       	pop	r1
    2832:	18 95       	reti

00002834 <__vector_55>:
    2834:	1f 92       	push	r1
    2836:	0f 92       	push	r0
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	0f 92       	push	r0
    283c:	11 24       	eor	r1, r1
    283e:	0b b6       	in	r0, 0x3b	; 59
    2840:	0f 92       	push	r0
    2842:	2f 93       	push	r18
    2844:	3f 93       	push	r19
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
    2852:	20 91 f3 0a 	lds	r18, 0x0AF3
    2856:	30 91 f4 0a 	lds	r19, 0x0AF4
    285a:	80 91 f5 0a 	lds	r24, 0x0AF5
    285e:	90 91 f6 0a 	lds	r25, 0x0AF6
    2862:	28 17       	cp	r18, r24
    2864:	39 07       	cpc	r19, r25
    2866:	31 f4       	brne	.+12     	; 0x2874 <__vector_55+0x40>
    2868:	e1 e3       	ldi	r30, 0x31	; 49
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	80 81       	ld	r24, Z
    286e:	8f 7d       	andi	r24, 0xDF	; 223
    2870:	80 83       	st	Z, r24
    2872:	10 c0       	rjmp	.+32     	; 0x2894 <__vector_55+0x60>
    2874:	e5 ef       	ldi	r30, 0xF5	; 245
    2876:	fa e0       	ldi	r31, 0x0A	; 10
    2878:	a0 81       	ld	r26, Z
    287a:	b1 81       	ldd	r27, Z+1	; 0x01
    287c:	ad 54       	subi	r26, 0x4D	; 77
    287e:	b5 4f       	sbci	r27, 0xF5	; 245
    2880:	2c 91       	ld	r18, X
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	8f 73       	andi	r24, 0x3F	; 63
    288a:	99 27       	eor	r25, r25
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	20 93 36 01 	sts	0x0136, r18
    2894:	ff 91       	pop	r31
    2896:	ef 91       	pop	r30
    2898:	bf 91       	pop	r27
    289a:	af 91       	pop	r26
    289c:	9f 91       	pop	r25
    289e:	8f 91       	pop	r24
    28a0:	3f 91       	pop	r19
    28a2:	2f 91       	pop	r18
    28a4:	0f 90       	pop	r0
    28a6:	0b be       	out	0x3b, r0	; 59
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	0f 90       	pop	r0
    28ae:	1f 90       	pop	r1
    28b0:	18 95       	reti

000028b2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    28b2:	8f 92       	push	r8
    28b4:	9f 92       	push	r9
    28b6:	af 92       	push	r10
    28b8:	bf 92       	push	r11
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	fc 01       	movw	r30, r24
    28d0:	13 82       	std	Z+3, r1	; 0x03
    28d2:	12 82       	std	Z+2, r1	; 0x02
    28d4:	88 ee       	ldi	r24, 0xE8	; 232
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	84 83       	std	Z+4, r24	; 0x04
    28de:	95 83       	std	Z+5, r25	; 0x05
    28e0:	a6 83       	std	Z+6, r26	; 0x06
    28e2:	b7 83       	std	Z+7, r27	; 0x07
    28e4:	83 e6       	ldi	r24, 0x63	; 99
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
    28ec:	75 87       	std	Z+13, r23	; 0x0d
    28ee:	64 87       	std	Z+12, r22	; 0x0c
    28f0:	57 87       	std	Z+15, r21	; 0x0f
    28f2:	46 87       	std	Z+14, r20	; 0x0e
    28f4:	31 8b       	std	Z+17, r19	; 0x11
    28f6:	20 8b       	std	Z+16, r18	; 0x10
    28f8:	13 8b       	std	Z+19, r17	; 0x13
    28fa:	02 8b       	std	Z+18, r16	; 0x12
    28fc:	f5 8a       	std	Z+21, r15	; 0x15
    28fe:	e4 8a       	std	Z+20, r14	; 0x14
    2900:	d7 8a       	std	Z+23, r13	; 0x17
    2902:	c6 8a       	std	Z+22, r12	; 0x16
    2904:	b1 8e       	std	Z+25, r11	; 0x19
    2906:	a0 8e       	std	Z+24, r10	; 0x18
    2908:	93 8e       	std	Z+27, r9	; 0x1b
    290a:	82 8e       	std	Z+26, r8	; 0x1a
    290c:	88 89       	ldd	r24, Y+16	; 0x10
    290e:	84 8f       	std	Z+28, r24	; 0x1c
    2910:	89 89       	ldd	r24, Y+17	; 0x11
    2912:	85 8f       	std	Z+29, r24	; 0x1d
    2914:	8a 89       	ldd	r24, Y+18	; 0x12
    2916:	86 8f       	std	Z+30, r24	; 0x1e
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	87 8f       	std	Z+31, r24	; 0x1f
    291c:	8c 89       	ldd	r24, Y+20	; 0x14
    291e:	80 a3       	std	Z+32, r24	; 0x20
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	08 95       	ret

0000293a <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    293a:	5f 92       	push	r5
    293c:	6f 92       	push	r6
    293e:	7f 92       	push	r7
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    2958:	55 24       	eor	r5, r5
    295a:	53 94       	inc	r5
    295c:	5f 92       	push	r5
    295e:	0f 2e       	mov	r0, r31
    2960:	f5 e0       	ldi	r31, 0x05	; 5
    2962:	6f 2e       	mov	r6, r31
    2964:	f0 2d       	mov	r31, r0
    2966:	6f 92       	push	r6
    2968:	0f 2e       	mov	r0, r31
    296a:	f7 e0       	ldi	r31, 0x07	; 7
    296c:	7f 2e       	mov	r7, r31
    296e:	f0 2d       	mov	r31, r0
    2970:	7f 92       	push	r7
    2972:	d3 e0       	ldi	r29, 0x03	; 3
    2974:	df 93       	push	r29
    2976:	c4 e0       	ldi	r28, 0x04	; 4
    2978:	cf 93       	push	r28
    297a:	0f 2e       	mov	r0, r31
    297c:	f6 ec       	ldi	r31, 0xC6	; 198
    297e:	8f 2e       	mov	r8, r31
    2980:	91 2c       	mov	r9, r1
    2982:	f0 2d       	mov	r31, r0
    2984:	0f 2e       	mov	r0, r31
    2986:	f2 ec       	ldi	r31, 0xC2	; 194
    2988:	af 2e       	mov	r10, r31
    298a:	b1 2c       	mov	r11, r1
    298c:	f0 2d       	mov	r31, r0
    298e:	0f 2e       	mov	r0, r31
    2990:	f1 ec       	ldi	r31, 0xC1	; 193
    2992:	cf 2e       	mov	r12, r31
    2994:	d1 2c       	mov	r13, r1
    2996:	f0 2d       	mov	r31, r0
    2998:	0f 2e       	mov	r0, r31
    299a:	f0 ec       	ldi	r31, 0xC0	; 192
    299c:	ef 2e       	mov	r14, r31
    299e:	f1 2c       	mov	r15, r1
    29a0:	f0 2d       	mov	r31, r0
    29a2:	04 ec       	ldi	r16, 0xC4	; 196
    29a4:	10 e0       	ldi	r17, 0x00	; 0
    29a6:	25 ec       	ldi	r18, 0xC5	; 197
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4b e4       	ldi	r20, 0x4B	; 75
    29ac:	5c e0       	ldi	r21, 0x0C	; 12
    29ae:	6f e8       	ldi	r22, 0x8F	; 143
    29b0:	7c e0       	ldi	r23, 0x0C	; 12
    29b2:	81 e9       	ldi	r24, 0x91	; 145
    29b4:	9a e0       	ldi	r25, 0x0A	; 10
    29b6:	7d df       	rcall	.-262    	; 0x28b2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    29b8:	5f 92       	push	r5
    29ba:	6f 92       	push	r6
    29bc:	7f 92       	push	r7
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	0f 2e       	mov	r0, r31
    29c4:	fe ec       	ldi	r31, 0xCE	; 206
    29c6:	8f 2e       	mov	r8, r31
    29c8:	91 2c       	mov	r9, r1
    29ca:	f0 2d       	mov	r31, r0
    29cc:	0f 2e       	mov	r0, r31
    29ce:	fa ec       	ldi	r31, 0xCA	; 202
    29d0:	af 2e       	mov	r10, r31
    29d2:	b1 2c       	mov	r11, r1
    29d4:	f0 2d       	mov	r31, r0
    29d6:	0f 2e       	mov	r0, r31
    29d8:	f9 ec       	ldi	r31, 0xC9	; 201
    29da:	cf 2e       	mov	r12, r31
    29dc:	d1 2c       	mov	r13, r1
    29de:	f0 2d       	mov	r31, r0
    29e0:	0f 2e       	mov	r0, r31
    29e2:	f8 ec       	ldi	r31, 0xC8	; 200
    29e4:	ef 2e       	mov	r14, r31
    29e6:	f1 2c       	mov	r15, r1
    29e8:	f0 2d       	mov	r31, r0
    29ea:	0c ec       	ldi	r16, 0xCC	; 204
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	2d ec       	ldi	r18, 0xCD	; 205
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	43 ec       	ldi	r20, 0xC3	; 195
    29f4:	5b e0       	ldi	r21, 0x0B	; 11
    29f6:	67 e0       	ldi	r22, 0x07	; 7
    29f8:	7c e0       	ldi	r23, 0x0C	; 12
    29fa:	8f e6       	ldi	r24, 0x6F	; 111
    29fc:	9a e0       	ldi	r25, 0x0A	; 10
    29fe:	59 df       	rcall	.-334    	; 0x28b2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    2a00:	5f 92       	push	r5
    2a02:	6f 92       	push	r6
    2a04:	7f 92       	push	r7
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	0f 2e       	mov	r0, r31
    2a0c:	f6 ed       	ldi	r31, 0xD6	; 214
    2a0e:	8f 2e       	mov	r8, r31
    2a10:	91 2c       	mov	r9, r1
    2a12:	f0 2d       	mov	r31, r0
    2a14:	0f 2e       	mov	r0, r31
    2a16:	f2 ed       	ldi	r31, 0xD2	; 210
    2a18:	af 2e       	mov	r10, r31
    2a1a:	b1 2c       	mov	r11, r1
    2a1c:	f0 2d       	mov	r31, r0
    2a1e:	0f 2e       	mov	r0, r31
    2a20:	f1 ed       	ldi	r31, 0xD1	; 209
    2a22:	cf 2e       	mov	r12, r31
    2a24:	d1 2c       	mov	r13, r1
    2a26:	f0 2d       	mov	r31, r0
    2a28:	0f 2e       	mov	r0, r31
    2a2a:	f0 ed       	ldi	r31, 0xD0	; 208
    2a2c:	ef 2e       	mov	r14, r31
    2a2e:	f1 2c       	mov	r15, r1
    2a30:	f0 2d       	mov	r31, r0
    2a32:	04 ed       	ldi	r16, 0xD4	; 212
    2a34:	10 e0       	ldi	r17, 0x00	; 0
    2a36:	25 ed       	ldi	r18, 0xD5	; 213
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	4b e3       	ldi	r20, 0x3B	; 59
    2a3c:	5b e0       	ldi	r21, 0x0B	; 11
    2a3e:	6f e7       	ldi	r22, 0x7F	; 127
    2a40:	7b e0       	ldi	r23, 0x0B	; 11
    2a42:	8d e4       	ldi	r24, 0x4D	; 77
    2a44:	9a e0       	ldi	r25, 0x0A	; 10
    2a46:	35 df       	rcall	.-406    	; 0x28b2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    2a48:	5f 92       	push	r5
    2a4a:	6f 92       	push	r6
    2a4c:	7f 92       	push	r7
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	0f 2e       	mov	r0, r31
    2a54:	f6 e3       	ldi	r31, 0x36	; 54
    2a56:	8f 2e       	mov	r8, r31
    2a58:	99 24       	eor	r9, r9
    2a5a:	93 94       	inc	r9
    2a5c:	f0 2d       	mov	r31, r0
    2a5e:	0f 2e       	mov	r0, r31
    2a60:	f2 e3       	ldi	r31, 0x32	; 50
    2a62:	af 2e       	mov	r10, r31
    2a64:	bb 24       	eor	r11, r11
    2a66:	b3 94       	inc	r11
    2a68:	f0 2d       	mov	r31, r0
    2a6a:	0f 2e       	mov	r0, r31
    2a6c:	f1 e3       	ldi	r31, 0x31	; 49
    2a6e:	cf 2e       	mov	r12, r31
    2a70:	dd 24       	eor	r13, r13
    2a72:	d3 94       	inc	r13
    2a74:	f0 2d       	mov	r31, r0
    2a76:	0f 2e       	mov	r0, r31
    2a78:	f0 e3       	ldi	r31, 0x30	; 48
    2a7a:	ef 2e       	mov	r14, r31
    2a7c:	ff 24       	eor	r15, r15
    2a7e:	f3 94       	inc	r15
    2a80:	f0 2d       	mov	r31, r0
    2a82:	04 e3       	ldi	r16, 0x34	; 52
    2a84:	11 e0       	ldi	r17, 0x01	; 1
    2a86:	25 e3       	ldi	r18, 0x35	; 53
    2a88:	31 e0       	ldi	r19, 0x01	; 1
    2a8a:	43 eb       	ldi	r20, 0xB3	; 179
    2a8c:	5a e0       	ldi	r21, 0x0A	; 10
    2a8e:	67 ef       	ldi	r22, 0xF7	; 247
    2a90:	7a e0       	ldi	r23, 0x0A	; 10
    2a92:	8b e2       	ldi	r24, 0x2B	; 43
    2a94:	9a e0       	ldi	r25, 0x0A	; 10
    2a96:	0d df       	rcall	.-486    	; 0x28b2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    2a98:	8d b7       	in	r24, 0x3d	; 61
    2a9a:	9e b7       	in	r25, 0x3e	; 62
    2a9c:	44 96       	adiw	r24, 0x14	; 20
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	9e bf       	out	0x3e, r25	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	8d bf       	out	0x3d, r24	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	bf 90       	pop	r11
    2aba:	af 90       	pop	r10
    2abc:	9f 90       	pop	r9
    2abe:	8f 90       	pop	r8
    2ac0:	7f 90       	pop	r7
    2ac2:	6f 90       	pop	r6
    2ac4:	5f 90       	pop	r5
    2ac6:	08 95       	ret

00002ac8 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	6c 01       	movw	r12, r24
    2ada:	41 15       	cp	r20, r1
    2adc:	51 05       	cpc	r21, r1
    2ade:	b1 f0       	breq	.+44     	; 0x2b0c <_ZN5Print5writeEPKhj+0x44>
    2ae0:	06 2f       	mov	r16, r22
    2ae2:	17 2f       	mov	r17, r23
    2ae4:	ea 01       	movw	r28, r20
    2ae6:	e1 2c       	mov	r14, r1
    2ae8:	f1 2c       	mov	r15, r1
    2aea:	d8 01       	movw	r26, r16
    2aec:	6d 91       	ld	r22, X+
    2aee:	8d 01       	movw	r16, r26
    2af0:	d6 01       	movw	r26, r12
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	01 90       	ld	r0, Z+
    2af8:	f0 81       	ld	r31, Z
    2afa:	e0 2d       	mov	r30, r0
    2afc:	c6 01       	movw	r24, r12
    2afe:	19 95       	eicall
    2b00:	e8 0e       	add	r14, r24
    2b02:	f9 1e       	adc	r15, r25
    2b04:	21 97       	sbiw	r28, 0x01	; 1
    2b06:	20 97       	sbiw	r28, 0x00	; 0
    2b08:	81 f7       	brne	.-32     	; 0x2aea <_ZN5Print5writeEPKhj+0x22>
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <_ZN5Print5writeEPKhj+0x48>
    2b0c:	e1 2c       	mov	r14, r1
    2b0e:	f1 2c       	mov	r15, r1
    2b10:	c7 01       	movw	r24, r14
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	08 95       	ret

00002b24 <_ZN5Print5printEPK19__FlashStringHelper>:
    2b24:	ef 92       	push	r14
    2b26:	ff 92       	push	r15
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	7c 01       	movw	r14, r24
    2b32:	eb 01       	movw	r28, r22
    2b34:	21 96       	adiw	r28, 0x01	; 1
    2b36:	fb 01       	movw	r30, r22
    2b38:	64 91       	lpm	r22, Z
    2b3a:	66 23       	and	r22, r22
    2b3c:	89 f0       	breq	.+34     	; 0x2b60 <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
    2b3e:	00 e0       	ldi	r16, 0x00	; 0
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	f7 01       	movw	r30, r14
    2b44:	a0 81       	ld	r26, Z
    2b46:	b1 81       	ldd	r27, Z+1	; 0x01
    2b48:	ed 91       	ld	r30, X+
    2b4a:	fc 91       	ld	r31, X
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	19 95       	eicall
    2b50:	08 0f       	add	r16, r24
    2b52:	19 1f       	adc	r17, r25
    2b54:	fe 01       	movw	r30, r28
    2b56:	64 91       	lpm	r22, Z
    2b58:	21 96       	adiw	r28, 0x01	; 1
    2b5a:	66 23       	and	r22, r22
    2b5c:	19 f0       	breq	.+6      	; 0x2b64 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
    2b5e:	f1 cf       	rjmp	.-30     	; 0x2b42 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    2b60:	00 e0       	ldi	r16, 0x00	; 0
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	c8 01       	movw	r24, r16
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	08 95       	ret

00002b74 <_ZN5Print5printEPKc>:
    2b74:	61 15       	cp	r22, r1
    2b76:	71 05       	cpc	r23, r1
    2b78:	81 f0       	breq	.+32     	; 0x2b9a <_ZN5Print5printEPKc+0x26>
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	01 90       	ld	r0, Z+
    2b7e:	00 20       	and	r0, r0
    2b80:	e9 f7       	brne	.-6      	; 0x2b7c <_ZN5Print5printEPKc+0x8>
    2b82:	31 97       	sbiw	r30, 0x01	; 1
    2b84:	af 01       	movw	r20, r30
    2b86:	46 1b       	sub	r20, r22
    2b88:	57 0b       	sbc	r21, r23
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	ed 91       	ld	r30, X+
    2b8e:	fc 91       	ld	r31, X
    2b90:	02 80       	ldd	r0, Z+2	; 0x02
    2b92:	f3 81       	ldd	r31, Z+3	; 0x03
    2b94:	e0 2d       	mov	r30, r0
    2b96:	19 95       	eicall
    2b98:	08 95       	ret
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	08 95       	ret

00002ba0 <_ZN5Print5printEc>:
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	ed 91       	ld	r30, X+
    2ba4:	fc 91       	ld	r31, X
    2ba6:	01 90       	ld	r0, Z+
    2ba8:	f0 81       	ld	r31, Z
    2baa:	e0 2d       	mov	r30, r0
    2bac:	19 95       	eicall
    2bae:	08 95       	ret

00002bb0 <_ZN5Print7printlnEv>:
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	ec 01       	movw	r28, r24
    2bba:	6d e0       	ldi	r22, 0x0D	; 13
    2bbc:	f1 df       	rcall	.-30     	; 0x2ba0 <_ZN5Print5printEc>
    2bbe:	8c 01       	movw	r16, r24
    2bc0:	6a e0       	ldi	r22, 0x0A	; 10
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	ed df       	rcall	.-38     	; 0x2ba0 <_ZN5Print5printEc>
    2bc6:	80 0f       	add	r24, r16
    2bc8:	91 1f       	adc	r25, r17
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
    2bde:	a2 df       	rcall	.-188    	; 0x2b24 <_ZN5Print5printEPK19__FlashStringHelper>
    2be0:	8c 01       	movw	r16, r24
    2be2:	ce 01       	movw	r24, r28
    2be4:	e5 df       	rcall	.-54     	; 0x2bb0 <_ZN5Print7printlnEv>
    2be6:	80 0f       	add	r24, r16
    2be8:	91 1f       	adc	r25, r17
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	08 95       	ret

00002bf4 <_ZN5Print7printlnEPKc>:
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	ec 01       	movw	r28, r24
    2bfe:	ba df       	rcall	.-140    	; 0x2b74 <_ZN5Print5printEPKc>
    2c00:	8c 01       	movw	r16, r24
    2c02:	ce 01       	movw	r24, r28
    2c04:	d5 df       	rcall	.-86     	; 0x2bb0 <_ZN5Print7printlnEv>
    2c06:	80 0f       	add	r24, r16
    2c08:	91 1f       	adc	r25, r17
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <_ZN5Print11printNumberEmh>:
    2c14:	6f 92       	push	r6
    2c16:	7f 92       	push	r7
    2c18:	8f 92       	push	r8
    2c1a:	9f 92       	push	r9
    2c1c:	af 92       	push	r10
    2c1e:	bf 92       	push	r11
    2c20:	cf 92       	push	r12
    2c22:	df 92       	push	r13
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	a1 97       	sbiw	r28, 0x21	; 33
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	6c 01       	movw	r12, r24
    2c42:	74 2e       	mov	r7, r20
    2c44:	35 2f       	mov	r19, r21
    2c46:	86 2f       	mov	r24, r22
    2c48:	97 2f       	mov	r25, r23
    2c4a:	62 2e       	mov	r6, r18
    2c4c:	19 a2       	std	Y+33, r1	; 0x21
    2c4e:	21 e0       	ldi	r18, 0x01	; 1
    2c50:	26 15       	cp	r18, r6
    2c52:	20 f0       	brcs	.+8      	; 0x2c5c <_ZN5Print11printNumberEmh+0x48>
    2c54:	0f 2e       	mov	r0, r31
    2c56:	fa e0       	ldi	r31, 0x0A	; 10
    2c58:	6f 2e       	mov	r6, r31
    2c5a:	f0 2d       	mov	r31, r0
    2c5c:	7e 01       	movw	r14, r28
    2c5e:	a1 e2       	ldi	r26, 0x21	; 33
    2c60:	ea 0e       	add	r14, r26
    2c62:	f1 1c       	adc	r15, r1
    2c64:	86 2c       	mov	r8, r6
    2c66:	91 2c       	mov	r9, r1
    2c68:	a1 2c       	mov	r10, r1
    2c6a:	b1 2c       	mov	r11, r1
    2c6c:	67 2d       	mov	r22, r7
    2c6e:	73 2f       	mov	r23, r19
    2c70:	a5 01       	movw	r20, r10
    2c72:	94 01       	movw	r18, r8
    2c74:	13 d5       	rcall	.+2598   	; 0x369c <__udivmodsi4>
    2c76:	e2 2f       	mov	r30, r18
    2c78:	73 2f       	mov	r23, r19
    2c7a:	02 2f       	mov	r16, r18
    2c7c:	13 2f       	mov	r17, r19
    2c7e:	24 2f       	mov	r18, r20
    2c80:	35 2f       	mov	r19, r21
    2c82:	f7 2d       	mov	r31, r7
    2c84:	6e 9e       	mul	r6, r30
    2c86:	f0 19       	sub	r31, r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	b1 e0       	ldi	r27, 0x01	; 1
    2c8c:	eb 1a       	sub	r14, r27
    2c8e:	f1 08       	sbc	r15, r1
    2c90:	fa 30       	cpi	r31, 0x0A	; 10
    2c92:	10 f4       	brcc	.+4      	; 0x2c98 <_ZN5Print11printNumberEmh+0x84>
    2c94:	f0 5d       	subi	r31, 0xD0	; 208
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <_ZN5Print11printNumberEmh+0x86>
    2c98:	f9 5c       	subi	r31, 0xC9	; 201
    2c9a:	d7 01       	movw	r26, r14
    2c9c:	fc 93       	st	X, r31
    2c9e:	01 2b       	or	r16, r17
    2ca0:	02 2b       	or	r16, r18
    2ca2:	03 2b       	or	r16, r19
    2ca4:	29 f0       	breq	.+10     	; 0x2cb0 <_ZN5Print11printNumberEmh+0x9c>
    2ca6:	7e 2e       	mov	r7, r30
    2ca8:	37 2f       	mov	r19, r23
    2caa:	84 2f       	mov	r24, r20
    2cac:	95 2f       	mov	r25, r21
    2cae:	de cf       	rjmp	.-68     	; 0x2c6c <_ZN5Print11printNumberEmh+0x58>
    2cb0:	e1 14       	cp	r14, r1
    2cb2:	f1 04       	cpc	r15, r1
    2cb4:	91 f0       	breq	.+36     	; 0x2cda <_ZN5Print11printNumberEmh+0xc6>
    2cb6:	f7 01       	movw	r30, r14
    2cb8:	01 90       	ld	r0, Z+
    2cba:	00 20       	and	r0, r0
    2cbc:	e9 f7       	brne	.-6      	; 0x2cb8 <_ZN5Print11printNumberEmh+0xa4>
    2cbe:	31 97       	sbiw	r30, 0x01	; 1
    2cc0:	af 01       	movw	r20, r30
    2cc2:	4e 19       	sub	r20, r14
    2cc4:	5f 09       	sbc	r21, r15
    2cc6:	d6 01       	movw	r26, r12
    2cc8:	ed 91       	ld	r30, X+
    2cca:	fc 91       	ld	r31, X
    2ccc:	02 80       	ldd	r0, Z+2	; 0x02
    2cce:	f3 81       	ldd	r31, Z+3	; 0x03
    2cd0:	e0 2d       	mov	r30, r0
    2cd2:	b7 01       	movw	r22, r14
    2cd4:	c6 01       	movw	r24, r12
    2cd6:	19 95       	eicall
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <_ZN5Print11printNumberEmh+0xca>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a1 96       	adiw	r28, 0x21	; 33
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	bf 90       	pop	r11
    2cfc:	af 90       	pop	r10
    2cfe:	9f 90       	pop	r9
    2d00:	8f 90       	pop	r8
    2d02:	7f 90       	pop	r7
    2d04:	6f 90       	pop	r6
    2d06:	08 95       	ret

00002d08 <_ZN5Print5printEli>:
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ec 01       	movw	r28, r24
    2d1a:	6a 01       	movw	r12, r20
    2d1c:	7b 01       	movw	r14, r22
    2d1e:	21 15       	cp	r18, r1
    2d20:	31 05       	cpc	r19, r1
    2d22:	41 f4       	brne	.+16     	; 0x2d34 <_ZN5Print5printEli+0x2c>
    2d24:	e8 81       	ld	r30, Y
    2d26:	f9 81       	ldd	r31, Y+1	; 0x01
    2d28:	01 90       	ld	r0, Z+
    2d2a:	f0 81       	ld	r31, Z
    2d2c:	e0 2d       	mov	r30, r0
    2d2e:	64 2f       	mov	r22, r20
    2d30:	19 95       	eicall
    2d32:	19 c0       	rjmp	.+50     	; 0x2d66 <_ZN5Print5printEli+0x5e>
    2d34:	2a 30       	cpi	r18, 0x0A	; 10
    2d36:	31 05       	cpc	r19, r1
    2d38:	a9 f4       	brne	.+42     	; 0x2d64 <_ZN5Print5printEli+0x5c>
    2d3a:	77 23       	and	r23, r23
    2d3c:	84 f4       	brge	.+32     	; 0x2d5e <_ZN5Print5printEli+0x56>
    2d3e:	6d e2       	ldi	r22, 0x2D	; 45
    2d40:	2f df       	rcall	.-418    	; 0x2ba0 <_ZN5Print5printEc>
    2d42:	8c 01       	movw	r16, r24
    2d44:	44 27       	eor	r20, r20
    2d46:	55 27       	eor	r21, r21
    2d48:	ba 01       	movw	r22, r20
    2d4a:	4c 19       	sub	r20, r12
    2d4c:	5d 09       	sbc	r21, r13
    2d4e:	6e 09       	sbc	r22, r14
    2d50:	7f 09       	sbc	r23, r15
    2d52:	2a e0       	ldi	r18, 0x0A	; 10
    2d54:	ce 01       	movw	r24, r28
    2d56:	5e df       	rcall	.-324    	; 0x2c14 <_ZN5Print11printNumberEmh>
    2d58:	80 0f       	add	r24, r16
    2d5a:	91 1f       	adc	r25, r17
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <_ZN5Print5printEli+0x5e>
    2d5e:	2a e0       	ldi	r18, 0x0A	; 10
    2d60:	59 df       	rcall	.-334    	; 0x2c14 <_ZN5Print11printNumberEmh>
    2d62:	01 c0       	rjmp	.+2      	; 0x2d66 <_ZN5Print5printEli+0x5e>
    2d64:	57 df       	rcall	.-338    	; 0x2c14 <_ZN5Print11printNumberEmh>
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	df 90       	pop	r13
    2d74:	cf 90       	pop	r12
    2d76:	08 95       	ret

00002d78 <_ZN5Print5printEmi>:
    2d78:	21 15       	cp	r18, r1
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	49 f4       	brne	.+18     	; 0x2d90 <_ZN5Print5printEmi+0x18>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	01 90       	ld	r0, Z+
    2d86:	f0 81       	ld	r31, Z
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	64 2f       	mov	r22, r20
    2d8c:	19 95       	eicall
    2d8e:	08 95       	ret
    2d90:	41 cf       	rjmp	.-382    	; 0x2c14 <_ZN5Print11printNumberEmh>
    2d92:	08 95       	ret

00002d94 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	ec 01       	movw	r28, r24
    2d9e:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2da0:	46 2f       	mov	r20, r22
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	e7 df       	rcall	.-50     	; 0x2d78 <_ZN5Print5printEmi>
    2daa:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    2dac:	ce 01       	movw	r24, r28
    2dae:	00 df       	rcall	.-512    	; 0x2bb0 <_ZN5Print7printlnEv>
  return n;
}
    2db0:	80 0f       	add	r24, r16
    2db2:	91 1f       	adc	r25, r17
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2dbe:	2f 92       	push	r2
    2dc0:	3f 92       	push	r3
    2dc2:	4f 92       	push	r4
    2dc4:	5f 92       	push	r5
    2dc6:	7f 92       	push	r7
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	8c 01       	movw	r16, r24
    2de2:	4a 01       	movw	r8, r20
    2de4:	5b 01       	movw	r10, r22
    2de6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2de8:	9a 01       	movw	r18, r20
    2dea:	ab 01       	movw	r20, r22
    2dec:	c5 01       	movw	r24, r10
    2dee:	b4 01       	movw	r22, r8
    2df0:	3c d4       	rcall	.+2168   	; 0x366a <__unordsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <_ZN5Print10printFloatEdh+0x42>
    2df6:	6f e6       	ldi	r22, 0x6F	; 111
    2df8:	72 e0       	ldi	r23, 0x02	; 2
    2dfa:	c8 01       	movw	r24, r16
    2dfc:	bb de       	rcall	.-650    	; 0x2b74 <_ZN5Print5printEPKc>
    2dfe:	b3 c0       	rjmp	.+358    	; 0x2f66 <_ZN5Print10printFloatEdh+0x1a8>
  if (isinf(number)) return print("inf");
    2e00:	75 01       	movw	r14, r10
    2e02:	64 01       	movw	r12, r8
    2e04:	e8 94       	clt
    2e06:	f7 f8       	bld	r15, 7
    2e08:	2f ef       	ldi	r18, 0xFF	; 255
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	5f e7       	ldi	r21, 0x7F	; 127
    2e10:	c7 01       	movw	r24, r14
    2e12:	b6 01       	movw	r22, r12
    2e14:	2a d4       	rcall	.+2132   	; 0x366a <__unordsf2>
    2e16:	81 11       	cpse	r24, r1
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <_ZN5Print10printFloatEdh+0x78>
    2e1a:	2f ef       	ldi	r18, 0xFF	; 255
    2e1c:	3f ef       	ldi	r19, 0xFF	; 255
    2e1e:	4f e7       	ldi	r20, 0x7F	; 127
    2e20:	5f e7       	ldi	r21, 0x7F	; 127
    2e22:	c7 01       	movw	r24, r14
    2e24:	b6 01       	movw	r22, r12
    2e26:	fa d1       	rcall	.+1012   	; 0x321c <__cmpsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <_ZN5Print10printFloatEdh+0x78>
    2e2c:	63 e7       	ldi	r22, 0x73	; 115
    2e2e:	72 e0       	ldi	r23, 0x02	; 2
    2e30:	c8 01       	movw	r24, r16
    2e32:	a0 de       	rcall	.-704    	; 0x2b74 <_ZN5Print5printEPKc>
    2e34:	98 c0       	rjmp	.+304    	; 0x2f66 <_ZN5Print10printFloatEdh+0x1a8>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2e36:	2f ef       	ldi	r18, 0xFF	; 255
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	5f e4       	ldi	r21, 0x4F	; 79
    2e3e:	c5 01       	movw	r24, r10
    2e40:	b4 01       	movw	r22, r8
    2e42:	60 d3       	rcall	.+1728   	; 0x3504 <__gesf2>
    2e44:	18 16       	cp	r1, r24
    2e46:	2c f4       	brge	.+10     	; 0x2e52 <_ZN5Print10printFloatEdh+0x94>
    2e48:	67 e7       	ldi	r22, 0x77	; 119
    2e4a:	72 e0       	ldi	r23, 0x02	; 2
    2e4c:	c8 01       	movw	r24, r16
    2e4e:	92 de       	rcall	.-732    	; 0x2b74 <_ZN5Print5printEPKc>
    2e50:	8a c0       	rjmp	.+276    	; 0x2f66 <_ZN5Print10printFloatEdh+0x1a8>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2e52:	2f ef       	ldi	r18, 0xFF	; 255
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	5f ec       	ldi	r21, 0xCF	; 207
    2e5a:	c5 01       	movw	r24, r10
    2e5c:	b4 01       	movw	r22, r8
    2e5e:	de d1       	rcall	.+956    	; 0x321c <__cmpsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <_ZN5Print10printFloatEdh+0xb0>
    2e64:	67 e7       	ldi	r22, 0x77	; 119
    2e66:	72 e0       	ldi	r23, 0x02	; 2
    2e68:	c8 01       	movw	r24, r16
    2e6a:	84 de       	rcall	.-760    	; 0x2b74 <_ZN5Print5printEPKc>
    2e6c:	7c c0       	rjmp	.+248    	; 0x2f66 <_ZN5Print10printFloatEdh+0x1a8>
  
  // Handle negative numbers
  if (number < 0.0)
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	a9 01       	movw	r20, r18
    2e74:	c5 01       	movw	r24, r10
    2e76:	b4 01       	movw	r22, r8
    2e78:	d1 d1       	rcall	.+930    	; 0x321c <__cmpsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	4c f4       	brge	.+18     	; 0x2e90 <_ZN5Print10printFloatEdh+0xd2>
  {
     n += print('-');
    2e7e:	6d e2       	ldi	r22, 0x2D	; 45
    2e80:	c8 01       	movw	r24, r16
    2e82:	8e de       	rcall	.-740    	; 0x2ba0 <_ZN5Print5printEc>
    2e84:	7c 01       	movw	r14, r24
     number = -number;
    2e86:	b7 fa       	bst	r11, 7
    2e88:	b0 94       	com	r11
    2e8a:	b7 f8       	bld	r11, 7
    2e8c:	b0 94       	com	r11
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <_ZN5Print10printFloatEdh+0xd6>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2e90:	e1 2c       	mov	r14, r1
    2e92:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2e94:	77 20       	and	r7, r7
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <_ZN5Print10printFloatEdh+0xdc>
    2e98:	56 c0       	rjmp	.+172    	; 0x2f46 <_ZN5Print10printFloatEdh+0x188>
    2e9a:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	bb d1       	rcall	.+886    	; 0x3224 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2eae:	cf 5f       	subi	r28, 0xFF	; 255
    2eb0:	c7 11       	cpse	r28, r7
    2eb2:	f8 cf       	rjmp	.-16     	; 0x2ea4 <_ZN5Print10printFloatEdh+0xe6>
    2eb4:	25 c0       	rjmp	.+74     	; 0x2f00 <_ZN5Print10printFloatEdh+0x142>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	c5 01       	movw	r24, r10
    2ec0:	b4 01       	movw	r22, r8
    2ec2:	2b d3       	rcall	.+1622   	; 0x351a <__mulsf3>
    2ec4:	6b 01       	movw	r12, r22
    2ec6:	7c 01       	movw	r14, r24
    int toPrint = int(remainder);
    2ec8:	15 d2       	rcall	.+1066   	; 0x32f4 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    2eca:	4b 01       	movw	r8, r22
    2ecc:	aa 24       	eor	r10, r10
    2ece:	97 fc       	sbrc	r9, 7
    2ed0:	a0 94       	com	r10
    2ed2:	ba 2c       	mov	r11, r10
    2ed4:	2a e0       	ldi	r18, 0x0A	; 10
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	b5 01       	movw	r22, r10
    2eda:	a4 01       	movw	r20, r8
    2edc:	c8 01       	movw	r24, r16
    2ede:	14 df       	rcall	.-472    	; 0x2d08 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    2ee0:	c8 0f       	add	r28, r24
    2ee2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2ee4:	c5 01       	movw	r24, r10
    2ee6:	b4 01       	movw	r22, r8
    2ee8:	38 d2       	rcall	.+1136   	; 0x335a <__floatsisf>
    2eea:	9b 01       	movw	r18, r22
    2eec:	ac 01       	movw	r20, r24
    2eee:	c7 01       	movw	r24, r14
    2ef0:	b6 01       	movw	r22, r12
    2ef2:	cd d0       	rcall	.+410    	; 0x308e <__subsf3>
    2ef4:	4b 01       	movw	r8, r22
    2ef6:	5c 01       	movw	r10, r24
    2ef8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2efa:	e9 f6       	brne	.-70     	; 0x2eb6 <_ZN5Print10printFloatEdh+0xf8>
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    2efc:	ce 01       	movw	r24, r28
    2efe:	33 c0       	rjmp	.+102    	; 0x2f66 <_ZN5Print10printFloatEdh+0x1a8>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2f00:	9b 01       	movw	r18, r22
    2f02:	ac 01       	movw	r20, r24
    2f04:	c5 01       	movw	r24, r10
    2f06:	b4 01       	movw	r22, r8
    2f08:	c3 d0       	rcall	.+390    	; 0x3090 <__addsf3>
    2f0a:	4b 01       	movw	r8, r22
    2f0c:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2f0e:	f7 d1       	rcall	.+1006   	; 0x32fe <__fixunssfsi>
    2f10:	1b 01       	movw	r2, r22
    2f12:	2c 01       	movw	r4, r24
  double remainder = number - (double)int_part;
    2f14:	20 d2       	rcall	.+1088   	; 0x3356 <__floatunsisf>
    2f16:	9b 01       	movw	r18, r22
    2f18:	ac 01       	movw	r20, r24
    2f1a:	c5 01       	movw	r24, r10
    2f1c:	b4 01       	movw	r22, r8
    2f1e:	b7 d0       	rcall	.+366    	; 0x308e <__subsf3>
    2f20:	4b 01       	movw	r8, r22
    2f22:	5c 01       	movw	r10, r24
  n += print(int_part);
    2f24:	2a e0       	ldi	r18, 0x0A	; 10
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	b2 01       	movw	r22, r4
    2f2a:	a1 01       	movw	r20, r2
    2f2c:	c8 01       	movw	r24, r16
    2f2e:	24 df       	rcall	.-440    	; 0x2d78 <_ZN5Print5printEmi>
    2f30:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2f32:	6b e7       	ldi	r22, 0x7B	; 123
    2f34:	72 e0       	ldi	r23, 0x02	; 2
    2f36:	c8 01       	movw	r24, r16
    2f38:	1d de       	rcall	.-966    	; 0x2b74 <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2f3a:	8c 0f       	add	r24, r28
    2f3c:	9d 1f       	adc	r25, r29

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2f3e:	ec 01       	movw	r28, r24
    2f40:	ce 0d       	add	r28, r14
    2f42:	df 1d       	adc	r29, r15
    2f44:	b8 cf       	rjmp	.-144    	; 0x2eb6 <_ZN5Print10printFloatEdh+0xf8>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	c5 01       	movw	r24, r10
    2f50:	b4 01       	movw	r22, r8
    2f52:	9e d0       	rcall	.+316    	; 0x3090 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2f54:	d4 d1       	rcall	.+936    	; 0x32fe <__fixunssfsi>
    2f56:	ab 01       	movw	r20, r22
    2f58:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    2f5a:	2a e0       	ldi	r18, 0x0A	; 10
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	c8 01       	movw	r24, r16
    2f60:	0b df       	rcall	.-490    	; 0x2d78 <_ZN5Print5printEmi>
    2f62:	8e 0d       	add	r24, r14
    2f64:	9f 1d       	adc	r25, r15
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	df 90       	pop	r13
    2f74:	cf 90       	pop	r12
    2f76:	bf 90       	pop	r11
    2f78:	af 90       	pop	r10
    2f7a:	9f 90       	pop	r9
    2f7c:	8f 90       	pop	r8
    2f7e:	7f 90       	pop	r7
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	3f 90       	pop	r3
    2f86:	2f 90       	pop	r2
    2f88:	08 95       	ret

00002f8a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2f8a:	19 cf       	rjmp	.-462    	; 0x2dbe <_ZN5Print10printFloatEdh>
}
    2f8c:	08 95       	ret

00002f8e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2f98:	12 df       	rcall	.-476    	; 0x2dbe <_ZN5Print10printFloatEdh>
    2f9a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	08 de       	rcall	.-1008   	; 0x2bb0 <_ZN5Print7printlnEv>
  return n;
}
    2fa0:	80 0f       	add	r24, r16
    2fa2:	91 1f       	adc	r25, r17
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	08 95       	ret

00002fae <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2fae:	1f 92       	push	r1
    2fb0:	0f 92       	push	r0
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	0f 92       	push	r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	2f 93       	push	r18
    2fba:	3f 93       	push	r19
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	af 93       	push	r26
    2fc2:	bf 93       	push	r27
    2fc4:	80 91 d4 0c 	lds	r24, 0x0CD4
    2fc8:	90 91 d5 0c 	lds	r25, 0x0CD5
    2fcc:	a0 91 d6 0c 	lds	r26, 0x0CD6
    2fd0:	b0 91 d7 0c 	lds	r27, 0x0CD7
    2fd4:	30 91 d3 0c 	lds	r19, 0x0CD3
    2fd8:	23 e0       	ldi	r18, 0x03	; 3
    2fda:	23 0f       	add	r18, r19
    2fdc:	2d 37       	cpi	r18, 0x7D	; 125
    2fde:	20 f4       	brcc	.+8      	; 0x2fe8 <__vector_23+0x3a>
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	b1 1d       	adc	r27, r1
    2fe6:	05 c0       	rjmp	.+10     	; 0x2ff2 <__vector_23+0x44>
    2fe8:	26 e8       	ldi	r18, 0x86	; 134
    2fea:	23 0f       	add	r18, r19
    2fec:	02 96       	adiw	r24, 0x02	; 2
    2fee:	a1 1d       	adc	r26, r1
    2ff0:	b1 1d       	adc	r27, r1
    2ff2:	20 93 d3 0c 	sts	0x0CD3, r18
    2ff6:	80 93 d4 0c 	sts	0x0CD4, r24
    2ffa:	90 93 d5 0c 	sts	0x0CD5, r25
    2ffe:	a0 93 d6 0c 	sts	0x0CD6, r26
    3002:	b0 93 d7 0c 	sts	0x0CD7, r27
    3006:	80 91 d8 0c 	lds	r24, 0x0CD8
    300a:	90 91 d9 0c 	lds	r25, 0x0CD9
    300e:	a0 91 da 0c 	lds	r26, 0x0CDA
    3012:	b0 91 db 0c 	lds	r27, 0x0CDB
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	a1 1d       	adc	r26, r1
    301a:	b1 1d       	adc	r27, r1
    301c:	80 93 d8 0c 	sts	0x0CD8, r24
    3020:	90 93 d9 0c 	sts	0x0CD9, r25
    3024:	a0 93 da 0c 	sts	0x0CDA, r26
    3028:	b0 93 db 0c 	sts	0x0CDB, r27
    302c:	bf 91       	pop	r27
    302e:	af 91       	pop	r26
    3030:	9f 91       	pop	r25
    3032:	8f 91       	pop	r24
    3034:	3f 91       	pop	r19
    3036:	2f 91       	pop	r18
    3038:	0f 90       	pop	r0
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	0f 90       	pop	r0
    303e:	1f 90       	pop	r1
    3040:	18 95       	reti

00003042 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3042:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3044:	f8 94       	cli
	m = timer0_overflow_count;
    3046:	80 91 d8 0c 	lds	r24, 0x0CD8
    304a:	90 91 d9 0c 	lds	r25, 0x0CD9
    304e:	a0 91 da 0c 	lds	r26, 0x0CDA
    3052:	b0 91 db 0c 	lds	r27, 0x0CDB
#if defined(TCNT0)
	t = TCNT0;
    3056:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3058:	a8 9b       	sbis	0x15, 0	; 21
    305a:	05 c0       	rjmp	.+10     	; 0x3066 <micros+0x24>
    305c:	2f 3f       	cpi	r18, 0xFF	; 255
    305e:	19 f0       	breq	.+6      	; 0x3066 <micros+0x24>
		m++;
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	a1 1d       	adc	r26, r1
    3064:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3066:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3068:	ba 2f       	mov	r27, r26
    306a:	a9 2f       	mov	r26, r25
    306c:	98 2f       	mov	r25, r24
    306e:	88 27       	eor	r24, r24
    3070:	82 0f       	add	r24, r18
    3072:	91 1d       	adc	r25, r1
    3074:	a1 1d       	adc	r26, r1
    3076:	b1 1d       	adc	r27, r1
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	66 0f       	add	r22, r22
    3086:	77 1f       	adc	r23, r23
    3088:	88 1f       	adc	r24, r24
    308a:	99 1f       	adc	r25, r25
}
    308c:	08 95       	ret

0000308e <__subsf3>:
    308e:	50 58       	subi	r21, 0x80	; 128

00003090 <__addsf3>:
    3090:	bb 27       	eor	r27, r27
    3092:	aa 27       	eor	r26, r26
    3094:	0e d0       	rcall	.+28     	; 0x30b2 <__addsf3x>
    3096:	fc c1       	rjmp	.+1016   	; 0x3490 <__fp_round>
    3098:	ed d1       	rcall	.+986    	; 0x3474 <__fp_pscA>
    309a:	30 f0       	brcs	.+12     	; 0x30a8 <__addsf3+0x18>
    309c:	f2 d1       	rcall	.+996    	; 0x3482 <__fp_pscB>
    309e:	20 f0       	brcs	.+8      	; 0x30a8 <__addsf3+0x18>
    30a0:	31 f4       	brne	.+12     	; 0x30ae <__addsf3+0x1e>
    30a2:	9f 3f       	cpi	r25, 0xFF	; 255
    30a4:	11 f4       	brne	.+4      	; 0x30aa <__addsf3+0x1a>
    30a6:	1e f4       	brtc	.+6      	; 0x30ae <__addsf3+0x1e>
    30a8:	bd c1       	rjmp	.+890    	; 0x3424 <__fp_nan>
    30aa:	0e f4       	brtc	.+2      	; 0x30ae <__addsf3+0x1e>
    30ac:	e0 95       	com	r30
    30ae:	e7 fb       	bst	r30, 7
    30b0:	b3 c1       	rjmp	.+870    	; 0x3418 <__fp_inf>

000030b2 <__addsf3x>:
    30b2:	e9 2f       	mov	r30, r25
    30b4:	fe d1       	rcall	.+1020   	; 0x34b2 <__fp_split3>
    30b6:	80 f3       	brcs	.-32     	; 0x3098 <__addsf3+0x8>
    30b8:	ba 17       	cp	r27, r26
    30ba:	62 07       	cpc	r22, r18
    30bc:	73 07       	cpc	r23, r19
    30be:	84 07       	cpc	r24, r20
    30c0:	95 07       	cpc	r25, r21
    30c2:	18 f0       	brcs	.+6      	; 0x30ca <__addsf3x+0x18>
    30c4:	71 f4       	brne	.+28     	; 0x30e2 <__addsf3x+0x30>
    30c6:	9e f5       	brtc	.+102    	; 0x312e <__addsf3x+0x7c>
    30c8:	16 c2       	rjmp	.+1068   	; 0x34f6 <__fp_zero>
    30ca:	0e f4       	brtc	.+2      	; 0x30ce <__addsf3x+0x1c>
    30cc:	e0 95       	com	r30
    30ce:	0b 2e       	mov	r0, r27
    30d0:	ba 2f       	mov	r27, r26
    30d2:	a0 2d       	mov	r26, r0
    30d4:	0b 01       	movw	r0, r22
    30d6:	b9 01       	movw	r22, r18
    30d8:	90 01       	movw	r18, r0
    30da:	0c 01       	movw	r0, r24
    30dc:	ca 01       	movw	r24, r20
    30de:	a0 01       	movw	r20, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	ff 27       	eor	r31, r31
    30e4:	59 1b       	sub	r21, r25
    30e6:	99 f0       	breq	.+38     	; 0x310e <__addsf3x+0x5c>
    30e8:	59 3f       	cpi	r21, 0xF9	; 249
    30ea:	50 f4       	brcc	.+20     	; 0x3100 <__addsf3x+0x4e>
    30ec:	50 3e       	cpi	r21, 0xE0	; 224
    30ee:	68 f1       	brcs	.+90     	; 0x314a <__addsf3x+0x98>
    30f0:	1a 16       	cp	r1, r26
    30f2:	f0 40       	sbci	r31, 0x00	; 0
    30f4:	a2 2f       	mov	r26, r18
    30f6:	23 2f       	mov	r18, r19
    30f8:	34 2f       	mov	r19, r20
    30fa:	44 27       	eor	r20, r20
    30fc:	58 5f       	subi	r21, 0xF8	; 248
    30fe:	f3 cf       	rjmp	.-26     	; 0x30e6 <__addsf3x+0x34>
    3100:	46 95       	lsr	r20
    3102:	37 95       	ror	r19
    3104:	27 95       	ror	r18
    3106:	a7 95       	ror	r26
    3108:	f0 40       	sbci	r31, 0x00	; 0
    310a:	53 95       	inc	r21
    310c:	c9 f7       	brne	.-14     	; 0x3100 <__addsf3x+0x4e>
    310e:	7e f4       	brtc	.+30     	; 0x312e <__addsf3x+0x7c>
    3110:	1f 16       	cp	r1, r31
    3112:	ba 0b       	sbc	r27, r26
    3114:	62 0b       	sbc	r22, r18
    3116:	73 0b       	sbc	r23, r19
    3118:	84 0b       	sbc	r24, r20
    311a:	ba f0       	brmi	.+46     	; 0x314a <__addsf3x+0x98>
    311c:	91 50       	subi	r25, 0x01	; 1
    311e:	a1 f0       	breq	.+40     	; 0x3148 <__addsf3x+0x96>
    3120:	ff 0f       	add	r31, r31
    3122:	bb 1f       	adc	r27, r27
    3124:	66 1f       	adc	r22, r22
    3126:	77 1f       	adc	r23, r23
    3128:	88 1f       	adc	r24, r24
    312a:	c2 f7       	brpl	.-16     	; 0x311c <__addsf3x+0x6a>
    312c:	0e c0       	rjmp	.+28     	; 0x314a <__addsf3x+0x98>
    312e:	ba 0f       	add	r27, r26
    3130:	62 1f       	adc	r22, r18
    3132:	73 1f       	adc	r23, r19
    3134:	84 1f       	adc	r24, r20
    3136:	48 f4       	brcc	.+18     	; 0x314a <__addsf3x+0x98>
    3138:	87 95       	ror	r24
    313a:	77 95       	ror	r23
    313c:	67 95       	ror	r22
    313e:	b7 95       	ror	r27
    3140:	f7 95       	ror	r31
    3142:	9e 3f       	cpi	r25, 0xFE	; 254
    3144:	08 f0       	brcs	.+2      	; 0x3148 <__addsf3x+0x96>
    3146:	b3 cf       	rjmp	.-154    	; 0x30ae <__addsf3+0x1e>
    3148:	93 95       	inc	r25
    314a:	88 0f       	add	r24, r24
    314c:	08 f0       	brcs	.+2      	; 0x3150 <__addsf3x+0x9e>
    314e:	99 27       	eor	r25, r25
    3150:	ee 0f       	add	r30, r30
    3152:	97 95       	ror	r25
    3154:	87 95       	ror	r24
    3156:	08 95       	ret
    3158:	8d d1       	rcall	.+794    	; 0x3474 <__fp_pscA>
    315a:	58 f0       	brcs	.+22     	; 0x3172 <__addsf3x+0xc0>
    315c:	80 e8       	ldi	r24, 0x80	; 128
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	09 f4       	brne	.+2      	; 0x3164 <__addsf3x+0xb2>
    3162:	9e ef       	ldi	r25, 0xFE	; 254
    3164:	8e d1       	rcall	.+796    	; 0x3482 <__fp_pscB>
    3166:	28 f0       	brcs	.+10     	; 0x3172 <__addsf3x+0xc0>
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	51 e0       	ldi	r21, 0x01	; 1
    316c:	59 f4       	brne	.+22     	; 0x3184 <atan2+0xe>
    316e:	5e ef       	ldi	r21, 0xFE	; 254
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <atan2+0xe>
    3172:	58 c1       	rjmp	.+688    	; 0x3424 <__fp_nan>
    3174:	c0 c1       	rjmp	.+896    	; 0x34f6 <__fp_zero>

00003176 <atan2>:
    3176:	e9 2f       	mov	r30, r25
    3178:	e0 78       	andi	r30, 0x80	; 128
    317a:	9b d1       	rcall	.+822    	; 0x34b2 <__fp_split3>
    317c:	68 f3       	brcs	.-38     	; 0x3158 <__addsf3x+0xa6>
    317e:	09 2e       	mov	r0, r25
    3180:	05 2a       	or	r0, r21
    3182:	c1 f3       	breq	.-16     	; 0x3174 <__addsf3x+0xc2>
    3184:	26 17       	cp	r18, r22
    3186:	37 07       	cpc	r19, r23
    3188:	48 07       	cpc	r20, r24
    318a:	59 07       	cpc	r21, r25
    318c:	38 f0       	brcs	.+14     	; 0x319c <atan2+0x26>
    318e:	0e 2e       	mov	r0, r30
    3190:	07 f8       	bld	r0, 7
    3192:	e0 25       	eor	r30, r0
    3194:	69 f0       	breq	.+26     	; 0x31b0 <atan2+0x3a>
    3196:	e0 25       	eor	r30, r0
    3198:	e0 64       	ori	r30, 0x40	; 64
    319a:	0a c0       	rjmp	.+20     	; 0x31b0 <atan2+0x3a>
    319c:	ef 63       	ori	r30, 0x3F	; 63
    319e:	07 f8       	bld	r0, 7
    31a0:	00 94       	com	r0
    31a2:	07 fa       	bst	r0, 7
    31a4:	db 01       	movw	r26, r22
    31a6:	b9 01       	movw	r22, r18
    31a8:	9d 01       	movw	r18, r26
    31aa:	dc 01       	movw	r26, r24
    31ac:	ca 01       	movw	r24, r20
    31ae:	ad 01       	movw	r20, r26
    31b0:	ef 93       	push	r30
    31b2:	47 d0       	rcall	.+142    	; 0x3242 <__divsf3_pse>
    31b4:	6d d1       	rcall	.+730    	; 0x3490 <__fp_round>
    31b6:	0a d0       	rcall	.+20     	; 0x31cc <atan>
    31b8:	5f 91       	pop	r21
    31ba:	55 23       	and	r21, r21
    31bc:	31 f0       	breq	.+12     	; 0x31ca <atan2+0x54>
    31be:	2b ed       	ldi	r18, 0xDB	; 219
    31c0:	3f e0       	ldi	r19, 0x0F	; 15
    31c2:	49 e4       	ldi	r20, 0x49	; 73
    31c4:	50 fd       	sbrc	r21, 0
    31c6:	49 ec       	ldi	r20, 0xC9	; 201
    31c8:	63 cf       	rjmp	.-314    	; 0x3090 <__addsf3>
    31ca:	08 95       	ret

000031cc <atan>:
    31cc:	df 93       	push	r29
    31ce:	dd 27       	eor	r29, r29
    31d0:	b9 2f       	mov	r27, r25
    31d2:	bf 77       	andi	r27, 0x7F	; 127
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	16 16       	cp	r1, r22
    31da:	17 06       	cpc	r1, r23
    31dc:	48 07       	cpc	r20, r24
    31de:	5b 07       	cpc	r21, r27
    31e0:	10 f4       	brcc	.+4      	; 0x31e6 <atan+0x1a>
    31e2:	d9 2f       	mov	r29, r25
    31e4:	93 d1       	rcall	.+806    	; 0x350c <inverse>
    31e6:	9f 93       	push	r25
    31e8:	8f 93       	push	r24
    31ea:	7f 93       	push	r23
    31ec:	6f 93       	push	r22
    31ee:	3a d2       	rcall	.+1140   	; 0x3664 <square>
    31f0:	e6 e7       	ldi	r30, 0x76	; 118
    31f2:	f2 e0       	ldi	r31, 0x02	; 2
    31f4:	1a d1       	rcall	.+564    	; 0x342a <__fp_powser>
    31f6:	4c d1       	rcall	.+664    	; 0x3490 <__fp_round>
    31f8:	2f 91       	pop	r18
    31fa:	3f 91       	pop	r19
    31fc:	4f 91       	pop	r20
    31fe:	5f 91       	pop	r21
    3200:	98 d1       	rcall	.+816    	; 0x3532 <__mulsf3x>
    3202:	dd 23       	and	r29, r29
    3204:	49 f0       	breq	.+18     	; 0x3218 <atan+0x4c>
    3206:	90 58       	subi	r25, 0x80	; 128
    3208:	a2 ea       	ldi	r26, 0xA2	; 162
    320a:	2a ed       	ldi	r18, 0xDA	; 218
    320c:	3f e0       	ldi	r19, 0x0F	; 15
    320e:	49 ec       	ldi	r20, 0xC9	; 201
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	d0 78       	andi	r29, 0x80	; 128
    3214:	5d 27       	eor	r21, r29
    3216:	4d df       	rcall	.-358    	; 0x30b2 <__addsf3x>
    3218:	df 91       	pop	r29
    321a:	3a c1       	rjmp	.+628    	; 0x3490 <__fp_round>

0000321c <__cmpsf2>:
    321c:	d9 d0       	rcall	.+434    	; 0x33d0 <__fp_cmp>
    321e:	08 f4       	brcc	.+2      	; 0x3222 <__cmpsf2+0x6>
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	08 95       	ret

00003224 <__divsf3>:
    3224:	0c d0       	rcall	.+24     	; 0x323e <__divsf3x>
    3226:	34 c1       	rjmp	.+616    	; 0x3490 <__fp_round>
    3228:	2c d1       	rcall	.+600    	; 0x3482 <__fp_pscB>
    322a:	40 f0       	brcs	.+16     	; 0x323c <__divsf3+0x18>
    322c:	23 d1       	rcall	.+582    	; 0x3474 <__fp_pscA>
    322e:	30 f0       	brcs	.+12     	; 0x323c <__divsf3+0x18>
    3230:	21 f4       	brne	.+8      	; 0x323a <__divsf3+0x16>
    3232:	5f 3f       	cpi	r21, 0xFF	; 255
    3234:	19 f0       	breq	.+6      	; 0x323c <__divsf3+0x18>
    3236:	f0 c0       	rjmp	.+480    	; 0x3418 <__fp_inf>
    3238:	51 11       	cpse	r21, r1
    323a:	5e c1       	rjmp	.+700    	; 0x34f8 <__fp_szero>
    323c:	f3 c0       	rjmp	.+486    	; 0x3424 <__fp_nan>

0000323e <__divsf3x>:
    323e:	39 d1       	rcall	.+626    	; 0x34b2 <__fp_split3>
    3240:	98 f3       	brcs	.-26     	; 0x3228 <__divsf3+0x4>

00003242 <__divsf3_pse>:
    3242:	99 23       	and	r25, r25
    3244:	c9 f3       	breq	.-14     	; 0x3238 <__divsf3+0x14>
    3246:	55 23       	and	r21, r21
    3248:	b1 f3       	breq	.-20     	; 0x3236 <__divsf3+0x12>
    324a:	95 1b       	sub	r25, r21
    324c:	55 0b       	sbc	r21, r21
    324e:	bb 27       	eor	r27, r27
    3250:	aa 27       	eor	r26, r26
    3252:	62 17       	cp	r22, r18
    3254:	73 07       	cpc	r23, r19
    3256:	84 07       	cpc	r24, r20
    3258:	38 f0       	brcs	.+14     	; 0x3268 <__divsf3_pse+0x26>
    325a:	9f 5f       	subi	r25, 0xFF	; 255
    325c:	5f 4f       	sbci	r21, 0xFF	; 255
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	44 1f       	adc	r20, r20
    3264:	aa 1f       	adc	r26, r26
    3266:	a9 f3       	breq	.-22     	; 0x3252 <__divsf3_pse+0x10>
    3268:	33 d0       	rcall	.+102    	; 0x32d0 <__divsf3_pse+0x8e>
    326a:	0e 2e       	mov	r0, r30
    326c:	3a f0       	brmi	.+14     	; 0x327c <__divsf3_pse+0x3a>
    326e:	e0 e8       	ldi	r30, 0x80	; 128
    3270:	30 d0       	rcall	.+96     	; 0x32d2 <__divsf3_pse+0x90>
    3272:	91 50       	subi	r25, 0x01	; 1
    3274:	50 40       	sbci	r21, 0x00	; 0
    3276:	e6 95       	lsr	r30
    3278:	00 1c       	adc	r0, r0
    327a:	ca f7       	brpl	.-14     	; 0x326e <__divsf3_pse+0x2c>
    327c:	29 d0       	rcall	.+82     	; 0x32d0 <__divsf3_pse+0x8e>
    327e:	fe 2f       	mov	r31, r30
    3280:	27 d0       	rcall	.+78     	; 0x32d0 <__divsf3_pse+0x8e>
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	bb 1f       	adc	r27, r27
    328a:	26 17       	cp	r18, r22
    328c:	37 07       	cpc	r19, r23
    328e:	48 07       	cpc	r20, r24
    3290:	ab 07       	cpc	r26, r27
    3292:	b0 e8       	ldi	r27, 0x80	; 128
    3294:	09 f0       	breq	.+2      	; 0x3298 <__divsf3_pse+0x56>
    3296:	bb 0b       	sbc	r27, r27
    3298:	80 2d       	mov	r24, r0
    329a:	bf 01       	movw	r22, r30
    329c:	ff 27       	eor	r31, r31
    329e:	93 58       	subi	r25, 0x83	; 131
    32a0:	5f 4f       	sbci	r21, 0xFF	; 255
    32a2:	2a f0       	brmi	.+10     	; 0x32ae <__divsf3_pse+0x6c>
    32a4:	9e 3f       	cpi	r25, 0xFE	; 254
    32a6:	51 05       	cpc	r21, r1
    32a8:	68 f0       	brcs	.+26     	; 0x32c4 <__divsf3_pse+0x82>
    32aa:	b6 c0       	rjmp	.+364    	; 0x3418 <__fp_inf>
    32ac:	25 c1       	rjmp	.+586    	; 0x34f8 <__fp_szero>
    32ae:	5f 3f       	cpi	r21, 0xFF	; 255
    32b0:	ec f3       	brlt	.-6      	; 0x32ac <__divsf3_pse+0x6a>
    32b2:	98 3e       	cpi	r25, 0xE8	; 232
    32b4:	dc f3       	brlt	.-10     	; 0x32ac <__divsf3_pse+0x6a>
    32b6:	86 95       	lsr	r24
    32b8:	77 95       	ror	r23
    32ba:	67 95       	ror	r22
    32bc:	b7 95       	ror	r27
    32be:	f7 95       	ror	r31
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	c9 f7       	brne	.-14     	; 0x32b6 <__divsf3_pse+0x74>
    32c4:	88 0f       	add	r24, r24
    32c6:	91 1d       	adc	r25, r1
    32c8:	96 95       	lsr	r25
    32ca:	87 95       	ror	r24
    32cc:	97 f9       	bld	r25, 7
    32ce:	08 95       	ret
    32d0:	e1 e0       	ldi	r30, 0x01	; 1
    32d2:	66 0f       	add	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	88 1f       	adc	r24, r24
    32d8:	bb 1f       	adc	r27, r27
    32da:	62 17       	cp	r22, r18
    32dc:	73 07       	cpc	r23, r19
    32de:	84 07       	cpc	r24, r20
    32e0:	ba 07       	cpc	r27, r26
    32e2:	20 f0       	brcs	.+8      	; 0x32ec <__divsf3_pse+0xaa>
    32e4:	62 1b       	sub	r22, r18
    32e6:	73 0b       	sbc	r23, r19
    32e8:	84 0b       	sbc	r24, r20
    32ea:	ba 0b       	sbc	r27, r26
    32ec:	ee 1f       	adc	r30, r30
    32ee:	88 f7       	brcc	.-30     	; 0x32d2 <__divsf3_pse+0x90>
    32f0:	e0 95       	com	r30
    32f2:	08 95       	ret

000032f4 <__fixsfsi>:
    32f4:	04 d0       	rcall	.+8      	; 0x32fe <__fixunssfsi>
    32f6:	68 94       	set
    32f8:	b1 11       	cpse	r27, r1
    32fa:	fe c0       	rjmp	.+508    	; 0x34f8 <__fp_szero>
    32fc:	08 95       	ret

000032fe <__fixunssfsi>:
    32fe:	e1 d0       	rcall	.+450    	; 0x34c2 <__fp_splitA>
    3300:	88 f0       	brcs	.+34     	; 0x3324 <__fixunssfsi+0x26>
    3302:	9f 57       	subi	r25, 0x7F	; 127
    3304:	90 f0       	brcs	.+36     	; 0x332a <__fixunssfsi+0x2c>
    3306:	b9 2f       	mov	r27, r25
    3308:	99 27       	eor	r25, r25
    330a:	b7 51       	subi	r27, 0x17	; 23
    330c:	a0 f0       	brcs	.+40     	; 0x3336 <__fixunssfsi+0x38>
    330e:	d1 f0       	breq	.+52     	; 0x3344 <__fixunssfsi+0x46>
    3310:	66 0f       	add	r22, r22
    3312:	77 1f       	adc	r23, r23
    3314:	88 1f       	adc	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	1a f0       	brmi	.+6      	; 0x3320 <__fixunssfsi+0x22>
    331a:	ba 95       	dec	r27
    331c:	c9 f7       	brne	.-14     	; 0x3310 <__fixunssfsi+0x12>
    331e:	12 c0       	rjmp	.+36     	; 0x3344 <__fixunssfsi+0x46>
    3320:	b1 30       	cpi	r27, 0x01	; 1
    3322:	81 f0       	breq	.+32     	; 0x3344 <__fixunssfsi+0x46>
    3324:	e8 d0       	rcall	.+464    	; 0x34f6 <__fp_zero>
    3326:	b1 e0       	ldi	r27, 0x01	; 1
    3328:	08 95       	ret
    332a:	e5 c0       	rjmp	.+458    	; 0x34f6 <__fp_zero>
    332c:	67 2f       	mov	r22, r23
    332e:	78 2f       	mov	r23, r24
    3330:	88 27       	eor	r24, r24
    3332:	b8 5f       	subi	r27, 0xF8	; 248
    3334:	39 f0       	breq	.+14     	; 0x3344 <__fixunssfsi+0x46>
    3336:	b9 3f       	cpi	r27, 0xF9	; 249
    3338:	cc f3       	brlt	.-14     	; 0x332c <__fixunssfsi+0x2e>
    333a:	86 95       	lsr	r24
    333c:	77 95       	ror	r23
    333e:	67 95       	ror	r22
    3340:	b3 95       	inc	r27
    3342:	d9 f7       	brne	.-10     	; 0x333a <__fixunssfsi+0x3c>
    3344:	3e f4       	brtc	.+14     	; 0x3354 <__fixunssfsi+0x56>
    3346:	90 95       	com	r25
    3348:	80 95       	com	r24
    334a:	70 95       	com	r23
    334c:	61 95       	neg	r22
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	8f 4f       	sbci	r24, 0xFF	; 255
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	08 95       	ret

00003356 <__floatunsisf>:
    3356:	e8 94       	clt
    3358:	09 c0       	rjmp	.+18     	; 0x336c <__floatsisf+0x12>

0000335a <__floatsisf>:
    335a:	97 fb       	bst	r25, 7
    335c:	3e f4       	brtc	.+14     	; 0x336c <__floatsisf+0x12>
    335e:	90 95       	com	r25
    3360:	80 95       	com	r24
    3362:	70 95       	com	r23
    3364:	61 95       	neg	r22
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	8f 4f       	sbci	r24, 0xFF	; 255
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	99 23       	and	r25, r25
    336e:	a9 f0       	breq	.+42     	; 0x339a <__floatsisf+0x40>
    3370:	f9 2f       	mov	r31, r25
    3372:	96 e9       	ldi	r25, 0x96	; 150
    3374:	bb 27       	eor	r27, r27
    3376:	93 95       	inc	r25
    3378:	f6 95       	lsr	r31
    337a:	87 95       	ror	r24
    337c:	77 95       	ror	r23
    337e:	67 95       	ror	r22
    3380:	b7 95       	ror	r27
    3382:	f1 11       	cpse	r31, r1
    3384:	f8 cf       	rjmp	.-16     	; 0x3376 <__floatsisf+0x1c>
    3386:	fa f4       	brpl	.+62     	; 0x33c6 <__floatsisf+0x6c>
    3388:	bb 0f       	add	r27, r27
    338a:	11 f4       	brne	.+4      	; 0x3390 <__floatsisf+0x36>
    338c:	60 ff       	sbrs	r22, 0
    338e:	1b c0       	rjmp	.+54     	; 0x33c6 <__floatsisf+0x6c>
    3390:	6f 5f       	subi	r22, 0xFF	; 255
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	8f 4f       	sbci	r24, 0xFF	; 255
    3396:	9f 4f       	sbci	r25, 0xFF	; 255
    3398:	16 c0       	rjmp	.+44     	; 0x33c6 <__floatsisf+0x6c>
    339a:	88 23       	and	r24, r24
    339c:	11 f0       	breq	.+4      	; 0x33a2 <__floatsisf+0x48>
    339e:	96 e9       	ldi	r25, 0x96	; 150
    33a0:	11 c0       	rjmp	.+34     	; 0x33c4 <__floatsisf+0x6a>
    33a2:	77 23       	and	r23, r23
    33a4:	21 f0       	breq	.+8      	; 0x33ae <__floatsisf+0x54>
    33a6:	9e e8       	ldi	r25, 0x8E	; 142
    33a8:	87 2f       	mov	r24, r23
    33aa:	76 2f       	mov	r23, r22
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <__floatsisf+0x5e>
    33ae:	66 23       	and	r22, r22
    33b0:	71 f0       	breq	.+28     	; 0x33ce <__floatsisf+0x74>
    33b2:	96 e8       	ldi	r25, 0x86	; 134
    33b4:	86 2f       	mov	r24, r22
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	2a f0       	brmi	.+10     	; 0x33c6 <__floatsisf+0x6c>
    33bc:	9a 95       	dec	r25
    33be:	66 0f       	add	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	88 1f       	adc	r24, r24
    33c4:	da f7       	brpl	.-10     	; 0x33bc <__floatsisf+0x62>
    33c6:	88 0f       	add	r24, r24
    33c8:	96 95       	lsr	r25
    33ca:	87 95       	ror	r24
    33cc:	97 f9       	bld	r25, 7
    33ce:	08 95       	ret

000033d0 <__fp_cmp>:
    33d0:	99 0f       	add	r25, r25
    33d2:	00 08       	sbc	r0, r0
    33d4:	55 0f       	add	r21, r21
    33d6:	aa 0b       	sbc	r26, r26
    33d8:	e0 e8       	ldi	r30, 0x80	; 128
    33da:	fe ef       	ldi	r31, 0xFE	; 254
    33dc:	16 16       	cp	r1, r22
    33de:	17 06       	cpc	r1, r23
    33e0:	e8 07       	cpc	r30, r24
    33e2:	f9 07       	cpc	r31, r25
    33e4:	c0 f0       	brcs	.+48     	; 0x3416 <__fp_cmp+0x46>
    33e6:	12 16       	cp	r1, r18
    33e8:	13 06       	cpc	r1, r19
    33ea:	e4 07       	cpc	r30, r20
    33ec:	f5 07       	cpc	r31, r21
    33ee:	98 f0       	brcs	.+38     	; 0x3416 <__fp_cmp+0x46>
    33f0:	62 1b       	sub	r22, r18
    33f2:	73 0b       	sbc	r23, r19
    33f4:	84 0b       	sbc	r24, r20
    33f6:	95 0b       	sbc	r25, r21
    33f8:	39 f4       	brne	.+14     	; 0x3408 <__fp_cmp+0x38>
    33fa:	0a 26       	eor	r0, r26
    33fc:	61 f0       	breq	.+24     	; 0x3416 <__fp_cmp+0x46>
    33fe:	23 2b       	or	r18, r19
    3400:	24 2b       	or	r18, r20
    3402:	25 2b       	or	r18, r21
    3404:	21 f4       	brne	.+8      	; 0x340e <__fp_cmp+0x3e>
    3406:	08 95       	ret
    3408:	0a 26       	eor	r0, r26
    340a:	09 f4       	brne	.+2      	; 0x340e <__fp_cmp+0x3e>
    340c:	a1 40       	sbci	r26, 0x01	; 1
    340e:	a6 95       	lsr	r26
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	81 1d       	adc	r24, r1
    3414:	81 1d       	adc	r24, r1
    3416:	08 95       	ret

00003418 <__fp_inf>:
    3418:	97 f9       	bld	r25, 7
    341a:	9f 67       	ori	r25, 0x7F	; 127
    341c:	80 e8       	ldi	r24, 0x80	; 128
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	08 95       	ret

00003424 <__fp_nan>:
    3424:	9f ef       	ldi	r25, 0xFF	; 255
    3426:	80 ec       	ldi	r24, 0xC0	; 192
    3428:	08 95       	ret

0000342a <__fp_powser>:
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	1f 93       	push	r17
    3430:	0f 93       	push	r16
    3432:	ff 92       	push	r15
    3434:	ef 92       	push	r14
    3436:	df 92       	push	r13
    3438:	7b 01       	movw	r14, r22
    343a:	8c 01       	movw	r16, r24
    343c:	68 94       	set
    343e:	05 c0       	rjmp	.+10     	; 0x344a <__fp_powser+0x20>
    3440:	da 2e       	mov	r13, r26
    3442:	ef 01       	movw	r28, r30
    3444:	76 d0       	rcall	.+236    	; 0x3532 <__mulsf3x>
    3446:	fe 01       	movw	r30, r28
    3448:	e8 94       	clt
    344a:	a5 91       	lpm	r26, Z+
    344c:	25 91       	lpm	r18, Z+
    344e:	35 91       	lpm	r19, Z+
    3450:	45 91       	lpm	r20, Z+
    3452:	55 91       	lpm	r21, Z+
    3454:	ae f3       	brts	.-22     	; 0x3440 <__fp_powser+0x16>
    3456:	ef 01       	movw	r28, r30
    3458:	2c de       	rcall	.-936    	; 0x30b2 <__addsf3x>
    345a:	fe 01       	movw	r30, r28
    345c:	97 01       	movw	r18, r14
    345e:	a8 01       	movw	r20, r16
    3460:	da 94       	dec	r13
    3462:	79 f7       	brne	.-34     	; 0x3442 <__fp_powser+0x18>
    3464:	df 90       	pop	r13
    3466:	ef 90       	pop	r14
    3468:	ff 90       	pop	r15
    346a:	0f 91       	pop	r16
    346c:	1f 91       	pop	r17
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <__fp_pscA>:
    3474:	00 24       	eor	r0, r0
    3476:	0a 94       	dec	r0
    3478:	16 16       	cp	r1, r22
    347a:	17 06       	cpc	r1, r23
    347c:	18 06       	cpc	r1, r24
    347e:	09 06       	cpc	r0, r25
    3480:	08 95       	ret

00003482 <__fp_pscB>:
    3482:	00 24       	eor	r0, r0
    3484:	0a 94       	dec	r0
    3486:	12 16       	cp	r1, r18
    3488:	13 06       	cpc	r1, r19
    348a:	14 06       	cpc	r1, r20
    348c:	05 06       	cpc	r0, r21
    348e:	08 95       	ret

00003490 <__fp_round>:
    3490:	09 2e       	mov	r0, r25
    3492:	03 94       	inc	r0
    3494:	00 0c       	add	r0, r0
    3496:	11 f4       	brne	.+4      	; 0x349c <__fp_round+0xc>
    3498:	88 23       	and	r24, r24
    349a:	52 f0       	brmi	.+20     	; 0x34b0 <__fp_round+0x20>
    349c:	bb 0f       	add	r27, r27
    349e:	40 f4       	brcc	.+16     	; 0x34b0 <__fp_round+0x20>
    34a0:	bf 2b       	or	r27, r31
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <__fp_round+0x18>
    34a4:	60 ff       	sbrs	r22, 0
    34a6:	04 c0       	rjmp	.+8      	; 0x34b0 <__fp_round+0x20>
    34a8:	6f 5f       	subi	r22, 0xFF	; 255
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	8f 4f       	sbci	r24, 0xFF	; 255
    34ae:	9f 4f       	sbci	r25, 0xFF	; 255
    34b0:	08 95       	ret

000034b2 <__fp_split3>:
    34b2:	57 fd       	sbrc	r21, 7
    34b4:	90 58       	subi	r25, 0x80	; 128
    34b6:	44 0f       	add	r20, r20
    34b8:	55 1f       	adc	r21, r21
    34ba:	59 f0       	breq	.+22     	; 0x34d2 <__fp_splitA+0x10>
    34bc:	5f 3f       	cpi	r21, 0xFF	; 255
    34be:	71 f0       	breq	.+28     	; 0x34dc <__fp_splitA+0x1a>
    34c0:	47 95       	ror	r20

000034c2 <__fp_splitA>:
    34c2:	88 0f       	add	r24, r24
    34c4:	97 fb       	bst	r25, 7
    34c6:	99 1f       	adc	r25, r25
    34c8:	61 f0       	breq	.+24     	; 0x34e2 <__fp_splitA+0x20>
    34ca:	9f 3f       	cpi	r25, 0xFF	; 255
    34cc:	79 f0       	breq	.+30     	; 0x34ec <__fp_splitA+0x2a>
    34ce:	87 95       	ror	r24
    34d0:	08 95       	ret
    34d2:	12 16       	cp	r1, r18
    34d4:	13 06       	cpc	r1, r19
    34d6:	14 06       	cpc	r1, r20
    34d8:	55 1f       	adc	r21, r21
    34da:	f2 cf       	rjmp	.-28     	; 0x34c0 <__fp_split3+0xe>
    34dc:	46 95       	lsr	r20
    34de:	f1 df       	rcall	.-30     	; 0x34c2 <__fp_splitA>
    34e0:	08 c0       	rjmp	.+16     	; 0x34f2 <__fp_splitA+0x30>
    34e2:	16 16       	cp	r1, r22
    34e4:	17 06       	cpc	r1, r23
    34e6:	18 06       	cpc	r1, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	f1 cf       	rjmp	.-30     	; 0x34ce <__fp_splitA+0xc>
    34ec:	86 95       	lsr	r24
    34ee:	71 05       	cpc	r23, r1
    34f0:	61 05       	cpc	r22, r1
    34f2:	08 94       	sec
    34f4:	08 95       	ret

000034f6 <__fp_zero>:
    34f6:	e8 94       	clt

000034f8 <__fp_szero>:
    34f8:	bb 27       	eor	r27, r27
    34fa:	66 27       	eor	r22, r22
    34fc:	77 27       	eor	r23, r23
    34fe:	cb 01       	movw	r24, r22
    3500:	97 f9       	bld	r25, 7
    3502:	08 95       	ret

00003504 <__gesf2>:
    3504:	65 df       	rcall	.-310    	; 0x33d0 <__fp_cmp>
    3506:	08 f4       	brcc	.+2      	; 0x350a <__gesf2+0x6>
    3508:	8f ef       	ldi	r24, 0xFF	; 255
    350a:	08 95       	ret

0000350c <inverse>:
    350c:	9b 01       	movw	r18, r22
    350e:	ac 01       	movw	r20, r24
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	80 e8       	ldi	r24, 0x80	; 128
    3516:	9f e3       	ldi	r25, 0x3F	; 63
    3518:	85 ce       	rjmp	.-758    	; 0x3224 <__divsf3>

0000351a <__mulsf3>:
    351a:	0b d0       	rcall	.+22     	; 0x3532 <__mulsf3x>
    351c:	b9 cf       	rjmp	.-142    	; 0x3490 <__fp_round>
    351e:	aa df       	rcall	.-172    	; 0x3474 <__fp_pscA>
    3520:	28 f0       	brcs	.+10     	; 0x352c <__mulsf3+0x12>
    3522:	af df       	rcall	.-162    	; 0x3482 <__fp_pscB>
    3524:	18 f0       	brcs	.+6      	; 0x352c <__mulsf3+0x12>
    3526:	95 23       	and	r25, r21
    3528:	09 f0       	breq	.+2      	; 0x352c <__mulsf3+0x12>
    352a:	76 cf       	rjmp	.-276    	; 0x3418 <__fp_inf>
    352c:	7b cf       	rjmp	.-266    	; 0x3424 <__fp_nan>
    352e:	11 24       	eor	r1, r1
    3530:	e3 cf       	rjmp	.-58     	; 0x34f8 <__fp_szero>

00003532 <__mulsf3x>:
    3532:	bf df       	rcall	.-130    	; 0x34b2 <__fp_split3>
    3534:	a0 f3       	brcs	.-24     	; 0x351e <__mulsf3+0x4>

00003536 <__mulsf3_pse>:
    3536:	95 9f       	mul	r25, r21
    3538:	d1 f3       	breq	.-12     	; 0x352e <__mulsf3+0x14>
    353a:	95 0f       	add	r25, r21
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	55 1f       	adc	r21, r21
    3540:	62 9f       	mul	r22, r18
    3542:	f0 01       	movw	r30, r0
    3544:	72 9f       	mul	r23, r18
    3546:	bb 27       	eor	r27, r27
    3548:	f0 0d       	add	r31, r0
    354a:	b1 1d       	adc	r27, r1
    354c:	63 9f       	mul	r22, r19
    354e:	aa 27       	eor	r26, r26
    3550:	f0 0d       	add	r31, r0
    3552:	b1 1d       	adc	r27, r1
    3554:	aa 1f       	adc	r26, r26
    3556:	64 9f       	mul	r22, r20
    3558:	66 27       	eor	r22, r22
    355a:	b0 0d       	add	r27, r0
    355c:	a1 1d       	adc	r26, r1
    355e:	66 1f       	adc	r22, r22
    3560:	82 9f       	mul	r24, r18
    3562:	22 27       	eor	r18, r18
    3564:	b0 0d       	add	r27, r0
    3566:	a1 1d       	adc	r26, r1
    3568:	62 1f       	adc	r22, r18
    356a:	73 9f       	mul	r23, r19
    356c:	b0 0d       	add	r27, r0
    356e:	a1 1d       	adc	r26, r1
    3570:	62 1f       	adc	r22, r18
    3572:	83 9f       	mul	r24, r19
    3574:	a0 0d       	add	r26, r0
    3576:	61 1d       	adc	r22, r1
    3578:	22 1f       	adc	r18, r18
    357a:	74 9f       	mul	r23, r20
    357c:	33 27       	eor	r19, r19
    357e:	a0 0d       	add	r26, r0
    3580:	61 1d       	adc	r22, r1
    3582:	23 1f       	adc	r18, r19
    3584:	84 9f       	mul	r24, r20
    3586:	60 0d       	add	r22, r0
    3588:	21 1d       	adc	r18, r1
    358a:	82 2f       	mov	r24, r18
    358c:	76 2f       	mov	r23, r22
    358e:	6a 2f       	mov	r22, r26
    3590:	11 24       	eor	r1, r1
    3592:	9f 57       	subi	r25, 0x7F	; 127
    3594:	50 40       	sbci	r21, 0x00	; 0
    3596:	8a f0       	brmi	.+34     	; 0x35ba <__mulsf3_pse+0x84>
    3598:	e1 f0       	breq	.+56     	; 0x35d2 <__mulsf3_pse+0x9c>
    359a:	88 23       	and	r24, r24
    359c:	4a f0       	brmi	.+18     	; 0x35b0 <__mulsf3_pse+0x7a>
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	bb 1f       	adc	r27, r27
    35a4:	66 1f       	adc	r22, r22
    35a6:	77 1f       	adc	r23, r23
    35a8:	88 1f       	adc	r24, r24
    35aa:	91 50       	subi	r25, 0x01	; 1
    35ac:	50 40       	sbci	r21, 0x00	; 0
    35ae:	a9 f7       	brne	.-22     	; 0x359a <__mulsf3_pse+0x64>
    35b0:	9e 3f       	cpi	r25, 0xFE	; 254
    35b2:	51 05       	cpc	r21, r1
    35b4:	70 f0       	brcs	.+28     	; 0x35d2 <__mulsf3_pse+0x9c>
    35b6:	30 cf       	rjmp	.-416    	; 0x3418 <__fp_inf>
    35b8:	9f cf       	rjmp	.-194    	; 0x34f8 <__fp_szero>
    35ba:	5f 3f       	cpi	r21, 0xFF	; 255
    35bc:	ec f3       	brlt	.-6      	; 0x35b8 <__mulsf3_pse+0x82>
    35be:	98 3e       	cpi	r25, 0xE8	; 232
    35c0:	dc f3       	brlt	.-10     	; 0x35b8 <__mulsf3_pse+0x82>
    35c2:	86 95       	lsr	r24
    35c4:	77 95       	ror	r23
    35c6:	67 95       	ror	r22
    35c8:	b7 95       	ror	r27
    35ca:	f7 95       	ror	r31
    35cc:	e7 95       	ror	r30
    35ce:	9f 5f       	subi	r25, 0xFF	; 255
    35d0:	c1 f7       	brne	.-16     	; 0x35c2 <__mulsf3_pse+0x8c>
    35d2:	fe 2b       	or	r31, r30
    35d4:	88 0f       	add	r24, r24
    35d6:	91 1d       	adc	r25, r1
    35d8:	96 95       	lsr	r25
    35da:	87 95       	ror	r24
    35dc:	97 f9       	bld	r25, 7
    35de:	08 95       	ret
    35e0:	11 f4       	brne	.+4      	; 0x35e6 <__mulsf3_pse+0xb0>
    35e2:	0e f4       	brtc	.+2      	; 0x35e6 <__mulsf3_pse+0xb0>
    35e4:	1f cf       	rjmp	.-450    	; 0x3424 <__fp_nan>
    35e6:	45 c0       	rjmp	.+138    	; 0x3672 <__fp_mpack>

000035e8 <sqrt>:
    35e8:	6c df       	rcall	.-296    	; 0x34c2 <__fp_splitA>
    35ea:	d0 f3       	brcs	.-12     	; 0x35e0 <__mulsf3_pse+0xaa>
    35ec:	99 23       	and	r25, r25
    35ee:	d9 f3       	breq	.-10     	; 0x35e6 <__mulsf3_pse+0xb0>
    35f0:	ce f3       	brts	.-14     	; 0x35e4 <__mulsf3_pse+0xae>
    35f2:	9f 57       	subi	r25, 0x7F	; 127
    35f4:	55 0b       	sbc	r21, r21
    35f6:	87 ff       	sbrs	r24, 7
    35f8:	4a d0       	rcall	.+148    	; 0x368e <__fp_norm2>
    35fa:	00 24       	eor	r0, r0
    35fc:	a0 e6       	ldi	r26, 0x60	; 96
    35fe:	40 ea       	ldi	r20, 0xA0	; 160
    3600:	90 01       	movw	r18, r0
    3602:	80 58       	subi	r24, 0x80	; 128
    3604:	56 95       	lsr	r21
    3606:	97 95       	ror	r25
    3608:	28 f4       	brcc	.+10     	; 0x3614 <sqrt+0x2c>
    360a:	80 5c       	subi	r24, 0xC0	; 192
    360c:	66 0f       	add	r22, r22
    360e:	77 1f       	adc	r23, r23
    3610:	88 1f       	adc	r24, r24
    3612:	20 f0       	brcs	.+8      	; 0x361c <sqrt+0x34>
    3614:	26 17       	cp	r18, r22
    3616:	37 07       	cpc	r19, r23
    3618:	48 07       	cpc	r20, r24
    361a:	30 f4       	brcc	.+12     	; 0x3628 <sqrt+0x40>
    361c:	62 1b       	sub	r22, r18
    361e:	73 0b       	sbc	r23, r19
    3620:	84 0b       	sbc	r24, r20
    3622:	20 29       	or	r18, r0
    3624:	31 29       	or	r19, r1
    3626:	4a 2b       	or	r20, r26
    3628:	a6 95       	lsr	r26
    362a:	17 94       	ror	r1
    362c:	07 94       	ror	r0
    362e:	20 25       	eor	r18, r0
    3630:	31 25       	eor	r19, r1
    3632:	4a 27       	eor	r20, r26
    3634:	58 f7       	brcc	.-42     	; 0x360c <sqrt+0x24>
    3636:	66 0f       	add	r22, r22
    3638:	77 1f       	adc	r23, r23
    363a:	88 1f       	adc	r24, r24
    363c:	20 f0       	brcs	.+8      	; 0x3646 <sqrt+0x5e>
    363e:	26 17       	cp	r18, r22
    3640:	37 07       	cpc	r19, r23
    3642:	48 07       	cpc	r20, r24
    3644:	30 f4       	brcc	.+12     	; 0x3652 <sqrt+0x6a>
    3646:	62 0b       	sbc	r22, r18
    3648:	73 0b       	sbc	r23, r19
    364a:	84 0b       	sbc	r24, r20
    364c:	20 0d       	add	r18, r0
    364e:	31 1d       	adc	r19, r1
    3650:	41 1d       	adc	r20, r1
    3652:	a0 95       	com	r26
    3654:	81 f7       	brne	.-32     	; 0x3636 <sqrt+0x4e>
    3656:	b9 01       	movw	r22, r18
    3658:	84 2f       	mov	r24, r20
    365a:	91 58       	subi	r25, 0x81	; 129
    365c:	88 0f       	add	r24, r24
    365e:	96 95       	lsr	r25
    3660:	87 95       	ror	r24
    3662:	08 95       	ret

00003664 <square>:
    3664:	9b 01       	movw	r18, r22
    3666:	ac 01       	movw	r20, r24
    3668:	58 cf       	rjmp	.-336    	; 0x351a <__mulsf3>

0000366a <__unordsf2>:
    366a:	b2 de       	rcall	.-668    	; 0x33d0 <__fp_cmp>
    366c:	88 0b       	sbc	r24, r24
    366e:	99 0b       	sbc	r25, r25
    3670:	08 95       	ret

00003672 <__fp_mpack>:
    3672:	9f 3f       	cpi	r25, 0xFF	; 255
    3674:	31 f0       	breq	.+12     	; 0x3682 <__fp_mpack_finite+0xc>

00003676 <__fp_mpack_finite>:
    3676:	91 50       	subi	r25, 0x01	; 1
    3678:	20 f4       	brcc	.+8      	; 0x3682 <__fp_mpack_finite+0xc>
    367a:	87 95       	ror	r24
    367c:	77 95       	ror	r23
    367e:	67 95       	ror	r22
    3680:	b7 95       	ror	r27
    3682:	88 0f       	add	r24, r24
    3684:	91 1d       	adc	r25, r1
    3686:	96 95       	lsr	r25
    3688:	87 95       	ror	r24
    368a:	97 f9       	bld	r25, 7
    368c:	08 95       	ret

0000368e <__fp_norm2>:
    368e:	91 50       	subi	r25, 0x01	; 1
    3690:	50 40       	sbci	r21, 0x00	; 0
    3692:	66 0f       	add	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	88 1f       	adc	r24, r24
    3698:	d2 f7       	brpl	.-12     	; 0x368e <__fp_norm2>
    369a:	08 95       	ret

0000369c <__udivmodsi4>:
    369c:	a1 e2       	ldi	r26, 0x21	; 33
    369e:	1a 2e       	mov	r1, r26
    36a0:	aa 1b       	sub	r26, r26
    36a2:	bb 1b       	sub	r27, r27
    36a4:	fd 01       	movw	r30, r26
    36a6:	0d c0       	rjmp	.+26     	; 0x36c2 <__udivmodsi4_ep>

000036a8 <__udivmodsi4_loop>:
    36a8:	aa 1f       	adc	r26, r26
    36aa:	bb 1f       	adc	r27, r27
    36ac:	ee 1f       	adc	r30, r30
    36ae:	ff 1f       	adc	r31, r31
    36b0:	a2 17       	cp	r26, r18
    36b2:	b3 07       	cpc	r27, r19
    36b4:	e4 07       	cpc	r30, r20
    36b6:	f5 07       	cpc	r31, r21
    36b8:	20 f0       	brcs	.+8      	; 0x36c2 <__udivmodsi4_ep>
    36ba:	a2 1b       	sub	r26, r18
    36bc:	b3 0b       	sbc	r27, r19
    36be:	e4 0b       	sbc	r30, r20
    36c0:	f5 0b       	sbc	r31, r21

000036c2 <__udivmodsi4_ep>:
    36c2:	66 1f       	adc	r22, r22
    36c4:	77 1f       	adc	r23, r23
    36c6:	88 1f       	adc	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	1a 94       	dec	r1
    36cc:	69 f7       	brne	.-38     	; 0x36a8 <__udivmodsi4_loop>
    36ce:	60 95       	com	r22
    36d0:	70 95       	com	r23
    36d2:	80 95       	com	r24
    36d4:	90 95       	com	r25
    36d6:	9b 01       	movw	r18, r22
    36d8:	ac 01       	movw	r20, r24
    36da:	bd 01       	movw	r22, r26
    36dc:	cf 01       	movw	r24, r30
    36de:	08 95       	ret

000036e0 <__tablejump2__>:
    36e0:	ee 0f       	add	r30, r30
    36e2:	ff 1f       	adc	r31, r31

000036e4 <__tablejump__>:
    36e4:	05 90       	lpm	r0, Z+
    36e6:	f4 91       	lpm	r31, Z
    36e8:	e0 2d       	mov	r30, r0
    36ea:	19 94       	eijmp

000036ec <__tablejump_elpm__>:
    36ec:	07 90       	elpm	r0, Z+
    36ee:	f6 91       	elpm	r31, Z
    36f0:	e0 2d       	mov	r30, r0
    36f2:	19 94       	eijmp

000036f4 <_exit>:
    36f4:	f8 94       	cli

000036f6 <__stop_program>:
    36f6:	ff cf       	rjmp	.-2      	; 0x36f6 <__stop_program>
