
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00002404  00002498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f9b  00800242  00800242  000024da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00001140  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00019944  00000000  00000000  0000364a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ae5  00000000  00000000  0001cf8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007586  00000000  00000000  0001fa73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00003d70  00000000  00000000  00026ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006913  00000000  00000000  0002ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000141ef  00000000  00000000  0003167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011c8  00000000  00000000  0004586e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fb c0       	rjmp	.+502    	; 0x1f8 <__ctors_end>
       2:	00 00       	nop
       4:	29 c1       	rjmp	.+594    	; 0x258 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c1       	rjmp	.+570    	; 0x258 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c5       	rjmp	.+2820   	; 0xb3a <__vector_13>
      36:	00 00       	nop
      38:	0f c1       	rjmp	.+542    	; 0x258 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0d c1       	rjmp	.+538    	; 0x258 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c1       	rjmp	.+534    	; 0x258 <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c1       	rjmp	.+530    	; 0x258 <__bad_interrupt>
      46:	00 00       	nop
      48:	07 c1       	rjmp	.+526    	; 0x258 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	05 c1       	rjmp	.+522    	; 0x258 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c1       	rjmp	.+518    	; 0x258 <__bad_interrupt>
      52:	00 00       	nop
      54:	01 c1       	rjmp	.+514    	; 0x258 <__bad_interrupt>
      56:	00 00       	nop
      58:	ff c0       	rjmp	.+510    	; 0x258 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__vector_23>
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_25>
      68:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_26>
      6c:	f5 c0       	rjmp	.+490    	; 0x258 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f3 c0       	rjmp	.+486    	; 0x258 <__bad_interrupt>
      72:	00 00       	nop
      74:	f1 c0       	rjmp	.+482    	; 0x258 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c0       	rjmp	.+478    	; 0x258 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c0       	rjmp	.+474    	; 0x258 <__bad_interrupt>
      7e:	00 00       	nop
      80:	eb c0       	rjmp	.+470    	; 0x258 <__bad_interrupt>
      82:	00 00       	nop
      84:	e9 c0       	rjmp	.+466    	; 0x258 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c0       	rjmp	.+462    	; 0x258 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c0       	rjmp	.+458    	; 0x258 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_36>
      94:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_37>
      98:	df c0       	rjmp	.+446    	; 0x258 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_39>
      a0:	db c0       	rjmp	.+438    	; 0x258 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c0       	rjmp	.+434    	; 0x258 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d7 c0       	rjmp	.+430    	; 0x258 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c0       	rjmp	.+422    	; 0x258 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c0       	rjmp	.+414    	; 0x258 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cd c0       	rjmp	.+410    	; 0x258 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cb c0       	rjmp	.+406    	; 0x258 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c9 c0       	rjmp	.+402    	; 0x258 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c7 c0       	rjmp	.+398    	; 0x258 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__vector_51>
      d0:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_52>
      d4:	c1 c0       	rjmp	.+386    	; 0x258 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_54>
      dc:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_55>
      e0:	bb c0       	rjmp	.+374    	; 0x258 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5a 11       	cpse	r21, r10
      e6:	5e 11       	cpse	r21, r14
      e8:	4e 11       	cpse	r20, r14
      ea:	54 11       	cpse	r21, r4
      ec:	a3 11       	cpse	r26, r3
      ee:	62 11       	cpse	r22, r2
      f0:	68 11       	cpse	r22, r8
      f2:	6e 11       	cpse	r22, r14
      f4:	74 11       	cpse	r23, r4
      f6:	7a 11       	cpse	r23, r10
      f8:	80 11       	cpse	r24, r0
      fa:	86 11       	cpse	r24, r6
      fc:	8c 11       	cpse	r24, r12
      fe:	a3 11       	cpse	r26, r3
     100:	92 11       	cpse	r25, r2
     102:	98 11       	cpse	r25, r8
     104:	9e 11       	cpse	r25, r14

00000106 <__trampolines_end>:
     106:	00 00       	nop
     108:	09 0a       	sbc	r0, r25
     10a:	02 08       	sbc	r0, r2
     10c:	0b 0c       	add	r0, r11
     10e:	0d 07       	cpc	r16, r29
     110:	06 03       	mulsu	r16, r22
     112:	04 01       	movw	r0, r8
	...
     130:	00 00       	nop
     132:	11 10       	cpse	r1, r1
     134:	0f 00       	.word	0x000f	; ????
	...

0000014c <digital_pin_to_bit_mask_PGM>:
     14c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18c:	04 08 10 20 40 80                                   ... @.

00000192 <digital_pin_to_port_PGM>:
     192:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d2:	0b 0b 0b 0b 0b 0b                                   ......

000001d8 <port_to_output_PGM>:
     1d8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1e8:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f2 <__ctors_start>:
     1f2:	b5 01       	movw	r22, r10
     1f4:	31 0b       	sbc	r19, r17
     1f6:	92 0e       	add	r9, r18

000001f8 <__ctors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	d1 e2       	ldi	r29, 0x21	; 33
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0c bf       	out	0x3c, r16	; 60

00000208 <__do_copy_data>:
     208:	12 e0       	ldi	r17, 0x02	; 2
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	e4 e0       	ldi	r30, 0x04	; 4
     210:	f4 e2       	ldi	r31, 0x24	; 36
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	a2 34       	cpi	r26, 0x42	; 66
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	21 e1       	ldi	r18, 0x11	; 17
     224:	a2 e4       	ldi	r26, 0x42	; 66
     226:	b2 e0       	ldi	r27, 0x02	; 2
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	ad 3d       	cpi	r26, 0xDD	; 221
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>

00000232 <__do_global_ctors>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	c8 ef       	ldi	r28, 0xF8	; 248
     236:	d1 e0       	ldi	r29, 0x01	; 1
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	06 c0       	rjmp	.+12     	; 0x248 <__do_global_ctors+0x16>
     23c:	22 97       	sbiw	r28, 0x02	; 2
     23e:	01 09       	sbc	r16, r1
     240:	fe 01       	movw	r30, r28
     242:	0b bf       	out	0x3b, r16	; 59
     244:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__tablejump_elpm__>
     248:	c2 3f       	cpi	r28, 0xF2	; 242
     24a:	d1 07       	cpc	r29, r17
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 07       	cpc	r16, r24
     250:	a9 f7       	brne	.-22     	; 0x23c <__do_global_ctors+0xa>
     252:	5b d0       	rcall	.+182    	; 0x30a <main>
     254:	0c 94 00 12 	jmp	0x2400	; 0x2400 <_exit>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <_Z5task1Pv>:


#define STACK_DEPTH 2048

void vApplicationIdleHook()
{
     25a:	6a e0       	ldi	r22, 0x0A	; 10
     25c:	72 e0       	ldi	r23, 0x02	; 2
     25e:	82 e9       	ldi	r24, 0x92	; 146
     260:	9f e0       	ldi	r25, 0x0F	; 15
     262:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN5Print7printlnEPKc>
     266:	22 e4       	ldi	r18, 0x42	; 66
     268:	32 e0       	ldi	r19, 0x02	; 2
     26a:	44 e4       	ldi	r20, 0x44	; 68
     26c:	52 e0       	ldi	r21, 0x02	; 2
     26e:	66 e4       	ldi	r22, 0x46	; 70
     270:	72 e0       	ldi	r23, 0x02	; 2
     272:	88 e4       	ldi	r24, 0x48	; 72
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	8d d2       	rcall	.+1306   	; 0x792 <_ZN7MPU605015getAccelerationEPiS0_S0_>
     278:	60 e1       	ldi	r22, 0x10	; 16
     27a:	72 e0       	ldi	r23, 0x02	; 2
     27c:	82 e9       	ldi	r24, 0x92	; 146
     27e:	9f e0       	ldi	r25, 0x0F	; 15
     280:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN5Print5printEPKc>
     284:	60 91 46 02 	lds	r22, 0x0246
     288:	70 91 47 02 	lds	r23, 0x0247
     28c:	4a e0       	ldi	r20, 0x0A	; 10
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	82 e9       	ldi	r24, 0x92	; 146
     292:	9f e0       	ldi	r25, 0x0F	; 15
     294:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN5Print5printEii>
     298:	64 e1       	ldi	r22, 0x14	; 20
     29a:	72 e0       	ldi	r23, 0x02	; 2
     29c:	82 e9       	ldi	r24, 0x92	; 146
     29e:	9f e0       	ldi	r25, 0x0F	; 15
     2a0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN5Print5printEPKc>
     2a4:	60 91 44 02 	lds	r22, 0x0244
     2a8:	70 91 45 02 	lds	r23, 0x0245
     2ac:	4a e0       	ldi	r20, 0x0A	; 10
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	82 e9       	ldi	r24, 0x92	; 146
     2b2:	9f e0       	ldi	r25, 0x0F	; 15
     2b4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN5Print5printEii>
     2b8:	64 e1       	ldi	r22, 0x14	; 20
     2ba:	72 e0       	ldi	r23, 0x02	; 2
     2bc:	82 e9       	ldi	r24, 0x92	; 146
     2be:	9f e0       	ldi	r25, 0x0F	; 15
     2c0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN5Print5printEPKc>
     2c4:	60 91 42 02 	lds	r22, 0x0242
     2c8:	70 91 43 02 	lds	r23, 0x0243
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	82 e9       	ldi	r24, 0x92	; 146
     2d2:	9f e0       	ldi	r25, 0x0F	; 15
     2d4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN5Print5printEii>
     2d8:	64 e1       	ldi	r22, 0x14	; 20
     2da:	72 e0       	ldi	r23, 0x02	; 2
     2dc:	82 e9       	ldi	r24, 0x92	; 146
     2de:	9f e0       	ldi	r25, 0x0F	; 15
     2e0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN5Print5printEPKc>
     2e4:	84 e6       	ldi	r24, 0x64	; 100
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <delayMicroseconds>

000002ec <setup>:
     2ec:	8a ed       	ldi	r24, 0xDA	; 218
     2ee:	9e e0       	ldi	r25, 0x0E	; 14
     2f0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN7TwoWire5beginEv>
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	52 ec       	ldi	r21, 0xC2	; 194
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	82 e9       	ldi	r24, 0x92	; 146
     2fe:	9f e0       	ldi	r25, 0x0F	; 15
     300:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN14HardwareSerial5beginEm>
     304:	88 e4       	ldi	r24, 0x48	; 72
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	93 c2       	rjmp	.+1318   	; 0x830 <_ZN7MPU605010initializeEv>

0000030a <main>:
	//
}

int main(void)
{
     30a:	af 92       	push	r10
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	1f 92       	push	r1
     31e:	1f 92       	push	r1
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
	init() ;
     324:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <init>
	setup() ;
     328:	e1 df       	rcall	.-62     	; 0x2ec <setup>
	
	TaskHandle_t t1 ;
	
	xTaskCreate(task1, "Task 1", STACK_DEPTH, NULL,6,&t1);
     32a:	a1 2c       	mov	r10, r1
     32c:	b1 2c       	mov	r11, r1
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	ce 01       	movw	r24, r28
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	7c 01       	movw	r14, r24
     338:	06 e0       	ldi	r16, 0x06	; 6
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	58 e0       	ldi	r21, 0x08	; 8
     342:	66 e1       	ldi	r22, 0x16	; 22
     344:	72 e0       	ldi	r23, 0x02	; 2
     346:	8d e2       	ldi	r24, 0x2D	; 45
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	14 d4       	rcall	.+2088   	; 0xb74 <xTaskGenericCreate>
	
	vTaskStartScheduler();
     34c:	f9 d4       	rcall	.+2546   	; 0xd40 <vTaskStartScheduler>
	
		//Serial.println("end") ;
		delayMicroseconds(100);
	} */
	
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
     364:	bf 90       	pop	r11
     366:	af 90       	pop	r10
     368:	08 95       	ret

0000036a <_GLOBAL__sub_I_accelgyro>:
#include "I2Cdev.h"
#include "MPU6050.h"
#include "Wire.h"


MPU6050 accelgyro;
     36a:	88 e4       	ldi	r24, 0x48	; 72
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	f9 c1       	rjmp	.+1010   	; 0x762 <_ZN7MPU6050C1Ev>

00000370 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     376:	14 d5       	rcall	.+2600   	; 0xda0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     378:	80 91 57 02 	lds	r24, 0x0257
     37c:	90 91 58 02 	lds	r25, 0x0258
     380:	89 2b       	or	r24, r25
     382:	31 f4       	brne	.+12     	; 0x390 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     384:	8c e5       	ldi	r24, 0x5C	; 92
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	90 93 58 02 	sts	0x0258, r25
     38c:	80 93 57 02 	sts	0x0257, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     390:	20 91 59 02 	lds	r18, 0x0259
     394:	30 91 5a 02 	lds	r19, 0x025A
     398:	ce 01       	movw	r24, r28
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	87 3b       	cpi	r24, 0xB7	; 183
     3a0:	4b e0       	ldi	r20, 0x0B	; 11
     3a2:	94 07       	cpc	r25, r20
     3a4:	70 f4       	brcc	.+28     	; 0x3c2 <pvPortMalloc+0x52>
     3a6:	28 17       	cp	r18, r24
     3a8:	39 07       	cpc	r19, r25
     3aa:	58 f4       	brcc	.+22     	; 0x3c2 <pvPortMalloc+0x52>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     3ac:	c0 91 57 02 	lds	r28, 0x0257
     3b0:	d0 91 58 02 	lds	r29, 0x0258
     3b4:	c2 0f       	add	r28, r18
     3b6:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     3b8:	90 93 5a 02 	sts	0x025A, r25
     3bc:	80 93 59 02 	sts	0x0259, r24
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <pvPortMalloc+0x56>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     3c6:	9e d5       	rcall	.+2876   	; 0xf04 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     3c8:	ce 01       	movw	r24, r28
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     3d0:	08 95       	ret

000003d2 <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	1f 92       	push	r1
     3e0:	1f 92       	push	r1
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	06 2f       	mov	r16, r22
     3e8:	14 2f       	mov	r17, r20
     3ea:	68 2f       	mov	r22, r24
     3ec:	8a ed       	ldi	r24, 0xDA	; 218
     3ee:	9e e0       	ldi	r25, 0x0E	; 14
     3f0:	29 83       	std	Y+1, r18	; 0x01
     3f2:	3a 83       	std	Y+2, r19	; 0x02
     3f4:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN7TwoWire17beginTransmissionEh>
     3f8:	60 2f       	mov	r22, r16
     3fa:	8a ed       	ldi	r24, 0xDA	; 218
     3fc:	9e e0       	ldi	r25, 0x0E	; 14
     3fe:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
     402:	29 81       	ldd	r18, Y+1	; 0x01
     404:	02 2f       	mov	r16, r18
     406:	e2 2e       	mov	r14, r18
     408:	3a 81       	ldd	r19, Y+2	; 0x02
     40a:	f3 2e       	mov	r15, r19
     40c:	8e 2d       	mov	r24, r14
     40e:	80 1b       	sub	r24, r16
     410:	81 17       	cp	r24, r17
     412:	40 f4       	brcc	.+16     	; 0x424 <_ZN6I2Cdev10writeBytesEhhhPh+0x52>
     414:	f7 01       	movw	r30, r14
     416:	61 91       	ld	r22, Z+
     418:	7f 01       	movw	r14, r30
     41a:	8a ed       	ldi	r24, 0xDA	; 218
     41c:	9e e0       	ldi	r25, 0x0E	; 14
     41e:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
     422:	f4 cf       	rjmp	.-24     	; 0x40c <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
     424:	8a ed       	ldi	r24, 0xDA	; 218
     426:	9e e0       	ldi	r25, 0x0E	; 14
     428:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <_ZN6I2Cdev9writeByteEhhh>:
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	1f 92       	push	r1
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	49 83       	std	Y+1, r20	; 0x01
     44c:	9e 01       	movw	r18, r28
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	be df       	rcall	.-132    	; 0x3d2 <_ZN6I2Cdev10writeBytesEhhhPh>
     456:	0f 90       	pop	r0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <_ZN6I2Cdev9readBytesEhhhPhj>:
     45e:	3f 92       	push	r3
     460:	4f 92       	push	r4
     462:	5f 92       	push	r5
     464:	6f 92       	push	r6
     466:	7f 92       	push	r7
     468:	8f 92       	push	r8
     46a:	9f 92       	push	r9
     46c:	af 92       	push	r10
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     482:	00 d0       	rcall	.+0      	; 0x484 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	68 2e       	mov	r6, r24
     48a:	56 2e       	mov	r5, r22
     48c:	74 2e       	mov	r7, r20
     48e:	3a 83       	std	Y+2, r19	; 0x02
     490:	29 83       	std	Y+1, r18	; 0x01
     492:	0e 94 cb 10 	call	0x2196	; 0x2196 <millis>
     496:	6b 01       	movw	r12, r22
     498:	7c 01       	movw	r14, r24
     49a:	31 2c       	mov	r3, r1
     49c:	41 2c       	mov	r4, r1
     49e:	87 2d       	mov	r24, r7
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	9c 83       	std	Y+4, r25	; 0x04
     4a4:	8b 83       	std	Y+3, r24	; 0x03
     4a6:	48 01       	movw	r8, r16
     4a8:	a1 2c       	mov	r10, r1
     4aa:	b1 2c       	mov	r11, r1
     4ac:	37 14       	cp	r3, r7
     4ae:	a8 f5       	brcc	.+106    	; 0x51a <_ZN6I2Cdev9readBytesEhhhPhj+0xbc>
     4b0:	66 2d       	mov	r22, r6
     4b2:	8a ed       	ldi	r24, 0xDA	; 218
     4b4:	9e e0       	ldi	r25, 0x0E	; 14
     4b6:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN7TwoWire17beginTransmissionEh>
     4ba:	65 2d       	mov	r22, r5
     4bc:	8a ed       	ldi	r24, 0xDA	; 218
     4be:	9e e0       	ldi	r25, 0x0E	; 14
     4c0:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
     4c4:	8a ed       	ldi	r24, 0xDA	; 218
     4c6:	9e e0       	ldi	r25, 0x0E	; 14
     4c8:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>
     4cc:	66 2d       	mov	r22, r6
     4ce:	8a ed       	ldi	r24, 0xDA	; 218
     4d0:	9e e0       	ldi	r25, 0x0E	; 14
     4d2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN7TwoWire17beginTransmissionEh>
     4d6:	4b 81       	ldd	r20, Y+3	; 0x03
     4d8:	5c 81       	ldd	r21, Y+4	; 0x04
     4da:	43 19       	sub	r20, r3
     4dc:	51 09       	sbc	r21, r1
     4de:	41 32       	cpi	r20, 0x21	; 33
     4e0:	51 05       	cpc	r21, r1
     4e2:	14 f0       	brlt	.+4      	; 0x4e8 <_ZN6I2Cdev9readBytesEhhhPhj+0x8a>
     4e4:	40 e2       	ldi	r20, 0x20	; 32
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	66 2d       	mov	r22, r6
     4ea:	8a ed       	ldi	r24, 0xDA	; 218
     4ec:	9e e0       	ldi	r25, 0x0E	; 14
     4ee:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN7TwoWire11requestFromEhh>
     4f2:	8a ed       	ldi	r24, 0xDA	; 218
     4f4:	9e e0       	ldi	r25, 0x0E	; 14
     4f6:	eb d7       	rcall	.+4054   	; 0x14ce <_ZN7TwoWire9availableEv>
     4f8:	89 2b       	or	r24, r25
     4fa:	59 f1       	breq	.+86     	; 0x552 <_ZN6I2Cdev9readBytesEhhhPhj+0xf4>
     4fc:	01 15       	cp	r16, r1
     4fe:	11 05       	cpc	r17, r1
     500:	99 f1       	breq	.+102    	; 0x568 <_ZN6I2Cdev9readBytesEhhhPhj+0x10a>
     502:	0e 94 cb 10 	call	0x2196	; 0x2196 <millis>
     506:	6c 19       	sub	r22, r12
     508:	7d 09       	sbc	r23, r13
     50a:	8e 09       	sbc	r24, r14
     50c:	9f 09       	sbc	r25, r15
     50e:	68 15       	cp	r22, r8
     510:	79 05       	cpc	r23, r9
     512:	8a 05       	cpc	r24, r10
     514:	9b 05       	cpc	r25, r11
     516:	40 f1       	brcs	.+80     	; 0x568 <_ZN6I2Cdev9readBytesEhhhPhj+0x10a>
     518:	1c c0       	rjmp	.+56     	; 0x552 <_ZN6I2Cdev9readBytesEhhhPhj+0xf4>
     51a:	01 15       	cp	r16, r1
     51c:	11 05       	cpc	r17, r1
     51e:	a1 f1       	breq	.+104    	; 0x588 <_ZN6I2Cdev9readBytesEhhhPhj+0x12a>
     520:	0e 94 cb 10 	call	0x2196	; 0x2196 <millis>
     524:	6c 19       	sub	r22, r12
     526:	7d 09       	sbc	r23, r13
     528:	8e 09       	sbc	r24, r14
     52a:	9f 09       	sbc	r25, r15
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	60 17       	cp	r22, r16
     532:	71 07       	cpc	r23, r17
     534:	82 07       	cpc	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	38 f1       	brcs	.+78     	; 0x588 <_ZN6I2Cdev9readBytesEhhhPhj+0x12a>
     53a:	87 2d       	mov	r24, r7
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	24 2d       	mov	r18, r4
     540:	33 27       	eor	r19, r19
     542:	27 fd       	sbrc	r18, 7
     544:	30 95       	com	r19
     546:	28 17       	cp	r18, r24
     548:	39 07       	cpc	r19, r25
     54a:	f4 f4       	brge	.+60     	; 0x588 <_ZN6I2Cdev9readBytesEhhhPhj+0x12a>
     54c:	44 24       	eor	r4, r4
     54e:	4a 94       	dec	r4
     550:	1b c0       	rjmp	.+54     	; 0x588 <_ZN6I2Cdev9readBytesEhhhPhj+0x12a>
     552:	8a ed       	ldi	r24, 0xDA	; 218
     554:	9e e0       	ldi	r25, 0x0E	; 14
     556:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>
     55a:	87 2d       	mov	r24, r7
     55c:	90 e2       	ldi	r25, 0x20	; 32
     55e:	97 15       	cp	r25, r7
     560:	08 f4       	brcc	.+2      	; 0x564 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
     562:	80 e2       	ldi	r24, 0x20	; 32
     564:	38 0e       	add	r3, r24
     566:	a2 cf       	rjmp	.-188    	; 0x4ac <_ZN6I2Cdev9readBytesEhhhPhj+0x4e>
     568:	e9 81       	ldd	r30, Y+1	; 0x01
     56a:	fa 81       	ldd	r31, Y+2	; 0x02
     56c:	e4 0d       	add	r30, r4
     56e:	f1 1d       	adc	r31, r1
     570:	47 fc       	sbrc	r4, 7
     572:	fa 95       	dec	r31
     574:	fe 83       	std	Y+6, r31	; 0x06
     576:	ed 83       	std	Y+5, r30	; 0x05
     578:	8a ed       	ldi	r24, 0xDA	; 218
     57a:	9e e0       	ldi	r25, 0x0E	; 14
     57c:	b0 d7       	rcall	.+3936   	; 0x14de <_ZN7TwoWire4readEv>
     57e:	ed 81       	ldd	r30, Y+5	; 0x05
     580:	fe 81       	ldd	r31, Y+6	; 0x06
     582:	80 83       	st	Z, r24
     584:	43 94       	inc	r4
     586:	b5 cf       	rjmp	.-150    	; 0x4f2 <_ZN6I2Cdev9readBytesEhhhPhj+0x94>
     588:	84 2d       	mov	r24, r4
     58a:	26 96       	adiw	r28, 0x06	; 6
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	3f 90       	pop	r3
     5b8:	08 95       	ret

000005ba <_ZN6I2Cdev8readByteEhhPhj>:
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	89 01       	movw	r16, r18
     5c0:	9a 01       	movw	r18, r20
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	4c df       	rcall	.-360    	; 0x45e <_ZN6I2Cdev9readBytesEhhhPhj>
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	18 2f       	mov	r17, r24
     5e0:	06 2f       	mov	r16, r22
     5e2:	f4 2e       	mov	r15, r20
     5e4:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     5e6:	20 91 06 02 	lds	r18, 0x0206
     5ea:	30 91 07 02 	lds	r19, 0x0207
     5ee:	ae 01       	movw	r20, r28
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	e2 df       	rcall	.-60     	; 0x5ba <_ZN6I2Cdev8readByteEhhPhj>
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	0f 2c       	mov	r0, r15
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <_ZN6I2Cdev8writeBitEhhhh+0x36>
     600:	22 0f       	add	r18, r18
     602:	0a 94       	dec	r0
     604:	ea f7       	brpl	.-6      	; 0x600 <_ZN6I2Cdev8writeBitEhhhh+0x34>
     606:	ee 20       	and	r14, r14
     608:	19 f0       	breq	.+6      	; 0x610 <_ZN6I2Cdev8writeBitEhhhh+0x44>
     60a:	48 2f       	mov	r20, r24
     60c:	42 2b       	or	r20, r18
     60e:	03 c0       	rjmp	.+6      	; 0x616 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
     610:	42 2f       	mov	r20, r18
     612:	40 95       	com	r20
     614:	48 23       	and	r20, r24
     616:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     618:	60 2f       	mov	r22, r16
     61a:	81 2f       	mov	r24, r17
     61c:	11 df       	rcall	.-478    	; 0x440 <_ZN6I2Cdev9writeByteEhhh>
}
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	08 95       	ret

0000062e <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	f8 2e       	mov	r15, r24
     644:	e6 2e       	mov	r14, r22
     646:	d4 2e       	mov	r13, r20
     648:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     64a:	20 91 06 02 	lds	r18, 0x0206
     64e:	30 91 07 02 	lds	r19, 0x0207
     652:	ae 01       	movw	r20, r28
     654:	4f 5f       	subi	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	b0 df       	rcall	.-160    	; 0x5ba <_ZN6I2Cdev8readByteEhhPhj>
     65a:	88 23       	and	r24, r24
     65c:	11 f1       	breq	.+68     	; 0x6a2 <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     65e:	4d 2d       	mov	r20, r13
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	41 1b       	sub	r20, r17
     664:	51 09       	sbc	r21, r1
     666:	4f 5f       	subi	r20, 0xFF	; 255
     668:	5f 4f       	sbci	r21, 0xFF	; 255
     66a:	e1 e0       	ldi	r30, 0x01	; 1
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	1a 95       	dec	r17
     676:	e2 f7       	brpl	.-8      	; 0x670 <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	04 2e       	mov	r0, r20
     67c:	01 c0       	rjmp	.+2      	; 0x680 <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
     67e:	ee 0f       	add	r30, r30
     680:	0a 94       	dec	r0
     682:	ea f7       	brpl	.-6      	; 0x67e <_ZN6I2Cdev9writeBitsEhhhhh+0x50>
        data <<= (bitStart - length + 1); // shift data into correct position
     684:	01 c0       	rjmp	.+2      	; 0x688 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     686:	00 0f       	add	r16, r16
     688:	4a 95       	dec	r20
     68a:	ea f7       	brpl	.-6      	; 0x686 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     68c:	4e 2f       	mov	r20, r30
     68e:	40 95       	com	r20
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	48 23       	and	r20, r24
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     694:	e0 23       	and	r30, r16
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     696:	4e 2b       	or	r20, r30
     698:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     69a:	6e 2d       	mov	r22, r14
     69c:	8f 2d       	mov	r24, r15
     69e:	d0 de       	rcall	.-608    	; 0x440 <_ZN6I2Cdev9writeByteEhhh>
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <_ZN6I2Cdev9writeBitsEhhhhh+0x76>
    } else {
        return false;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	08 95       	ret

000006b6 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     6b6:	fc 01       	movw	r30, r24
     6b8:	03 96       	adiw	r24, 0x03	; 3
     6ba:	92 83       	std	Z+2, r25	; 0x02
     6bc:	81 83       	std	Z+1, r24	; 0x01
     6be:	2f ef       	ldi	r18, 0xFF	; 255
     6c0:	3f ef       	ldi	r19, 0xFF	; 255
     6c2:	34 83       	std	Z+4, r19	; 0x04
     6c4:	23 83       	std	Z+3, r18	; 0x03
     6c6:	96 83       	std	Z+6, r25	; 0x06
     6c8:	85 83       	std	Z+5, r24	; 0x05
     6ca:	90 87       	std	Z+8, r25	; 0x08
     6cc:	87 83       	std	Z+7, r24	; 0x07
     6ce:	10 82       	st	Z, r1
     6d0:	08 95       	ret

000006d2 <vListInitialiseItem>:
     6d2:	fc 01       	movw	r30, r24
     6d4:	11 86       	std	Z+9, r1	; 0x09
     6d6:	10 86       	std	Z+8, r1	; 0x08
     6d8:	08 95       	ret

000006da <vListInsertEnd>:
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	9c 01       	movw	r18, r24
     6e0:	fb 01       	movw	r30, r22
     6e2:	dc 01       	movw	r26, r24
     6e4:	11 96       	adiw	r26, 0x01	; 1
     6e6:	cd 91       	ld	r28, X+
     6e8:	dc 91       	ld	r29, X
     6ea:	12 97       	sbiw	r26, 0x02	; 2
     6ec:	d3 83       	std	Z+3, r29	; 0x03
     6ee:	c2 83       	std	Z+2, r28	; 0x02
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	9d 81       	ldd	r25, Y+5	; 0x05
     6f4:	95 83       	std	Z+5, r25	; 0x05
     6f6:	84 83       	std	Z+4, r24	; 0x04
     6f8:	8c 81       	ldd	r24, Y+4	; 0x04
     6fa:	9d 81       	ldd	r25, Y+5	; 0x05
     6fc:	dc 01       	movw	r26, r24
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	7c 93       	st	X, r23
     702:	6e 93       	st	-X, r22
     704:	12 97       	sbiw	r26, 0x02	; 2
     706:	7d 83       	std	Y+5, r23	; 0x05
     708:	6c 83       	std	Y+4, r22	; 0x04
     70a:	31 87       	std	Z+9, r19	; 0x09
     70c:	20 87       	std	Z+8, r18	; 0x08
     70e:	f9 01       	movw	r30, r18
     710:	80 81       	ld	r24, Z
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 83       	st	Z, r24
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     722:	a0 85       	ldd	r26, Z+8	; 0x08
     724:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	93 81       	ldd	r25, Z+3	; 0x03
     72a:	24 81       	ldd	r18, Z+4	; 0x04
     72c:	35 81       	ldd	r19, Z+5	; 0x05
     72e:	ec 01       	movw	r28, r24
     730:	3d 83       	std	Y+5, r19	; 0x05
     732:	2c 83       	std	Y+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     734:	c4 81       	ldd	r28, Z+4	; 0x04
     736:	d5 81       	ldd	r29, Z+5	; 0x05
     738:	9b 83       	std	Y+3, r25	; 0x03
     73a:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	12 97       	sbiw	r26, 0x02	; 2
     744:	8e 17       	cp	r24, r30
     746:	9f 07       	cpc	r25, r31
     748:	21 f4       	brne	.+8      	; 0x752 <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	dc 93       	st	X, r29
     74e:	ce 93       	st	-X, r28
     750:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     752:	11 86       	std	Z+9, r1	; 0x09
     754:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     756:	8c 91       	ld	r24, X
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_ZN7MPU6050C1Ev>:
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
uint8_t MPU6050::getClockSource() {
    I2Cdev::readBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, buffer);
    return buffer[0];
}
     762:	28 e6       	ldi	r18, 0x68	; 104
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
     768:	08 95       	ret

0000076a <_ZN7MPU605021setFullScaleGyroRangeEh>:
     76a:	0f 93       	push	r16
     76c:	06 2f       	mov	r16, r22
     76e:	22 e0       	ldi	r18, 0x02	; 2
     770:	44 e0       	ldi	r20, 0x04	; 4
     772:	6b e1       	ldi	r22, 0x1B	; 27
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	5a df       	rcall	.-332    	; 0x62e <_ZN6I2Cdev9writeBitsEhhhhh>
     77a:	0f 91       	pop	r16
     77c:	08 95       	ret

0000077e <_ZN7MPU605022setFullScaleAccelRangeEh>:
     77e:	0f 93       	push	r16
     780:	06 2f       	mov	r16, r22
     782:	22 e0       	ldi	r18, 0x02	; 2
     784:	44 e0       	ldi	r20, 0x04	; 4
     786:	6c e1       	ldi	r22, 0x1C	; 28
     788:	fc 01       	movw	r30, r24
     78a:	80 81       	ld	r24, Z
     78c:	50 df       	rcall	.-352    	; 0x62e <_ZN6I2Cdev9writeBitsEhhhhh>
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <_ZN7MPU605015getAccelerationEPiS0_S0_>:
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ec 01       	movw	r28, r24
     7a8:	7b 01       	movw	r14, r22
     7aa:	5a 01       	movw	r10, r20
     7ac:	69 01       	movw	r12, r18
     7ae:	00 91 06 02 	lds	r16, 0x0206
     7b2:	10 91 07 02 	lds	r17, 0x0207
     7b6:	9c 01       	movw	r18, r24
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	46 e0       	ldi	r20, 0x06	; 6
     7be:	6b e3       	ldi	r22, 0x3B	; 59
     7c0:	88 81       	ld	r24, Y
     7c2:	4d de       	rcall	.-870    	; 0x45e <_ZN6I2Cdev9readBytesEhhhPhj>
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	98 2f       	mov	r25, r24
     7ca:	88 27       	eor	r24, r24
     7cc:	2a 81       	ldd	r18, Y+2	; 0x02
     7ce:	82 2b       	or	r24, r18
     7d0:	f7 01       	movw	r30, r14
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	80 83       	st	Z, r24
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	98 2f       	mov	r25, r24
     7dc:	88 27       	eor	r24, r24
     7de:	2c 81       	ldd	r18, Y+4	; 0x04
     7e0:	82 2b       	or	r24, r18
     7e2:	f5 01       	movw	r30, r10
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
     7e8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	98 2f       	mov	r25, r24
     7ee:	88 27       	eor	r24, r24
     7f0:	2e 81       	ldd	r18, Y+6	; 0x06
     7f2:	82 2b       	or	r24, r18
     7f4:	f6 01       	movw	r30, r12
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	08 95       	ret

00000810 <_ZN7MPU605015setSleepEnabledEb>:
     810:	26 2f       	mov	r18, r22
     812:	46 e0       	ldi	r20, 0x06	; 6
     814:	6b e6       	ldi	r22, 0x6B	; 107
     816:	fc 01       	movw	r30, r24
     818:	80 81       	ld	r24, Z
     81a:	d8 ce       	rjmp	.-592    	; 0x5cc <_ZN6I2Cdev8writeBitEhhhh>

0000081c <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
     81c:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
     81e:	06 2f       	mov	r16, r22
     820:	23 e0       	ldi	r18, 0x03	; 3
     822:	42 e0       	ldi	r20, 0x02	; 2
     824:	6b e6       	ldi	r22, 0x6B	; 107
     826:	fc 01       	movw	r30, r24
     828:	80 81       	ld	r24, Z
     82a:	01 df       	rcall	.-510    	; 0x62e <_ZN6I2Cdev9writeBitsEhhhhh>
}
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	f1 df       	rcall	.-30     	; 0x81c <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	ce 01       	movw	r24, r28
     83e:	95 df       	rcall	.-214    	; 0x76a <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	ce 01       	movw	r24, r28
     844:	9c df       	rcall	.-200    	; 0x77e <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	ce 01       	movw	r24, r28
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
 */
void MPU6050::initialize() {
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     84e:	e0 cf       	rjmp	.-64     	; 0x810 <_ZN7MPU605015setSleepEnabledEb>

00000850 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     850:	31 e1       	ldi	r19, 0x11	; 17
     852:	fc 01       	movw	r30, r24
     854:	30 83       	st	Z, r19
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	22 e2       	ldi	r18, 0x22	; 34
     85a:	20 83       	st	Z, r18
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	a3 e3       	ldi	r26, 0x33	; 51
     860:	a0 83       	st	Z, r26
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	60 83       	st	Z, r22
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	70 83       	st	Z, r23
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	10 82       	st	Z, r1
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	10 82       	st	Z, r1
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	60 e8       	ldi	r22, 0x80	; 128
     876:	60 83       	st	Z, r22
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	10 82       	st	Z, r1
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	10 82       	st	Z, r1
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	10 82       	st	Z, r1
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	60 83       	st	Z, r22
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	63 e0       	ldi	r22, 0x03	; 3
     88e:	60 83       	st	Z, r22
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	64 e0       	ldi	r22, 0x04	; 4
     894:	60 83       	st	Z, r22
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	65 e0       	ldi	r22, 0x05	; 5
     89a:	60 83       	st	Z, r22
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	66 e0       	ldi	r22, 0x06	; 6
     8a0:	60 83       	st	Z, r22
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	67 e0       	ldi	r22, 0x07	; 7
     8a6:	60 83       	st	Z, r22
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	68 e0       	ldi	r22, 0x08	; 8
     8ac:	60 83       	st	Z, r22
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	69 e0       	ldi	r22, 0x09	; 9
     8b2:	60 83       	st	Z, r22
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	60 e1       	ldi	r22, 0x10	; 16
     8b8:	60 83       	st	Z, r22
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	30 83       	st	Z, r19
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	32 e1       	ldi	r19, 0x12	; 18
     8c2:	30 83       	st	Z, r19
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	33 e1       	ldi	r19, 0x13	; 19
     8c8:	30 83       	st	Z, r19
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	34 e1       	ldi	r19, 0x14	; 20
     8ce:	30 83       	st	Z, r19
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	35 e1       	ldi	r19, 0x15	; 21
     8d4:	30 83       	st	Z, r19
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	36 e1       	ldi	r19, 0x16	; 22
     8da:	30 83       	st	Z, r19
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	37 e1       	ldi	r19, 0x17	; 23
     8e0:	30 83       	st	Z, r19
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	38 e1       	ldi	r19, 0x18	; 24
     8e6:	30 83       	st	Z, r19
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	39 e1       	ldi	r19, 0x19	; 25
     8ec:	30 83       	st	Z, r19
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	30 e2       	ldi	r19, 0x20	; 32
     8f2:	30 83       	st	Z, r19
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	31 e2       	ldi	r19, 0x21	; 33
     8f8:	30 83       	st	Z, r19
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	20 83       	st	Z, r18
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	23 e2       	ldi	r18, 0x23	; 35
     902:	20 83       	st	Z, r18
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	40 83       	st	Z, r20
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	50 83       	st	Z, r21
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	26 e2       	ldi	r18, 0x26	; 38
     910:	20 83       	st	Z, r18
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	27 e2       	ldi	r18, 0x27	; 39
     916:	20 83       	st	Z, r18
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	28 e2       	ldi	r18, 0x28	; 40
     91c:	20 83       	st	Z, r18
     91e:	31 97       	sbiw	r30, 0x01	; 1
     920:	29 e2       	ldi	r18, 0x29	; 41
     922:	20 83       	st	Z, r18
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	20 e3       	ldi	r18, 0x30	; 48
     928:	20 83       	st	Z, r18
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	21 e3       	ldi	r18, 0x31	; 49
     92e:	20 83       	st	Z, r18
     930:	89 97       	sbiw	r24, 0x29	; 41
     932:	08 95       	ret

00000934 <xPortStartScheduler>:
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	80 93 b0 00 	sts	0x00B0, r24
     93a:	10 92 b2 00 	sts	0x00B2, r1
     93e:	80 e3       	ldi	r24, 0x30	; 48
     940:	80 93 b3 00 	sts	0x00B3, r24
     944:	e0 e7       	ldi	r30, 0x70	; 112
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	80 83       	st	Z, r24
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	80 93 b1 00 	sts	0x00B1, r24
     954:	a0 91 6a 0e 	lds	r26, 0x0E6A
     958:	b0 91 6b 0e 	lds	r27, 0x0E6B
     95c:	cd 91       	ld	r28, X+
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	dd 91       	ld	r29, X+
     962:	de bf       	out	0x3e, r29	; 62
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	1f 90       	pop	r1
     9a2:	0f 90       	pop	r0
     9a4:	0c be       	out	0x3c, r0	; 60
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	08 95       	ret
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret

000009b6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	0f 92       	push	r0
     9be:	0c b6       	in	r0, 0x3c	; 60
     9c0:	0f 92       	push	r0
     9c2:	0b b6       	in	r0, 0x3b	; 59
     9c4:	0f 92       	push	r0
     9c6:	1f 92       	push	r1
     9c8:	11 24       	eor	r1, r1
     9ca:	2f 92       	push	r2
     9cc:	3f 92       	push	r3
     9ce:	4f 92       	push	r4
     9d0:	5f 92       	push	r5
     9d2:	6f 92       	push	r6
     9d4:	7f 92       	push	r7
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
     a06:	a0 91 6a 0e 	lds	r26, 0x0E6A
     a0a:	b0 91 6b 0e 	lds	r27, 0x0E6B
     a0e:	0d b6       	in	r0, 0x3d	; 61
     a10:	0d 92       	st	X+, r0
     a12:	0e b6       	in	r0, 0x3e	; 62
     a14:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a16:	0f d3       	rcall	.+1566   	; 0x1036 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a18:	a0 91 6a 0e 	lds	r26, 0x0E6A
     a1c:	b0 91 6b 0e 	lds	r27, 0x0E6B
     a20:	cd 91       	ld	r28, X+
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	dd 91       	ld	r29, X+
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	ff 91       	pop	r31
     a2a:	ef 91       	pop	r30
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	8f 90       	pop	r8
     a58:	7f 90       	pop	r7
     a5a:	6f 90       	pop	r6
     a5c:	5f 90       	pop	r5
     a5e:	4f 90       	pop	r4
     a60:	3f 90       	pop	r3
     a62:	2f 90       	pop	r2
     a64:	1f 90       	pop	r1
     a66:	0f 90       	pop	r0
     a68:	0c be       	out	0x3c, r0	; 60
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a74:	08 95       	ret

00000a76 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	0f 92       	push	r0
     a7e:	0c b6       	in	r0, 0x3c	; 60
     a80:	0f 92       	push	r0
     a82:	0b b6       	in	r0, 0x3b	; 59
     a84:	0f 92       	push	r0
     a86:	1f 92       	push	r1
     a88:	11 24       	eor	r1, r1
     a8a:	2f 92       	push	r2
     a8c:	3f 92       	push	r3
     a8e:	4f 92       	push	r4
     a90:	5f 92       	push	r5
     a92:	6f 92       	push	r6
     a94:	7f 92       	push	r7
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	a0 91 6a 0e 	lds	r26, 0x0E6A
     aca:	b0 91 6b 0e 	lds	r27, 0x0E6B
     ace:	0d b6       	in	r0, 0x3d	; 61
     ad0:	0d 92       	st	X+, r0
     ad2:	0e b6       	in	r0, 0x3e	; 62
     ad4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     ad6:	6a d1       	rcall	.+724    	; 0xdac <xTaskIncrementTick>
     ad8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ada:	ad d2       	rcall	.+1370   	; 0x1036 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     adc:	a0 91 6a 0e 	lds	r26, 0x0E6A
     ae0:	b0 91 6b 0e 	lds	r27, 0x0E6B
     ae4:	cd 91       	ld	r28, X+
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	dd 91       	ld	r29, X+
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	6f 90       	pop	r6
     b20:	5f 90       	pop	r5
     b22:	4f 90       	pop	r4
     b24:	3f 90       	pop	r3
     b26:	2f 90       	pop	r2
     b28:	1f 90       	pop	r1
     b2a:	0f 90       	pop	r0
     b2c:	0c be       	out	0x3c, r0	; 60
     b2e:	0f 90       	pop	r0
     b30:	0b be       	out	0x3b, r0	; 59
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b38:	08 95       	ret

00000b3a <__vector_13>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	ISR (TIMER2_COMPA_vect, ISR_NAKED)
	{
		vPortYieldFromTick();
     b3a:	9d df       	rcall	.-198    	; 0xa76 <vPortYieldFromTick>
		asm volatile ( "reti" );
     b3c:	18 95       	reti

00000b3e <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     b3e:	e0 91 32 0e 	lds	r30, 0x0E32
     b42:	f0 91 33 0e 	lds	r31, 0x0E33
     b46:	80 81       	ld	r24, Z
     b48:	81 11       	cpse	r24, r1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <prvResetNextTaskUnblockTime+0x14>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	0c c0       	rjmp	.+24     	; 0xb6a <prvResetNextTaskUnblockTime+0x2c>
     b52:	e0 91 32 0e 	lds	r30, 0x0E32
     b56:	f0 91 33 0e 	lds	r31, 0x0E33
     b5a:	05 80       	ldd	r0, Z+5	; 0x05
     b5c:	f6 81       	ldd	r31, Z+6	; 0x06
     b5e:	e0 2d       	mov	r30, r0
     b60:	06 80       	ldd	r0, Z+6	; 0x06
     b62:	f7 81       	ldd	r31, Z+7	; 0x07
     b64:	e0 2d       	mov	r30, r0
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	90 93 09 02 	sts	0x0209, r25
     b6e:	80 93 08 02 	sts	0x0208, r24
     b72:	08 95       	ret

00000b74 <xTaskGenericCreate>:
     b74:	5f 92       	push	r5
     b76:	6f 92       	push	r6
     b78:	7f 92       	push	r7
     b7a:	8f 92       	push	r8
     b7c:	9f 92       	push	r9
     b7e:	af 92       	push	r10
     b80:	bf 92       	push	r11
     b82:	cf 92       	push	r12
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	4c 01       	movw	r8, r24
     b94:	16 2f       	mov	r17, r22
     b96:	57 2e       	mov	r5, r23
     b98:	5a 01       	movw	r10, r20
     b9a:	39 01       	movw	r6, r18
     b9c:	81 e2       	ldi	r24, 0x21	; 33
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	e7 db       	rcall	.-2098   	; 0x370 <pvPortMalloc>
     ba2:	ec 01       	movw	r28, r24
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	09 f4       	brne	.+2      	; 0xbaa <xTaskGenericCreate+0x36>
     ba8:	ba c0       	rjmp	.+372    	; 0xd1e <xTaskGenericCreate+0x1aa>
     baa:	c1 14       	cp	r12, r1
     bac:	d1 04       	cpc	r13, r1
     bae:	19 f4       	brne	.+6      	; 0xbb6 <xTaskGenericCreate+0x42>
     bb0:	c5 01       	movw	r24, r10
     bb2:	de db       	rcall	.-2116   	; 0x370 <pvPortMalloc>
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <xTaskGenericCreate+0x44>
     bb6:	c6 01       	movw	r24, r12
     bb8:	98 8f       	std	Y+24, r25	; 0x18
     bba:	8f 8b       	std	Y+23, r24	; 0x17
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <xTaskGenericCreate+0x52>
     bc0:	ce 01       	movw	r24, r28
     bc2:	06 dc       	rcall	.-2036   	; 0x3d0 <vPortFree>
     bc4:	ac c0       	rjmp	.+344    	; 0xd1e <xTaskGenericCreate+0x1aa>
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	a2 1a       	sub	r10, r18
     bca:	b1 08       	sbc	r11, r1
     bcc:	a8 0e       	add	r10, r24
     bce:	b9 1e       	adc	r11, r25
     bd0:	e1 2f       	mov	r30, r17
     bd2:	f5 2d       	mov	r31, r5
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	bf 01       	movw	r22, r30
     bda:	41 91       	ld	r20, Z+
     bdc:	9e 01       	movw	r18, r28
     bde:	28 0f       	add	r18, r24
     be0:	39 1f       	adc	r19, r25
     be2:	d9 01       	movw	r26, r18
     be4:	59 96       	adiw	r26, 0x19	; 25
     be6:	4c 93       	st	X, r20
     be8:	db 01       	movw	r26, r22
     bea:	2c 91       	ld	r18, X
     bec:	22 23       	and	r18, r18
     bee:	21 f0       	breq	.+8      	; 0xbf8 <xTaskGenericCreate+0x84>
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	88 30       	cpi	r24, 0x08	; 8
     bf4:	91 05       	cpc	r25, r1
     bf6:	81 f7       	brne	.-32     	; 0xbd8 <xTaskGenericCreate+0x64>
     bf8:	18 a2       	std	Y+32, r1	; 0x20
     bfa:	10 2f       	mov	r17, r16
     bfc:	04 30       	cpi	r16, 0x04	; 4
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <xTaskGenericCreate+0x8e>
     c00:	13 e0       	ldi	r17, 0x03	; 3
     c02:	1e 8b       	std	Y+22, r17	; 0x16
     c04:	6e 01       	movw	r12, r28
     c06:	b2 e0       	ldi	r27, 0x02	; 2
     c08:	cb 0e       	add	r12, r27
     c0a:	d1 1c       	adc	r13, r1
     c0c:	c6 01       	movw	r24, r12
     c0e:	61 dd       	rcall	.-1342   	; 0x6d2 <vListInitialiseItem>
     c10:	ce 01       	movw	r24, r28
     c12:	0c 96       	adiw	r24, 0x0c	; 12
     c14:	5e dd       	rcall	.-1348   	; 0x6d2 <vListInitialiseItem>
     c16:	d9 87       	std	Y+9, r29	; 0x09
     c18:	c8 87       	std	Y+8, r28	; 0x08
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	81 1b       	sub	r24, r17
     c20:	91 09       	sbc	r25, r1
     c22:	9d 87       	std	Y+13, r25	; 0x0d
     c24:	8c 87       	std	Y+12, r24	; 0x0c
     c26:	db 8b       	std	Y+19, r29	; 0x13
     c28:	ca 8b       	std	Y+18, r28	; 0x12
     c2a:	a3 01       	movw	r20, r6
     c2c:	b4 01       	movw	r22, r8
     c2e:	c5 01       	movw	r24, r10
     c30:	0f de       	rcall	.-994    	; 0x850 <pxPortInitialiseStack>
     c32:	99 83       	std	Y+1, r25	; 0x01
     c34:	88 83       	st	Y, r24
     c36:	e1 14       	cp	r14, r1
     c38:	f1 04       	cpc	r15, r1
     c3a:	19 f0       	breq	.+6      	; 0xc42 <xTaskGenericCreate+0xce>
     c3c:	f7 01       	movw	r30, r14
     c3e:	d1 83       	std	Z+1, r29	; 0x01
     c40:	c0 83       	st	Z, r28
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	0f 92       	push	r0
     c48:	80 91 1c 0e 	lds	r24, 0x0E1C
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	80 93 1c 0e 	sts	0x0E1C, r24
     c52:	80 91 6a 0e 	lds	r24, 0x0E6A
     c56:	90 91 6b 0e 	lds	r25, 0x0E6B
     c5a:	89 2b       	or	r24, r25
     c5c:	69 f5       	brne	.+90     	; 0xcb8 <xTaskGenericCreate+0x144>
     c5e:	d0 93 6b 0e 	sts	0x0E6B, r29
     c62:	c0 93 6a 0e 	sts	0x0E6A, r28
     c66:	80 91 1c 0e 	lds	r24, 0x0E1C
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	a1 f5       	brne	.+104    	; 0xcd6 <xTaskGenericCreate+0x162>
     c6e:	86 e4       	ldi	r24, 0x46	; 70
     c70:	9e e0       	ldi	r25, 0x0E	; 14
     c72:	21 dd       	rcall	.-1470   	; 0x6b6 <vListInitialise>
     c74:	8f e4       	ldi	r24, 0x4F	; 79
     c76:	9e e0       	ldi	r25, 0x0E	; 14
     c78:	1e dd       	rcall	.-1476   	; 0x6b6 <vListInitialise>
     c7a:	88 e5       	ldi	r24, 0x58	; 88
     c7c:	9e e0       	ldi	r25, 0x0E	; 14
     c7e:	1b dd       	rcall	.-1482   	; 0x6b6 <vListInitialise>
     c80:	81 e6       	ldi	r24, 0x61	; 97
     c82:	9e e0       	ldi	r25, 0x0E	; 14
     c84:	18 dd       	rcall	.-1488   	; 0x6b6 <vListInitialise>
     c86:	8d e3       	ldi	r24, 0x3D	; 61
     c88:	9e e0       	ldi	r25, 0x0E	; 14
     c8a:	15 dd       	rcall	.-1494   	; 0x6b6 <vListInitialise>
     c8c:	84 e3       	ldi	r24, 0x34	; 52
     c8e:	9e e0       	ldi	r25, 0x0E	; 14
     c90:	12 dd       	rcall	.-1500   	; 0x6b6 <vListInitialise>
     c92:	87 e2       	ldi	r24, 0x27	; 39
     c94:	9e e0       	ldi	r25, 0x0E	; 14
     c96:	0f dd       	rcall	.-1506   	; 0x6b6 <vListInitialise>
     c98:	8e e1       	ldi	r24, 0x1E	; 30
     c9a:	9e e0       	ldi	r25, 0x0E	; 14
     c9c:	0c dd       	rcall	.-1512   	; 0x6b6 <vListInitialise>
     c9e:	8d e3       	ldi	r24, 0x3D	; 61
     ca0:	9e e0       	ldi	r25, 0x0E	; 14
     ca2:	90 93 33 0e 	sts	0x0E33, r25
     ca6:	80 93 32 0e 	sts	0x0E32, r24
     caa:	84 e3       	ldi	r24, 0x34	; 52
     cac:	9e e0       	ldi	r25, 0x0E	; 14
     cae:	90 93 31 0e 	sts	0x0E31, r25
     cb2:	80 93 30 0e 	sts	0x0E30, r24
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <xTaskGenericCreate+0x162>
     cb8:	80 91 18 0e 	lds	r24, 0x0E18
     cbc:	81 11       	cpse	r24, r1
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <xTaskGenericCreate+0x162>
     cc0:	e0 91 6a 0e 	lds	r30, 0x0E6A
     cc4:	f0 91 6b 0e 	lds	r31, 0x0E6B
     cc8:	86 89       	ldd	r24, Z+22	; 0x16
     cca:	08 17       	cp	r16, r24
     ccc:	20 f0       	brcs	.+8      	; 0xcd6 <xTaskGenericCreate+0x162>
     cce:	d0 93 6b 0e 	sts	0x0E6B, r29
     cd2:	c0 93 6a 0e 	sts	0x0E6A, r28
     cd6:	80 91 14 0e 	lds	r24, 0x0E14
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 14 0e 	sts	0x0E14, r24
     ce0:	8e 89       	ldd	r24, Y+22	; 0x16
     ce2:	90 91 19 0e 	lds	r25, 0x0E19
     ce6:	98 17       	cp	r25, r24
     ce8:	10 f4       	brcc	.+4      	; 0xcee <xTaskGenericCreate+0x17a>
     cea:	80 93 19 0e 	sts	0x0E19, r24
     cee:	f9 e0       	ldi	r31, 0x09	; 9
     cf0:	8f 9f       	mul	r24, r31
     cf2:	c0 01       	movw	r24, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	b6 01       	movw	r22, r12
     cf8:	8a 5b       	subi	r24, 0xBA	; 186
     cfa:	91 4f       	sbci	r25, 0xF1	; 241
     cfc:	ee dc       	rcall	.-1572   	; 0x6da <vListInsertEnd>
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	80 91 18 0e 	lds	r24, 0x0E18
     d06:	88 23       	and	r24, r24
     d08:	41 f0       	breq	.+16     	; 0xd1a <xTaskGenericCreate+0x1a6>
     d0a:	e0 91 6a 0e 	lds	r30, 0x0E6A
     d0e:	f0 91 6b 0e 	lds	r31, 0x0E6B
     d12:	86 89       	ldd	r24, Z+22	; 0x16
     d14:	80 17       	cp	r24, r16
     d16:	08 f4       	brcc	.+2      	; 0xd1a <xTaskGenericCreate+0x1a6>
     d18:	4e de       	rcall	.-868    	; 0x9b6 <vPortYield>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <xTaskGenericCreate+0x1ac>
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	9f 90       	pop	r9
     d36:	8f 90       	pop	r8
     d38:	7f 90       	pop	r7
     d3a:	6f 90       	pop	r6
     d3c:	5f 90       	pop	r5
     d3e:	08 95       	ret

00000d40 <vTaskStartScheduler>:
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	a1 2c       	mov	r10, r1
     d50:	b1 2c       	mov	r11, r1
     d52:	c1 2c       	mov	r12, r1
     d54:	d1 2c       	mov	r13, r1
     d56:	e1 2c       	mov	r14, r1
     d58:	f1 2c       	mov	r15, r1
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	45 e5       	ldi	r20, 0x55	; 85
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	6d e1       	ldi	r22, 0x1D	; 29
     d66:	72 e0       	ldi	r23, 0x02	; 2
     d68:	8d ee       	ldi	r24, 0xED	; 237
     d6a:	97 e0       	ldi	r25, 0x07	; 7
     d6c:	03 df       	rcall	.-506    	; 0xb74 <xTaskGenericCreate>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	79 f4       	brne	.+30     	; 0xd90 <vTaskStartScheduler+0x50>
     d72:	f8 94       	cli
     d74:	80 93 18 0e 	sts	0x0E18, r24
     d78:	10 92 1b 0e 	sts	0x0E1B, r1
     d7c:	10 92 1a 0e 	sts	0x0E1A, r1
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	d2 cd       	rjmp	.-1116   	; 0x934 <xPortStartScheduler>
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	08 95       	ret

00000da0 <vTaskSuspendAll>:
     da0:	80 91 13 0e 	lds	r24, 0x0E13
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 13 0e 	sts	0x0E13, r24
     daa:	08 95       	ret

00000dac <xTaskIncrementTick>:
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	80 91 13 0e 	lds	r24, 0x0E13
     dc0:	81 11       	cpse	r24, r1
     dc2:	8a c0       	rjmp	.+276    	; 0xed8 <xTaskIncrementTick+0x12c>
     dc4:	80 91 1a 0e 	lds	r24, 0x0E1A
     dc8:	90 91 1b 0e 	lds	r25, 0x0E1B
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	90 93 1b 0e 	sts	0x0E1B, r25
     dd2:	80 93 1a 0e 	sts	0x0E1A, r24
     dd6:	00 91 1a 0e 	lds	r16, 0x0E1A
     dda:	10 91 1b 0e 	lds	r17, 0x0E1B
     dde:	01 15       	cp	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	b1 f4       	brne	.+44     	; 0xe10 <xTaskIncrementTick+0x64>
     de4:	80 91 32 0e 	lds	r24, 0x0E32
     de8:	90 91 33 0e 	lds	r25, 0x0E33
     dec:	20 91 30 0e 	lds	r18, 0x0E30
     df0:	30 91 31 0e 	lds	r19, 0x0E31
     df4:	30 93 33 0e 	sts	0x0E33, r19
     df8:	20 93 32 0e 	sts	0x0E32, r18
     dfc:	90 93 31 0e 	sts	0x0E31, r25
     e00:	80 93 30 0e 	sts	0x0E30, r24
     e04:	80 91 15 0e 	lds	r24, 0x0E15
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	80 93 15 0e 	sts	0x0E15, r24
     e0e:	97 de       	rcall	.-722    	; 0xb3e <prvResetNextTaskUnblockTime>
     e10:	80 91 08 02 	lds	r24, 0x0208
     e14:	90 91 09 02 	lds	r25, 0x0209
     e18:	d1 2c       	mov	r13, r1
     e1a:	08 17       	cp	r16, r24
     e1c:	19 07       	cpc	r17, r25
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <xTaskIncrementTick+0x76>
     e20:	4a c0       	rjmp	.+148    	; 0xeb6 <xTaskIncrementTick+0x10a>
     e22:	89 e0       	ldi	r24, 0x09	; 9
     e24:	c8 2e       	mov	r12, r24
     e26:	e0 91 32 0e 	lds	r30, 0x0E32
     e2a:	f0 91 33 0e 	lds	r31, 0x0E33
     e2e:	80 81       	ld	r24, Z
     e30:	81 11       	cpse	r24, r1
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <xTaskIncrementTick+0x96>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	90 93 09 02 	sts	0x0209, r25
     e3c:	80 93 08 02 	sts	0x0208, r24
     e40:	3a c0       	rjmp	.+116    	; 0xeb6 <xTaskIncrementTick+0x10a>
     e42:	e0 91 32 0e 	lds	r30, 0x0E32
     e46:	f0 91 33 0e 	lds	r31, 0x0E33
     e4a:	05 80       	ldd	r0, Z+5	; 0x05
     e4c:	f6 81       	ldd	r31, Z+6	; 0x06
     e4e:	e0 2d       	mov	r30, r0
     e50:	c6 81       	ldd	r28, Z+6	; 0x06
     e52:	d7 81       	ldd	r29, Z+7	; 0x07
     e54:	2a 81       	ldd	r18, Y+2	; 0x02
     e56:	3b 81       	ldd	r19, Y+3	; 0x03
     e58:	02 17       	cp	r16, r18
     e5a:	13 07       	cpc	r17, r19
     e5c:	28 f4       	brcc	.+10     	; 0xe68 <xTaskIncrementTick+0xbc>
     e5e:	30 93 09 02 	sts	0x0209, r19
     e62:	20 93 08 02 	sts	0x0208, r18
     e66:	27 c0       	rjmp	.+78     	; 0xeb6 <xTaskIncrementTick+0x10a>
     e68:	7e 01       	movw	r14, r28
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	e8 0e       	add	r14, r24
     e6e:	f1 1c       	adc	r15, r1
     e70:	c7 01       	movw	r24, r14
     e72:	54 dc       	rcall	.-1880   	; 0x71c <uxListRemove>
     e74:	2c 89       	ldd	r18, Y+20	; 0x14
     e76:	3d 89       	ldd	r19, Y+21	; 0x15
     e78:	23 2b       	or	r18, r19
     e7a:	19 f0       	breq	.+6      	; 0xe82 <xTaskIncrementTick+0xd6>
     e7c:	ce 01       	movw	r24, r28
     e7e:	0c 96       	adiw	r24, 0x0c	; 12
     e80:	4d dc       	rcall	.-1894   	; 0x71c <uxListRemove>
     e82:	2e 89       	ldd	r18, Y+22	; 0x16
     e84:	80 91 19 0e 	lds	r24, 0x0E19
     e88:	82 17       	cp	r24, r18
     e8a:	10 f4       	brcc	.+4      	; 0xe90 <xTaskIncrementTick+0xe4>
     e8c:	20 93 19 0e 	sts	0x0E19, r18
     e90:	c2 9e       	mul	r12, r18
     e92:	c0 01       	movw	r24, r0
     e94:	11 24       	eor	r1, r1
     e96:	b7 01       	movw	r22, r14
     e98:	8a 5b       	subi	r24, 0xBA	; 186
     e9a:	91 4f       	sbci	r25, 0xF1	; 241
     e9c:	1e dc       	rcall	.-1988   	; 0x6da <vListInsertEnd>
     e9e:	e0 91 6a 0e 	lds	r30, 0x0E6A
     ea2:	f0 91 6b 0e 	lds	r31, 0x0E6B
     ea6:	9e 89       	ldd	r25, Y+22	; 0x16
     ea8:	86 89       	ldd	r24, Z+22	; 0x16
     eaa:	98 17       	cp	r25, r24
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <xTaskIncrementTick+0x104>
     eae:	bb cf       	rjmp	.-138    	; 0xe26 <xTaskIncrementTick+0x7a>
     eb0:	dd 24       	eor	r13, r13
     eb2:	d3 94       	inc	r13
     eb4:	b8 cf       	rjmp	.-144    	; 0xe26 <xTaskIncrementTick+0x7a>
     eb6:	e0 91 6a 0e 	lds	r30, 0x0E6A
     eba:	f0 91 6b 0e 	lds	r31, 0x0E6B
     ebe:	e6 89       	ldd	r30, Z+22	; 0x16
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	e8 9f       	mul	r30, r24
     ec4:	f0 01       	movw	r30, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	ea 5b       	subi	r30, 0xBA	; 186
     eca:	f1 4f       	sbci	r31, 0xF1	; 241
     ecc:	80 81       	ld	r24, Z
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	48 f0       	brcs	.+18     	; 0xee4 <xTaskIncrementTick+0x138>
     ed2:	dd 24       	eor	r13, r13
     ed4:	d3 94       	inc	r13
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <xTaskIncrementTick+0x138>
     ed8:	80 91 17 0e 	lds	r24, 0x0E17
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	80 93 17 0e 	sts	0x0E17, r24
     ee2:	d1 2c       	mov	r13, r1
     ee4:	80 91 16 0e 	lds	r24, 0x0E16
     ee8:	88 23       	and	r24, r24
     eea:	11 f0       	breq	.+4      	; 0xef0 <xTaskIncrementTick+0x144>
     eec:	dd 24       	eor	r13, r13
     eee:	d3 94       	inc	r13
     ef0:	8d 2d       	mov	r24, r13
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <xTaskResumeAll>:
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	0f 92       	push	r0
     f16:	80 91 13 0e 	lds	r24, 0x0E13
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	80 93 13 0e 	sts	0x0E13, r24
     f20:	80 91 13 0e 	lds	r24, 0x0E13
     f24:	88 23       	and	r24, r24
     f26:	11 f0       	breq	.+4      	; 0xf2c <xTaskResumeAll+0x28>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	4e c0       	rjmp	.+156    	; 0xfc8 <xTaskResumeAll+0xc4>
     f2c:	80 91 1c 0e 	lds	r24, 0x0E1C
     f30:	88 23       	and	r24, r24
     f32:	d1 f3       	breq	.-12     	; 0xf28 <xTaskResumeAll+0x24>
     f34:	99 e0       	ldi	r25, 0x09	; 9
     f36:	f9 2e       	mov	r15, r25
     f38:	ee 24       	eor	r14, r14
     f3a:	e3 94       	inc	r14
     f3c:	80 91 27 0e 	lds	r24, 0x0E27
     f40:	88 23       	and	r24, r24
     f42:	39 f1       	breq	.+78     	; 0xf92 <xTaskResumeAll+0x8e>
     f44:	e0 91 2c 0e 	lds	r30, 0x0E2C
     f48:	f0 91 2d 0e 	lds	r31, 0x0E2D
     f4c:	c6 81       	ldd	r28, Z+6	; 0x06
     f4e:	d7 81       	ldd	r29, Z+7	; 0x07
     f50:	ce 01       	movw	r24, r28
     f52:	0c 96       	adiw	r24, 0x0c	; 12
     f54:	e3 db       	rcall	.-2106   	; 0x71c <uxListRemove>
     f56:	8e 01       	movw	r16, r28
     f58:	0e 5f       	subi	r16, 0xFE	; 254
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	c8 01       	movw	r24, r16
     f5e:	de db       	rcall	.-2116   	; 0x71c <uxListRemove>
     f60:	8e 89       	ldd	r24, Y+22	; 0x16
     f62:	90 91 19 0e 	lds	r25, 0x0E19
     f66:	98 17       	cp	r25, r24
     f68:	10 f4       	brcc	.+4      	; 0xf6e <xTaskResumeAll+0x6a>
     f6a:	80 93 19 0e 	sts	0x0E19, r24
     f6e:	f8 9e       	mul	r15, r24
     f70:	c0 01       	movw	r24, r0
     f72:	11 24       	eor	r1, r1
     f74:	b8 01       	movw	r22, r16
     f76:	8a 5b       	subi	r24, 0xBA	; 186
     f78:	91 4f       	sbci	r25, 0xF1	; 241
     f7a:	af db       	rcall	.-2210   	; 0x6da <vListInsertEnd>
     f7c:	e0 91 6a 0e 	lds	r30, 0x0E6A
     f80:	f0 91 6b 0e 	lds	r31, 0x0E6B
     f84:	9e 89       	ldd	r25, Y+22	; 0x16
     f86:	86 89       	ldd	r24, Z+22	; 0x16
     f88:	98 17       	cp	r25, r24
     f8a:	c0 f2       	brcs	.-80     	; 0xf3c <xTaskResumeAll+0x38>
     f8c:	e0 92 16 0e 	sts	0x0E16, r14
     f90:	d5 cf       	rjmp	.-86     	; 0xf3c <xTaskResumeAll+0x38>
     f92:	80 91 17 0e 	lds	r24, 0x0E17
     f96:	81 11       	cpse	r24, r1
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <xTaskResumeAll+0xa6>
     f9a:	80 91 16 0e 	lds	r24, 0x0E16
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <xTaskResumeAll+0xa0>
     fa2:	c2 cf       	rjmp	.-124    	; 0xf28 <xTaskResumeAll+0x24>
     fa4:	08 dd       	rcall	.-1520   	; 0x9b6 <vPortYield>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <xTaskResumeAll+0xc4>
     faa:	c1 e0       	ldi	r28, 0x01	; 1
     fac:	80 91 17 0e 	lds	r24, 0x0E17
     fb0:	88 23       	and	r24, r24
     fb2:	99 f3       	breq	.-26     	; 0xf9a <xTaskResumeAll+0x96>
     fb4:	fb de       	rcall	.-522    	; 0xdac <xTaskIncrementTick>
     fb6:	81 11       	cpse	r24, r1
     fb8:	c0 93 16 0e 	sts	0x0E16, r28
     fbc:	80 91 17 0e 	lds	r24, 0x0E17
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	80 93 17 0e 	sts	0x0E17, r24
     fc6:	f2 cf       	rjmp	.-28     	; 0xfac <xTaskResumeAll+0xa8>
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret

00000fda <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
     fda:	80 91 1d 0e 	lds	r24, 0x0E1D
     fde:	88 23       	and	r24, r24
     fe0:	21 f1       	breq	.+72     	; 0x102a <prvIdleTask+0x50>
		{
			vTaskSuspendAll();
     fe2:	de de       	rcall	.-580    	; 0xda0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     fe4:	c0 91 1e 0e 	lds	r28, 0x0E1E
			}
			( void ) xTaskResumeAll();
     fe8:	8d df       	rcall	.-230    	; 0xf04 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     fea:	cc 23       	and	r28, r28
     fec:	b1 f3       	breq	.-20     	; 0xfda <prvIdleTask>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     ff4:	e0 91 23 0e 	lds	r30, 0x0E23
     ff8:	f0 91 24 0e 	lds	r31, 0x0E24
     ffc:	c6 81       	ldd	r28, Z+6	; 0x06
     ffe:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1000:	ce 01       	movw	r24, r28
    1002:	02 96       	adiw	r24, 0x02	; 2
    1004:	8b db       	rcall	.-2282   	; 0x71c <uxListRemove>
					--uxCurrentNumberOfTasks;
    1006:	80 91 1c 0e 	lds	r24, 0x0E1C
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	80 93 1c 0e 	sts	0x0E1C, r24
					--uxTasksDeleted;
    1010:	80 91 1d 0e 	lds	r24, 0x0E1D
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	80 93 1d 0e 	sts	0x0E1D, r24
				}
				taskEXIT_CRITICAL();
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    101e:	8f 89       	ldd	r24, Y+23	; 0x17
    1020:	98 8d       	ldd	r25, Y+24	; 0x18
    1022:	d6 d9       	rcall	.-3156   	; 0x3d0 <vPortFree>
		vPortFree( pxTCB );
    1024:	ce 01       	movw	r24, r28
    1026:	d4 d9       	rcall	.-3160   	; 0x3d0 <vPortFree>
    1028:	d8 cf       	rjmp	.-80     	; 0xfda <prvIdleTask>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    102a:	80 91 46 0e 	lds	r24, 0x0E46
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	a0 f2       	brcs	.-88     	; 0xfda <prvIdleTask>
			{
				taskYIELD();
    1032:	c1 dc       	rcall	.-1662   	; 0x9b6 <vPortYield>
    1034:	d2 cf       	rjmp	.-92     	; 0xfda <prvIdleTask>

00001036 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1036:	80 91 13 0e 	lds	r24, 0x0E13
    103a:	88 23       	and	r24, r24
    103c:	21 f0       	breq	.+8      	; 0x1046 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 16 0e 	sts	0x0E16, r24
    1044:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1046:	10 92 16 0e 	sts	0x0E16, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    104a:	99 e0       	ldi	r25, 0x09	; 9
    104c:	e0 91 19 0e 	lds	r30, 0x0E19
    1050:	9e 9f       	mul	r25, r30
    1052:	f0 01       	movw	r30, r0
    1054:	11 24       	eor	r1, r1
    1056:	ea 5b       	subi	r30, 0xBA	; 186
    1058:	f1 4f       	sbci	r31, 0xF1	; 241
    105a:	80 81       	ld	r24, Z
    105c:	81 11       	cpse	r24, r1
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vTaskSwitchContext+0x36>
    1060:	80 91 19 0e 	lds	r24, 0x0E19
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	80 93 19 0e 	sts	0x0E19, r24
    106a:	f0 cf       	rjmp	.-32     	; 0x104c <vTaskSwitchContext+0x16>
    106c:	e0 91 19 0e 	lds	r30, 0x0E19
    1070:	89 e0       	ldi	r24, 0x09	; 9
    1072:	e8 9f       	mul	r30, r24
    1074:	f0 01       	movw	r30, r0
    1076:	11 24       	eor	r1, r1
    1078:	ea 5b       	subi	r30, 0xBA	; 186
    107a:	f1 4f       	sbci	r31, 0xF1	; 241
    107c:	a1 81       	ldd	r26, Z+1	; 0x01
    107e:	b2 81       	ldd	r27, Z+2	; 0x02
    1080:	12 96       	adiw	r26, 0x02	; 2
    1082:	0d 90       	ld	r0, X+
    1084:	bc 91       	ld	r27, X
    1086:	a0 2d       	mov	r26, r0
    1088:	b2 83       	std	Z+2, r27	; 0x02
    108a:	a1 83       	std	Z+1, r26	; 0x01
    108c:	cf 01       	movw	r24, r30
    108e:	03 96       	adiw	r24, 0x03	; 3
    1090:	a8 17       	cp	r26, r24
    1092:	b9 07       	cpc	r27, r25
    1094:	31 f4       	brne	.+12     	; 0x10a2 <vTaskSwitchContext+0x6c>
    1096:	12 96       	adiw	r26, 0x02	; 2
    1098:	8d 91       	ld	r24, X+
    109a:	9c 91       	ld	r25, X
    109c:	13 97       	sbiw	r26, 0x03	; 3
    109e:	92 83       	std	Z+2, r25	; 0x02
    10a0:	81 83       	std	Z+1, r24	; 0x01
    10a2:	01 80       	ldd	r0, Z+1	; 0x01
    10a4:	f2 81       	ldd	r31, Z+2	; 0x02
    10a6:	e0 2d       	mov	r30, r0
    10a8:	86 81       	ldd	r24, Z+6	; 0x06
    10aa:	97 81       	ldd	r25, Z+7	; 0x07
    10ac:	90 93 6b 0e 	sts	0x0E6B, r25
    10b0:	80 93 6a 0e 	sts	0x0E6A, r24
    10b4:	08 95       	ret

000010b6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10b6:	10 92 d9 0e 	sts	0x0ED9, r1
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 d7 0e 	sts	0x0ED7, r24
    10c0:	10 92 d6 0e 	sts	0x0ED6, r1
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	84 e1       	ldi	r24, 0x14	; 20
    10c8:	0e 94 a4 11 	call	0x2348	; 0x2348 <digitalWrite>
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	85 e1       	ldi	r24, 0x15	; 21
    10d0:	0e 94 a4 11 	call	0x2348	; 0x2348 <digitalWrite>
    10d4:	e9 eb       	ldi	r30, 0xB9	; 185
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	80 83       	st	Z, r24
    10de:	80 81       	ld	r24, Z
    10e0:	8d 7f       	andi	r24, 0xFD	; 253
    10e2:	80 83       	st	Z, r24
    10e4:	88 e4       	ldi	r24, 0x48	; 72
    10e6:	80 93 b8 00 	sts	0x00B8, r24
    10ea:	85 e4       	ldi	r24, 0x45	; 69
    10ec:	80 93 bc 00 	sts	0x00BC, r24
    10f0:	08 95       	ret

000010f2 <twi_readFrom>:
    10f2:	41 32       	cpi	r20, 0x21	; 33
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <twi_readFrom+0x6>
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <twi_readFrom+0x84>
    10f8:	90 91 d9 0e 	lds	r25, 0x0ED9
    10fc:	91 11       	cpse	r25, r1
    10fe:	fc cf       	rjmp	.-8      	; 0x10f8 <twi_readFrom+0x6>
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	90 93 d9 0e 	sts	0x0ED9, r25
    1106:	20 93 d7 0e 	sts	0x0ED7, r18
    110a:	2f ef       	ldi	r18, 0xFF	; 255
    110c:	20 93 6c 0e 	sts	0x0E6C, r18
    1110:	10 92 b1 0e 	sts	0x0EB1, r1
    1114:	24 0f       	add	r18, r20
    1116:	20 93 b0 0e 	sts	0x0EB0, r18
    111a:	90 93 d8 0e 	sts	0x0ED8, r25
    111e:	90 91 d8 0e 	lds	r25, 0x0ED8
    1122:	88 0f       	add	r24, r24
    1124:	89 2b       	or	r24, r25
    1126:	80 93 d8 0e 	sts	0x0ED8, r24
    112a:	80 91 d6 0e 	lds	r24, 0x0ED6
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	41 f4       	brne	.+16     	; 0x1142 <twi_readFrom+0x50>
    1132:	10 92 d6 0e 	sts	0x0ED6, r1
    1136:	80 91 d8 0e 	lds	r24, 0x0ED8
    113a:	80 93 bb 00 	sts	0x00BB, r24
    113e:	85 ec       	ldi	r24, 0xC5	; 197
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <twi_readFrom+0x52>
    1142:	85 ee       	ldi	r24, 0xE5	; 229
    1144:	80 93 bc 00 	sts	0x00BC, r24
    1148:	80 91 d9 0e 	lds	r24, 0x0ED9
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	e1 f3       	breq	.-8      	; 0x1148 <twi_readFrom+0x56>
    1150:	80 91 b1 0e 	lds	r24, 0x0EB1
    1154:	84 17       	cp	r24, r20
    1156:	10 f4       	brcc	.+4      	; 0x115c <twi_readFrom+0x6a>
    1158:	40 91 b1 0e 	lds	r20, 0x0EB1
    115c:	22 eb       	ldi	r18, 0xB2	; 178
    115e:	3e e0       	ldi	r19, 0x0E	; 14
    1160:	fb 01       	movw	r30, r22
    1162:	d9 01       	movw	r26, r18
    1164:	8a 2f       	mov	r24, r26
    1166:	82 1b       	sub	r24, r18
    1168:	84 17       	cp	r24, r20
    116a:	18 f4       	brcc	.+6      	; 0x1172 <twi_readFrom+0x80>
    116c:	8d 91       	ld	r24, X+
    116e:	81 93       	st	Z+, r24
    1170:	f9 cf       	rjmp	.-14     	; 0x1164 <twi_readFrom+0x72>
    1172:	84 2f       	mov	r24, r20
    1174:	08 95       	ret
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret

0000117a <twi_writeTo>:
    117a:	0f 93       	push	r16
    117c:	41 32       	cpi	r20, 0x21	; 33
    117e:	08 f0       	brcs	.+2      	; 0x1182 <twi_writeTo+0x8>
    1180:	46 c0       	rjmp	.+140    	; 0x120e <twi_writeTo+0x94>
    1182:	90 91 d9 0e 	lds	r25, 0x0ED9
    1186:	91 11       	cpse	r25, r1
    1188:	fc cf       	rjmp	.-8      	; 0x1182 <twi_writeTo+0x8>
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	90 93 d9 0e 	sts	0x0ED9, r25
    1190:	00 93 d7 0e 	sts	0x0ED7, r16
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	90 93 6c 0e 	sts	0x0E6C, r25
    119a:	10 92 b1 0e 	sts	0x0EB1, r1
    119e:	40 93 b0 0e 	sts	0x0EB0, r20
    11a2:	fb 01       	movw	r30, r22
    11a4:	62 eb       	ldi	r22, 0xB2	; 178
    11a6:	7e e0       	ldi	r23, 0x0E	; 14
    11a8:	db 01       	movw	r26, r22
    11aa:	9a 2f       	mov	r25, r26
    11ac:	96 1b       	sub	r25, r22
    11ae:	94 17       	cp	r25, r20
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <twi_writeTo+0x3e>
    11b2:	91 91       	ld	r25, Z+
    11b4:	9d 93       	st	X+, r25
    11b6:	f9 cf       	rjmp	.-14     	; 0x11aa <twi_writeTo+0x30>
    11b8:	10 92 d8 0e 	sts	0x0ED8, r1
    11bc:	90 91 d8 0e 	lds	r25, 0x0ED8
    11c0:	88 0f       	add	r24, r24
    11c2:	89 2b       	or	r24, r25
    11c4:	80 93 d8 0e 	sts	0x0ED8, r24
    11c8:	80 91 d6 0e 	lds	r24, 0x0ED6
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	41 f4       	brne	.+16     	; 0x11e0 <twi_writeTo+0x66>
    11d0:	10 92 d6 0e 	sts	0x0ED6, r1
    11d4:	80 91 d8 0e 	lds	r24, 0x0ED8
    11d8:	80 93 bb 00 	sts	0x00BB, r24
    11dc:	85 ec       	ldi	r24, 0xC5	; 197
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <twi_writeTo+0x68>
    11e0:	85 ee       	ldi	r24, 0xE5	; 229
    11e2:	80 93 bc 00 	sts	0x00BC, r24
    11e6:	22 23       	and	r18, r18
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <twi_writeTo+0x78>
    11ea:	80 91 d9 0e 	lds	r24, 0x0ED9
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	e1 f3       	breq	.-8      	; 0x11ea <twi_writeTo+0x70>
    11f2:	80 91 6c 0e 	lds	r24, 0x0E6C
    11f6:	8f 3f       	cpi	r24, 0xFF	; 255
    11f8:	61 f0       	breq	.+24     	; 0x1212 <twi_writeTo+0x98>
    11fa:	80 91 6c 0e 	lds	r24, 0x0E6C
    11fe:	80 32       	cpi	r24, 0x20	; 32
    1200:	51 f0       	breq	.+20     	; 0x1216 <twi_writeTo+0x9c>
    1202:	80 91 6c 0e 	lds	r24, 0x0E6C
    1206:	80 33       	cpi	r24, 0x30	; 48
    1208:	41 f4       	brne	.+16     	; 0x121a <twi_writeTo+0xa0>
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	07 c0       	rjmp	.+14     	; 0x121c <twi_writeTo+0xa2>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	05 c0       	rjmp	.+10     	; 0x121c <twi_writeTo+0xa2>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	03 c0       	rjmp	.+6      	; 0x121c <twi_writeTo+0xa2>
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	01 c0       	rjmp	.+2      	; 0x121c <twi_writeTo+0xa2>
    121a:	84 e0       	ldi	r24, 0x04	; 4
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <twi_transmit>:
    1220:	61 32       	cpi	r22, 0x21	; 33
    1222:	98 f4       	brcc	.+38     	; 0x124a <twi_transmit+0x2a>
    1224:	20 91 d9 0e 	lds	r18, 0x0ED9
    1228:	24 30       	cpi	r18, 0x04	; 4
    122a:	89 f4       	brne	.+34     	; 0x124e <twi_transmit+0x2e>
    122c:	60 93 8e 0e 	sts	0x0E8E, r22
    1230:	fc 01       	movw	r30, r24
    1232:	80 e9       	ldi	r24, 0x90	; 144
    1234:	9e e0       	ldi	r25, 0x0E	; 14
    1236:	dc 01       	movw	r26, r24
    1238:	2a 2f       	mov	r18, r26
    123a:	28 1b       	sub	r18, r24
    123c:	26 17       	cp	r18, r22
    123e:	18 f4       	brcc	.+6      	; 0x1246 <twi_transmit+0x26>
    1240:	21 91       	ld	r18, Z+
    1242:	2d 93       	st	X+, r18
    1244:	f9 cf       	rjmp	.-14     	; 0x1238 <twi_transmit+0x18>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	08 95       	ret
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	08 95       	ret

00001252 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1252:	85 ed       	ldi	r24, 0xD5	; 213
    1254:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1258:	80 91 bc 00 	lds	r24, 0x00BC
    125c:	84 fd       	sbrc	r24, 4
    125e:	fc cf       	rjmp	.-8      	; 0x1258 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1260:	10 92 d9 0e 	sts	0x0ED9, r1
    1264:	08 95       	ret

00001266 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1266:	85 ec       	ldi	r24, 0xC5	; 197
    1268:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    126c:	10 92 d9 0e 	sts	0x0ED9, r1
    1270:	08 95       	ret

00001272 <__vector_39>:
}

ISR(TWI_vect)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	0b b6       	in	r0, 0x3b	; 59
    127e:	0f 92       	push	r0
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
  switch(TW_STATUS){
    1298:	80 91 b9 00 	lds	r24, 0x00B9
    129c:	88 7f       	andi	r24, 0xF8	; 248
    129e:	80 36       	cpi	r24, 0x60	; 96
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__vector_39+0x32>
    12a2:	9c c0       	rjmp	.+312    	; 0x13dc <__vector_39+0x16a>
    12a4:	68 f5       	brcc	.+90     	; 0x1300 <__vector_39+0x8e>
    12a6:	88 32       	cpi	r24, 0x28	; 40
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_39+0x3a>
    12aa:	5b c0       	rjmp	.+182    	; 0x1362 <__vector_39+0xf0>
    12ac:	90 f4       	brcc	.+36     	; 0x12d2 <__vector_39+0x60>
    12ae:	80 31       	cpi	r24, 0x10	; 16
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__vector_39+0x42>
    12b2:	54 c0       	rjmp	.+168    	; 0x135c <__vector_39+0xea>
    12b4:	38 f4       	brcc	.+14     	; 0x12c4 <__vector_39+0x52>
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <__vector_39+0x4a>
    12ba:	f3 c0       	rjmp	.+486    	; 0x14a2 <__vector_39+0x230>
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__vector_39+0x50>
    12c0:	4d c0       	rjmp	.+154    	; 0x135c <__vector_39+0xea>
    12c2:	f2 c0       	rjmp	.+484    	; 0x14a8 <__vector_39+0x236>
    12c4:	88 31       	cpi	r24, 0x18	; 24
    12c6:	09 f4       	brne	.+2      	; 0x12ca <__vector_39+0x58>
    12c8:	4c c0       	rjmp	.+152    	; 0x1362 <__vector_39+0xf0>
    12ca:	80 32       	cpi	r24, 0x20	; 32
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <__vector_39+0x5e>
    12ce:	5d c0       	rjmp	.+186    	; 0x138a <__vector_39+0x118>
    12d0:	eb c0       	rjmp	.+470    	; 0x14a8 <__vector_39+0x236>
    12d2:	80 34       	cpi	r24, 0x40	; 64
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <__vector_39+0x66>
    12d6:	68 c0       	rjmp	.+208    	; 0x13a8 <__vector_39+0x136>
    12d8:	48 f4       	brcc	.+18     	; 0x12ec <__vector_39+0x7a>
    12da:	80 33       	cpi	r24, 0x30	; 48
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <__vector_39+0x6e>
    12de:	55 c0       	rjmp	.+170    	; 0x138a <__vector_39+0x118>
    12e0:	88 33       	cpi	r24, 0x38	; 56
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <__vector_39+0x74>
    12e4:	e1 c0       	rjmp	.+450    	; 0x14a8 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    12e6:	80 93 6c 0e 	sts	0x0E6C, r24
    12ea:	a7 c0       	rjmp	.+334    	; 0x143a <__vector_39+0x1c8>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    12ec:	80 35       	cpi	r24, 0x50	; 80
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <__vector_39+0x80>
    12f0:	4f c0       	rjmp	.+158    	; 0x1390 <__vector_39+0x11e>
    12f2:	88 35       	cpi	r24, 0x58	; 88
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <__vector_39+0x86>
    12f6:	5d c0       	rjmp	.+186    	; 0x13b2 <__vector_39+0x140>
    12f8:	88 34       	cpi	r24, 0x48	; 72
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__vector_39+0x8c>
    12fc:	d5 c0       	rjmp	.+426    	; 0x14a8 <__vector_39+0x236>
    12fe:	d3 c0       	rjmp	.+422    	; 0x14a6 <__vector_39+0x234>
    1300:	88 39       	cpi	r24, 0x98	; 152
    1302:	09 f4       	brne	.+2      	; 0x1306 <__vector_39+0x94>
    1304:	c4 c0       	rjmp	.+392    	; 0x148e <__vector_39+0x21c>
    1306:	a8 f4       	brcc	.+42     	; 0x1332 <__vector_39+0xc0>
    1308:	88 37       	cpi	r24, 0x78	; 120
    130a:	09 f4       	brne	.+2      	; 0x130e <__vector_39+0x9c>
    130c:	67 c0       	rjmp	.+206    	; 0x13dc <__vector_39+0x16a>
    130e:	38 f4       	brcc	.+14     	; 0x131e <__vector_39+0xac>
    1310:	88 36       	cpi	r24, 0x68	; 104
    1312:	09 f4       	brne	.+2      	; 0x1316 <__vector_39+0xa4>
    1314:	63 c0       	rjmp	.+198    	; 0x13dc <__vector_39+0x16a>
    1316:	80 37       	cpi	r24, 0x70	; 112
    1318:	09 f4       	brne	.+2      	; 0x131c <__vector_39+0xaa>
    131a:	60 c0       	rjmp	.+192    	; 0x13dc <__vector_39+0x16a>
    131c:	c5 c0       	rjmp	.+394    	; 0x14a8 <__vector_39+0x236>
    131e:	88 38       	cpi	r24, 0x88	; 136
    1320:	09 f4       	brne	.+2      	; 0x1324 <__vector_39+0xb2>
    1322:	b5 c0       	rjmp	.+362    	; 0x148e <__vector_39+0x21c>
    1324:	80 39       	cpi	r24, 0x90	; 144
    1326:	09 f4       	brne	.+2      	; 0x132a <__vector_39+0xb8>
    1328:	5f c0       	rjmp	.+190    	; 0x13e8 <__vector_39+0x176>
    132a:	80 38       	cpi	r24, 0x80	; 128
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_39+0xbe>
    132e:	bc c0       	rjmp	.+376    	; 0x14a8 <__vector_39+0x236>
    1330:	5b c0       	rjmp	.+182    	; 0x13e8 <__vector_39+0x176>
    1332:	80 3b       	cpi	r24, 0xB0	; 176
    1334:	09 f4       	brne	.+2      	; 0x1338 <__vector_39+0xc6>
    1336:	83 c0       	rjmp	.+262    	; 0x143e <__vector_39+0x1cc>
    1338:	38 f4       	brcc	.+14     	; 0x1348 <__vector_39+0xd6>
    133a:	80 3a       	cpi	r24, 0xA0	; 160
    133c:	09 f4       	brne	.+2      	; 0x1340 <__vector_39+0xce>
    133e:	66 c0       	rjmp	.+204    	; 0x140c <__vector_39+0x19a>
    1340:	88 3a       	cpi	r24, 0xA8	; 168
    1342:	09 f4       	brne	.+2      	; 0x1346 <__vector_39+0xd4>
    1344:	7c c0       	rjmp	.+248    	; 0x143e <__vector_39+0x1cc>
    1346:	b0 c0       	rjmp	.+352    	; 0x14a8 <__vector_39+0x236>
    1348:	80 3c       	cpi	r24, 0xC0	; 192
    134a:	09 f4       	brne	.+2      	; 0x134e <__vector_39+0xdc>
    134c:	a4 c0       	rjmp	.+328    	; 0x1496 <__vector_39+0x224>
    134e:	88 3c       	cpi	r24, 0xC8	; 200
    1350:	09 f4       	brne	.+2      	; 0x1354 <__vector_39+0xe2>
    1352:	a1 c0       	rjmp	.+322    	; 0x1496 <__vector_39+0x224>
    1354:	88 3b       	cpi	r24, 0xB8	; 184
    1356:	09 f4       	brne	.+2      	; 0x135a <__vector_39+0xe8>
    1358:	87 c0       	rjmp	.+270    	; 0x1468 <__vector_39+0x1f6>
    135a:	a6 c0       	rjmp	.+332    	; 0x14a8 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    135c:	80 91 d8 0e 	lds	r24, 0x0ED8
    1360:	10 c0       	rjmp	.+32     	; 0x1382 <__vector_39+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1362:	90 91 b1 0e 	lds	r25, 0x0EB1
    1366:	80 91 b0 0e 	lds	r24, 0x0EB0
    136a:	98 17       	cp	r25, r24
    136c:	70 f5       	brcc	.+92     	; 0x13ca <__vector_39+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    136e:	e0 91 b1 0e 	lds	r30, 0x0EB1
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	8e 0f       	add	r24, r30
    1376:	80 93 b1 0e 	sts	0x0EB1, r24
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ee 54       	subi	r30, 0x4E	; 78
    137e:	f1 4f       	sbci	r31, 0xF1	; 241
    1380:	80 81       	ld	r24, Z
    1382:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1386:	85 ec       	ldi	r24, 0xC5	; 197
    1388:	83 c0       	rjmp	.+262    	; 0x1490 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    138a:	80 93 6c 0e 	sts	0x0E6C, r24
    138e:	8b c0       	rjmp	.+278    	; 0x14a6 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1390:	e0 91 b1 0e 	lds	r30, 0x0EB1
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8e 0f       	add	r24, r30
    1398:	80 93 b1 0e 	sts	0x0EB1, r24
    139c:	80 91 bb 00 	lds	r24, 0x00BB
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	ee 54       	subi	r30, 0x4E	; 78
    13a4:	f1 4f       	sbci	r31, 0xF1	; 241
    13a6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    13a8:	90 91 b1 0e 	lds	r25, 0x0EB1
    13ac:	80 91 b0 0e 	lds	r24, 0x0EB0
    13b0:	6b c0       	rjmp	.+214    	; 0x1488 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    13b2:	e0 91 b1 0e 	lds	r30, 0x0EB1
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	8e 0f       	add	r24, r30
    13ba:	80 93 b1 0e 	sts	0x0EB1, r24
    13be:	80 91 bb 00 	lds	r24, 0x00BB
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ee 54       	subi	r30, 0x4E	; 78
    13c6:	f1 4f       	sbci	r31, 0xF1	; 241
    13c8:	80 83       	st	Z, r24
	if (twi_sendStop)
    13ca:	80 91 d7 0e 	lds	r24, 0x0ED7
    13ce:	81 11       	cpse	r24, r1
    13d0:	6a c0       	rjmp	.+212    	; 0x14a6 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 d6 0e 	sts	0x0ED6, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    13d8:	84 ea       	ldi	r24, 0xA4	; 164
    13da:	5e c0       	rjmp	.+188    	; 0x1498 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	80 93 d9 0e 	sts	0x0ED9, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    13e2:	10 92 6d 0e 	sts	0x0E6D, r1
    13e6:	cf cf       	rjmp	.-98     	; 0x1386 <__vector_39+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    13e8:	80 91 6d 0e 	lds	r24, 0x0E6D
    13ec:	80 32       	cpi	r24, 0x20	; 32
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <__vector_39+0x180>
    13f0:	4e c0       	rjmp	.+156    	; 0x148e <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    13f2:	e0 91 6d 0e 	lds	r30, 0x0E6D
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	8e 0f       	add	r24, r30
    13fa:	80 93 6d 0e 	sts	0x0E6D, r24
    13fe:	80 91 bb 00 	lds	r24, 0x00BB
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	e2 59       	subi	r30, 0x92	; 146
    1406:	f1 4f       	sbci	r31, 0xF1	; 241
    1408:	80 83       	st	Z, r24
    140a:	bd cf       	rjmp	.-134    	; 0x1386 <__vector_39+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    140c:	80 91 6d 0e 	lds	r24, 0x0E6D
    1410:	80 32       	cpi	r24, 0x20	; 32
    1412:	30 f4       	brcc	.+12     	; 0x1420 <__vector_39+0x1ae>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1414:	e0 91 6d 0e 	lds	r30, 0x0E6D
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	e2 59       	subi	r30, 0x92	; 146
    141c:	f1 4f       	sbci	r31, 0xF1	; 241
    141e:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1420:	18 df       	rcall	.-464    	; 0x1252 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1422:	60 91 6d 0e 	lds	r22, 0x0E6D
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	e0 91 d2 0e 	lds	r30, 0x0ED2
    142c:	f0 91 d3 0e 	lds	r31, 0x0ED3
    1430:	8e e6       	ldi	r24, 0x6E	; 110
    1432:	9e e0       	ldi	r25, 0x0E	; 14
    1434:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1436:	10 92 6d 0e 	sts	0x0E6D, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    143a:	15 df       	rcall	.-470    	; 0x1266 <twi_releaseBus>
      break;
    143c:	35 c0       	rjmp	.+106    	; 0x14a8 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	80 93 d9 0e 	sts	0x0ED9, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1444:	10 92 8f 0e 	sts	0x0E8F, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1448:	10 92 8e 0e 	sts	0x0E8E, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    144c:	e0 91 d4 0e 	lds	r30, 0x0ED4
    1450:	f0 91 d5 0e 	lds	r31, 0x0ED5
    1454:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1456:	80 91 8e 0e 	lds	r24, 0x0E8E
    145a:	81 11       	cpse	r24, r1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 8e 0e 	sts	0x0E8E, r24
        twi_txBuffer[0] = 0x00;
    1464:	10 92 90 0e 	sts	0x0E90, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1468:	e0 91 8f 0e 	lds	r30, 0x0E8F
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8e 0f       	add	r24, r30
    1470:	80 93 8f 0e 	sts	0x0E8F, r24
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	e0 57       	subi	r30, 0x70	; 112
    1478:	f1 4f       	sbci	r31, 0xF1	; 241
    147a:	80 81       	ld	r24, Z
    147c:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1480:	90 91 8f 0e 	lds	r25, 0x0E8F
    1484:	80 91 8e 0e 	lds	r24, 0x0E8E
    1488:	98 17       	cp	r25, r24
    148a:	08 f4       	brcc	.+2      	; 0x148e <__vector_39+0x21c>
    148c:	7c cf       	rjmp	.-264    	; 0x1386 <__vector_39+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    148e:	85 e8       	ldi	r24, 0x85	; 133
    1490:	80 93 bc 00 	sts	0x00BC, r24
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1496:	85 ec       	ldi	r24, 0xC5	; 197
    1498:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    149c:	10 92 d9 0e 	sts	0x0ED9, r1
      break;
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    14a2:	10 92 6c 0e 	sts	0x0E6C, r1
      twi_stop();
    14a6:	d5 de       	rcall	.-598    	; 0x1252 <twi_stop>
      break;
  }
}
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0b be       	out	0x3b, r0	; 59
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    14ce:	80 91 0a 0f 	lds	r24, 0x0F0A
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	20 91 0b 0f 	lds	r18, 0x0F0B
    14d8:	82 1b       	sub	r24, r18
    14da:	91 09       	sbc	r25, r1
    14dc:	08 95       	ret

000014de <_ZN7TwoWire4readEv>:
    14de:	20 91 0b 0f 	lds	r18, 0x0F0B
    14e2:	80 91 0a 0f 	lds	r24, 0x0F0A
    14e6:	28 17       	cp	r18, r24
    14e8:	50 f4       	brcc	.+20     	; 0x14fe <_ZN7TwoWire4readEv+0x20>
    14ea:	e2 2f       	mov	r30, r18
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e4 5f       	subi	r30, 0xF4	; 244
    14f0:	f0 4f       	sbci	r31, 0xF0	; 240
    14f2:	80 81       	ld	r24, Z
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	20 93 0b 0f 	sts	0x0F0B, r18
    14fc:	08 95       	ret
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	08 95       	ret

00001504 <_ZN7TwoWire4peekEv>:
    1504:	e0 91 0b 0f 	lds	r30, 0x0F0B
    1508:	80 91 0a 0f 	lds	r24, 0x0F0A
    150c:	e8 17       	cp	r30, r24
    150e:	30 f4       	brcc	.+12     	; 0x151c <_ZN7TwoWire4peekEv+0x18>
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	e4 5f       	subi	r30, 0xF4	; 244
    1514:	f0 4f       	sbci	r31, 0xF0	; 240
    1516:	80 81       	ld	r24, Z
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	08 95       	ret
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	08 95       	ret

00001522 <_ZN7TwoWire5flushEv>:
    1522:	08 95       	ret

00001524 <_ZN7TwoWire5writeEPKhj>:
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	7c 01       	movw	r14, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8a 01       	movw	r16, r20
    153a:	20 91 e6 0e 	lds	r18, 0x0EE6
    153e:	22 23       	and	r18, r18
    1540:	89 f0       	breq	.+34     	; 0x1564 <_ZN7TwoWire5writeEPKhj+0x40>
    1542:	eb 01       	movw	r28, r22
    1544:	6b 01       	movw	r12, r22
    1546:	c4 0e       	add	r12, r20
    1548:	d5 1e       	adc	r13, r21
    154a:	cc 15       	cp	r28, r12
    154c:	dd 05       	cpc	r29, r13
    154e:	61 f0       	breq	.+24     	; 0x1568 <_ZN7TwoWire5writeEPKhj+0x44>
    1550:	69 91       	ld	r22, Y+
    1552:	d7 01       	movw	r26, r14
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	01 90       	ld	r0, Z+
    155a:	f0 81       	ld	r31, Z
    155c:	e0 2d       	mov	r30, r0
    155e:	c7 01       	movw	r24, r14
    1560:	19 95       	eicall
    1562:	f3 cf       	rjmp	.-26     	; 0x154a <_ZN7TwoWire5writeEPKhj+0x26>
    1564:	64 2f       	mov	r22, r20
    1566:	5c de       	rcall	.-840    	; 0x1220 <twi_transmit>
    1568:	c8 01       	movw	r24, r16
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	08 95       	ret

0000157c <_ZN7TwoWire5writeEh>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	1f 92       	push	r1
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	69 83       	std	Y+1, r22	; 0x01
    1588:	20 91 e6 0e 	lds	r18, 0x0EE6
    158c:	22 23       	and	r18, r18
    158e:	d1 f0       	breq	.+52     	; 0x15c4 <_ZN7TwoWire5writeEh+0x48>
    1590:	20 91 e7 0e 	lds	r18, 0x0EE7
    1594:	20 32       	cpi	r18, 0x20	; 32
    1596:	40 f0       	brcs	.+16     	; 0x15a8 <_ZN7TwoWire5writeEh+0x2c>
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	33 83       	std	Z+3, r19	; 0x03
    15a0:	22 83       	std	Z+2, r18	; 0x02
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <_ZN7TwoWire5writeEh+0x54>
    15a8:	80 91 e8 0e 	lds	r24, 0x0EE8
    15ac:	e8 2f       	mov	r30, r24
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	e7 51       	subi	r30, 0x17	; 23
    15b2:	f1 4f       	sbci	r31, 0xF1	; 241
    15b4:	99 81       	ldd	r25, Y+1	; 0x01
    15b6:	90 83       	st	Z, r25
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 e8 0e 	sts	0x0EE8, r24
    15be:	80 93 e7 0e 	sts	0x0EE7, r24
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <_ZN7TwoWire5writeEh+0x50>
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	2a de       	rcall	.-940    	; 0x1220 <twi_transmit>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <_ZN7TwoWireC1Ev>:
    15d8:	fc 01       	movw	r30, r24
    15da:	13 82       	std	Z+3, r1	; 0x03
    15dc:	12 82       	std	Z+2, r1	; 0x02
    15de:	48 ee       	ldi	r20, 0xE8	; 232
    15e0:	53 e0       	ldi	r21, 0x03	; 3
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	44 83       	std	Z+4, r20	; 0x04
    15e8:	55 83       	std	Z+5, r21	; 0x05
    15ea:	66 83       	std	Z+6, r22	; 0x06
    15ec:	77 83       	std	Z+7, r23	; 0x07
    15ee:	86 e2       	ldi	r24, 0x26	; 38
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
    15f6:	08 95       	ret

000015f8 <_ZN7TwoWire5beginEv>:
    15f8:	10 92 0b 0f 	sts	0x0F0B, r1
    15fc:	10 92 0a 0f 	sts	0x0F0A, r1
    1600:	10 92 e8 0e 	sts	0x0EE8, r1
    1604:	10 92 e7 0e 	sts	0x0EE7, r1
    1608:	56 cd       	rjmp	.-1364   	; 0x10b6 <twi_init>

0000160a <_ZN7TwoWire11requestFromEhhh>:
    160a:	86 2f       	mov	r24, r22
    160c:	41 32       	cpi	r20, 0x21	; 33
    160e:	08 f0       	brcs	.+2      	; 0x1612 <_ZN7TwoWire11requestFromEhhh+0x8>
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	6c e0       	ldi	r22, 0x0C	; 12
    1614:	7f e0       	ldi	r23, 0x0F	; 15
    1616:	6d dd       	rcall	.-1318   	; 0x10f2 <twi_readFrom>
    1618:	10 92 0b 0f 	sts	0x0F0B, r1
    161c:	80 93 0a 0f 	sts	0x0F0A, r24
    1620:	08 95       	ret

00001622 <_ZN7TwoWire11requestFromEhh>:
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	f2 cf       	rjmp	.-28     	; 0x160a <_ZN7TwoWire11requestFromEhhh>

00001626 <_ZN7TwoWire17beginTransmissionEh>:
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 e6 0e 	sts	0x0EE6, r24
    162c:	60 93 09 0f 	sts	0x0F09, r22
    1630:	10 92 e8 0e 	sts	0x0EE8, r1
    1634:	10 92 e7 0e 	sts	0x0EE7, r1
    1638:	08 95       	ret

0000163a <_ZN7TwoWire15endTransmissionEh>:
    163a:	0f 93       	push	r16
    163c:	06 2f       	mov	r16, r22
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	40 91 e7 0e 	lds	r20, 0x0EE7
    1644:	69 ee       	ldi	r22, 0xE9	; 233
    1646:	7e e0       	ldi	r23, 0x0E	; 14
    1648:	80 91 09 0f 	lds	r24, 0x0F09
    164c:	96 dd       	rcall	.-1236   	; 0x117a <twi_writeTo>
    164e:	10 92 e8 0e 	sts	0x0EE8, r1
    1652:	10 92 e7 0e 	sts	0x0EE7, r1
    1656:	10 92 e6 0e 	sts	0x0EE6, r1
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <_ZN7TwoWire15endTransmissionEv>:
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	ec cf       	rjmp	.-40     	; 0x163a <_ZN7TwoWire15endTransmissionEh>

00001662 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1662:	8a ed       	ldi	r24, 0xDA	; 218
    1664:	9e e0       	ldi	r25, 0x0E	; 14
    1666:	b8 cf       	rjmp	.-144    	; 0x15d8 <_ZN7TwoWireC1Ev>

00001668 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    1668:	fc 01       	movw	r30, r24
    166a:	24 85       	ldd	r18, Z+12	; 0x0c
    166c:	35 85       	ldd	r19, Z+13	; 0x0d
    166e:	f9 01       	movw	r30, r18
    1670:	e0 5c       	subi	r30, 0xC0	; 192
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	32 96       	adiw	r30, 0x02	; 2
    167a:	20 81       	ld	r18, Z
    167c:	31 81       	ldd	r19, Z+1	; 0x01
    167e:	82 1b       	sub	r24, r18
    1680:	93 0b       	sbc	r25, r19
    1682:	8f 73       	andi	r24, 0x3F	; 63
    1684:	99 27       	eor	r25, r25
    1686:	08 95       	ret

00001688 <_ZN14HardwareSerial4peekEv>:
    1688:	fc 01       	movw	r30, r24
    168a:	84 85       	ldd	r24, Z+12	; 0x0c
    168c:	95 85       	ldd	r25, Z+13	; 0x0d
    168e:	fc 01       	movw	r30, r24
    1690:	e0 5c       	subi	r30, 0xC0	; 192
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	40 81       	ld	r20, Z
    1696:	51 81       	ldd	r21, Z+1	; 0x01
    1698:	32 96       	adiw	r30, 0x02	; 2
    169a:	20 81       	ld	r18, Z
    169c:	31 81       	ldd	r19, Z+1	; 0x01
    169e:	42 17       	cp	r20, r18
    16a0:	53 07       	cpc	r21, r19
    16a2:	41 f0       	breq	.+16     	; 0x16b4 <_ZN14HardwareSerial4peekEv+0x2c>
    16a4:	20 81       	ld	r18, Z
    16a6:	31 81       	ldd	r19, Z+1	; 0x01
    16a8:	fc 01       	movw	r30, r24
    16aa:	e2 0f       	add	r30, r18
    16ac:	f3 1f       	adc	r31, r19
    16ae:	80 81       	ld	r24, Z
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	08 95       	ret
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	08 95       	ret

000016ba <_ZN14HardwareSerial4readEv>:
    16ba:	fc 01       	movw	r30, r24
    16bc:	84 85       	ldd	r24, Z+12	; 0x0c
    16be:	95 85       	ldd	r25, Z+13	; 0x0d
    16c0:	fc 01       	movw	r30, r24
    16c2:	e0 5c       	subi	r30, 0xC0	; 192
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	40 81       	ld	r20, Z
    16c8:	51 81       	ldd	r21, Z+1	; 0x01
    16ca:	32 96       	adiw	r30, 0x02	; 2
    16cc:	20 81       	ld	r18, Z
    16ce:	31 81       	ldd	r19, Z+1	; 0x01
    16d0:	42 17       	cp	r20, r18
    16d2:	53 07       	cpc	r21, r19
    16d4:	81 f0       	breq	.+32     	; 0x16f6 <_ZN14HardwareSerial4readEv+0x3c>
    16d6:	20 81       	ld	r18, Z
    16d8:	31 81       	ldd	r19, Z+1	; 0x01
    16da:	dc 01       	movw	r26, r24
    16dc:	a2 0f       	add	r26, r18
    16de:	b3 1f       	adc	r27, r19
    16e0:	8c 91       	ld	r24, X
    16e2:	20 81       	ld	r18, Z
    16e4:	31 81       	ldd	r19, Z+1	; 0x01
    16e6:	2f 5f       	subi	r18, 0xFF	; 255
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	2f 73       	andi	r18, 0x3F	; 63
    16ec:	33 27       	eor	r19, r19
    16ee:	31 83       	std	Z+1, r19	; 0x01
    16f0:	20 83       	st	Z, r18
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	08 95       	ret
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	08 95       	ret

000016fc <_ZN14HardwareSerial5flushEv>:
    16fc:	fc 01       	movw	r30, r24
    16fe:	81 a1       	ldd	r24, Z+33	; 0x21
    1700:	88 23       	and	r24, r24
    1702:	29 f0       	breq	.+10     	; 0x170e <_ZN14HardwareSerial5flushEv+0x12>
    1704:	a4 89       	ldd	r26, Z+20	; 0x14
    1706:	b5 89       	ldd	r27, Z+21	; 0x15
    1708:	8c 91       	ld	r24, X
    170a:	86 ff       	sbrs	r24, 6
    170c:	fb cf       	rjmp	.-10     	; 0x1704 <_ZN14HardwareSerial5flushEv+0x8>
    170e:	11 a2       	std	Z+33, r1	; 0x21
    1710:	08 95       	ret

00001712 <_ZN14HardwareSerial5writeEh>:
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	8e 85       	ldd	r24, Y+14	; 0x0e
    171c:	9f 85       	ldd	r25, Y+15	; 0x0f
    171e:	fc 01       	movw	r30, r24
    1720:	e0 5c       	subi	r30, 0xC0	; 192
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	01 90       	ld	r0, Z+
    1726:	f0 81       	ld	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	31 96       	adiw	r30, 0x01	; 1
    172c:	ef 73       	andi	r30, 0x3F	; 63
    172e:	ff 27       	eor	r31, r31
    1730:	1e 2f       	mov	r17, r30
    1732:	7f 2f       	mov	r23, r31
    1734:	dc 01       	movw	r26, r24
    1736:	ae 5b       	subi	r26, 0xBE	; 190
    1738:	bf 4f       	sbci	r27, 0xFF	; 255
    173a:	21 2f       	mov	r18, r17
    173c:	37 2f       	mov	r19, r23
    173e:	4d 91       	ld	r20, X+
    1740:	5c 91       	ld	r21, X
    1742:	11 97       	sbiw	r26, 0x01	; 1
    1744:	e4 17       	cp	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	c1 f3       	breq	.-16     	; 0x173a <_ZN14HardwareSerial5writeEh+0x28>
    174a:	fc 01       	movw	r30, r24
    174c:	e0 5c       	subi	r30, 0xC0	; 192
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	40 81       	ld	r20, Z
    1752:	51 81       	ldd	r21, Z+1	; 0x01
    1754:	fc 01       	movw	r30, r24
    1756:	e4 0f       	add	r30, r20
    1758:	f5 1f       	adc	r31, r21
    175a:	60 83       	st	Z, r22
    175c:	ee 85       	ldd	r30, Y+14	; 0x0e
    175e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1760:	e0 5c       	subi	r30, 0xC0	; 192
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	20 83       	st	Z, r18
    1768:	ee 89       	ldd	r30, Y+22	; 0x16
    176a:	ff 89       	ldd	r31, Y+23	; 0x17
    176c:	40 81       	ld	r20, Z
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	c9 01       	movw	r24, r18
    1774:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1776:	02 c0       	rjmp	.+4      	; 0x177c <_ZN14HardwareSerial5writeEh+0x6a>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <_ZN14HardwareSerial5writeEh+0x66>
    1780:	84 2b       	or	r24, r20
    1782:	80 83       	st	Z, r24
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	89 a3       	std	Y+33, r24	; 0x21
    1788:	ec 89       	ldd	r30, Y+20	; 0x14
    178a:	fd 89       	ldd	r31, Y+21	; 0x15
    178c:	80 81       	ld	r24, Z
    178e:	80 64       	ori	r24, 0x40	; 64
    1790:	80 83       	st	Z, r24
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	08 95       	ret

0000179e <__vector_25>:
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0b b6       	in	r0, 0x3b	; 59
    17aa:	0f 92       	push	r0
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	80 91 c0 00 	lds	r24, 0x00C0
    17c2:	82 fd       	sbrc	r24, 2
    17c4:	1a c0       	rjmp	.+52     	; 0x17fa <__vector_25+0x5c>
    17c6:	40 91 c6 00 	lds	r20, 0x00C6
    17ca:	80 91 d0 11 	lds	r24, 0x11D0
    17ce:	90 91 d1 11 	lds	r25, 0x11D1
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	8f 73       	andi	r24, 0x3F	; 63
    17d6:	99 27       	eor	r25, r25
    17d8:	20 91 d2 11 	lds	r18, 0x11D2
    17dc:	30 91 d3 11 	lds	r19, 0x11D3
    17e0:	82 17       	cp	r24, r18
    17e2:	93 07       	cpc	r25, r19
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__vector_25+0x60>
    17e6:	e0 ed       	ldi	r30, 0xD0	; 208
    17e8:	f1 e1       	ldi	r31, 0x11	; 17
    17ea:	a0 81       	ld	r26, Z
    17ec:	b1 81       	ldd	r27, Z+1	; 0x01
    17ee:	a0 57       	subi	r26, 0x70	; 112
    17f0:	be 4e       	sbci	r27, 0xEE	; 238
    17f2:	4c 93       	st	X, r20
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__vector_25+0x60>
    17fa:	80 91 c6 00 	lds	r24, 0x00C6
    17fe:	ff 91       	pop	r31
    1800:	ef 91       	pop	r30
    1802:	bf 91       	pop	r27
    1804:	af 91       	pop	r26
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0b be       	out	0x3b, r0	; 59
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_36>:
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	0b b6       	in	r0, 0x3b	; 59
    182a:	0f 92       	push	r0
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
    183e:	80 91 c8 00 	lds	r24, 0x00C8
    1842:	82 fd       	sbrc	r24, 2
    1844:	1a c0       	rjmp	.+52     	; 0x187a <__vector_36+0x5c>
    1846:	40 91 ce 00 	lds	r20, 0x00CE
    184a:	80 91 48 11 	lds	r24, 0x1148
    184e:	90 91 49 11 	lds	r25, 0x1149
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	8f 73       	andi	r24, 0x3F	; 63
    1856:	99 27       	eor	r25, r25
    1858:	20 91 4a 11 	lds	r18, 0x114A
    185c:	30 91 4b 11 	lds	r19, 0x114B
    1860:	82 17       	cp	r24, r18
    1862:	93 07       	cpc	r25, r19
    1864:	61 f0       	breq	.+24     	; 0x187e <__vector_36+0x60>
    1866:	e8 e4       	ldi	r30, 0x48	; 72
    1868:	f1 e1       	ldi	r31, 0x11	; 17
    186a:	a0 81       	ld	r26, Z
    186c:	b1 81       	ldd	r27, Z+1	; 0x01
    186e:	a8 5f       	subi	r26, 0xF8	; 248
    1870:	be 4e       	sbci	r27, 0xEE	; 238
    1872:	4c 93       	st	X, r20
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	02 c0       	rjmp	.+4      	; 0x187e <__vector_36+0x60>
    187a:	80 91 ce 00 	lds	r24, 0x00CE
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0b be       	out	0x3b, r0	; 59
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <__vector_51>:
    189e:	1f 92       	push	r1
    18a0:	0f 92       	push	r0
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	0b b6       	in	r0, 0x3b	; 59
    18aa:	0f 92       	push	r0
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	80 91 d0 00 	lds	r24, 0x00D0
    18c2:	82 fd       	sbrc	r24, 2
    18c4:	1a c0       	rjmp	.+52     	; 0x18fa <__vector_51+0x5c>
    18c6:	40 91 d6 00 	lds	r20, 0x00D6
    18ca:	80 91 c0 10 	lds	r24, 0x10C0
    18ce:	90 91 c1 10 	lds	r25, 0x10C1
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	8f 73       	andi	r24, 0x3F	; 63
    18d6:	99 27       	eor	r25, r25
    18d8:	20 91 c2 10 	lds	r18, 0x10C2
    18dc:	30 91 c3 10 	lds	r19, 0x10C3
    18e0:	82 17       	cp	r24, r18
    18e2:	93 07       	cpc	r25, r19
    18e4:	61 f0       	breq	.+24     	; 0x18fe <__vector_51+0x60>
    18e6:	e0 ec       	ldi	r30, 0xC0	; 192
    18e8:	f0 e1       	ldi	r31, 0x10	; 16
    18ea:	a0 81       	ld	r26, Z
    18ec:	b1 81       	ldd	r27, Z+1	; 0x01
    18ee:	a0 58       	subi	r26, 0x80	; 128
    18f0:	bf 4e       	sbci	r27, 0xEF	; 239
    18f2:	4c 93       	st	X, r20
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <__vector_51+0x60>
    18fa:	80 91 d6 00 	lds	r24, 0x00D6
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0b be       	out	0x3b, r0	; 59
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_54>:
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	0b b6       	in	r0, 0x3b	; 59
    192a:	0f 92       	push	r0
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	80 91 30 01 	lds	r24, 0x0130
    1942:	82 fd       	sbrc	r24, 2
    1944:	1a c0       	rjmp	.+52     	; 0x197a <__vector_54+0x5c>
    1946:	40 91 36 01 	lds	r20, 0x0136
    194a:	80 91 38 10 	lds	r24, 0x1038
    194e:	90 91 39 10 	lds	r25, 0x1039
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	8f 73       	andi	r24, 0x3F	; 63
    1956:	99 27       	eor	r25, r25
    1958:	20 91 3a 10 	lds	r18, 0x103A
    195c:	30 91 3b 10 	lds	r19, 0x103B
    1960:	82 17       	cp	r24, r18
    1962:	93 07       	cpc	r25, r19
    1964:	61 f0       	breq	.+24     	; 0x197e <__vector_54+0x60>
    1966:	e8 e3       	ldi	r30, 0x38	; 56
    1968:	f0 e1       	ldi	r31, 0x10	; 16
    196a:	a0 81       	ld	r26, Z
    196c:	b1 81       	ldd	r27, Z+1	; 0x01
    196e:	a8 50       	subi	r26, 0x08	; 8
    1970:	b0 4f       	sbci	r27, 0xF0	; 240
    1972:	4c 93       	st	X, r20
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	02 c0       	rjmp	.+4      	; 0x197e <__vector_54+0x60>
    197a:	80 91 36 01 	lds	r24, 0x0136
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0b be       	out	0x3b, r0	; 59
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_26>:
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
    19bc:	20 91 8c 11 	lds	r18, 0x118C
    19c0:	30 91 8d 11 	lds	r19, 0x118D
    19c4:	80 91 8e 11 	lds	r24, 0x118E
    19c8:	90 91 8f 11 	lds	r25, 0x118F
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	31 f4       	brne	.+12     	; 0x19de <__vector_26+0x40>
    19d2:	e1 ec       	ldi	r30, 0xC1	; 193
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 7d       	andi	r24, 0xDF	; 223
    19da:	80 83       	st	Z, r24
    19dc:	10 c0       	rjmp	.+32     	; 0x19fe <__vector_26+0x60>
    19de:	ee e8       	ldi	r30, 0x8E	; 142
    19e0:	f1 e1       	ldi	r31, 0x11	; 17
    19e2:	a0 81       	ld	r26, Z
    19e4:	b1 81       	ldd	r27, Z+1	; 0x01
    19e6:	a4 5b       	subi	r26, 0xB4	; 180
    19e8:	be 4e       	sbci	r27, 0xEE	; 238
    19ea:	2c 91       	ld	r18, X
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	8f 73       	andi	r24, 0x3F	; 63
    19f4:	99 27       	eor	r25, r25
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	20 93 c6 00 	sts	0x00C6, r18
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	0f 90       	pop	r0
    1a10:	0b be       	out	0x3b, r0	; 59
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_37>:
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	0b b6       	in	r0, 0x3b	; 59
    1a28:	0f 92       	push	r0
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	8f 93       	push	r24
    1a30:	9f 93       	push	r25
    1a32:	af 93       	push	r26
    1a34:	bf 93       	push	r27
    1a36:	ef 93       	push	r30
    1a38:	ff 93       	push	r31
    1a3a:	20 91 04 11 	lds	r18, 0x1104
    1a3e:	30 91 05 11 	lds	r19, 0x1105
    1a42:	80 91 06 11 	lds	r24, 0x1106
    1a46:	90 91 07 11 	lds	r25, 0x1107
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	31 f4       	brne	.+12     	; 0x1a5c <__vector_37+0x40>
    1a50:	e9 ec       	ldi	r30, 0xC9	; 201
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 7d       	andi	r24, 0xDF	; 223
    1a58:	80 83       	st	Z, r24
    1a5a:	10 c0       	rjmp	.+32     	; 0x1a7c <__vector_37+0x60>
    1a5c:	e6 e0       	ldi	r30, 0x06	; 6
    1a5e:	f1 e1       	ldi	r31, 0x11	; 17
    1a60:	a0 81       	ld	r26, Z
    1a62:	b1 81       	ldd	r27, Z+1	; 0x01
    1a64:	ac 53       	subi	r26, 0x3C	; 60
    1a66:	bf 4e       	sbci	r27, 0xEF	; 239
    1a68:	2c 91       	ld	r18, X
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	8f 73       	andi	r24, 0x3F	; 63
    1a72:	99 27       	eor	r25, r25
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	20 93 ce 00 	sts	0x00CE, r18
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0b be       	out	0x3b, r0	; 59
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_52>:
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	0b b6       	in	r0, 0x3b	; 59
    1aa6:	0f 92       	push	r0
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	20 91 7c 10 	lds	r18, 0x107C
    1abc:	30 91 7d 10 	lds	r19, 0x107D
    1ac0:	80 91 7e 10 	lds	r24, 0x107E
    1ac4:	90 91 7f 10 	lds	r25, 0x107F
    1ac8:	28 17       	cp	r18, r24
    1aca:	39 07       	cpc	r19, r25
    1acc:	31 f4       	brne	.+12     	; 0x1ada <__vector_52+0x40>
    1ace:	e1 ed       	ldi	r30, 0xD1	; 209
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7d       	andi	r24, 0xDF	; 223
    1ad6:	80 83       	st	Z, r24
    1ad8:	10 c0       	rjmp	.+32     	; 0x1afa <__vector_52+0x60>
    1ada:	ee e7       	ldi	r30, 0x7E	; 126
    1adc:	f0 e1       	ldi	r31, 0x10	; 16
    1ade:	a0 81       	ld	r26, Z
    1ae0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ae2:	a4 5c       	subi	r26, 0xC4	; 196
    1ae4:	bf 4e       	sbci	r27, 0xEF	; 239
    1ae6:	2c 91       	ld	r18, X
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	8f 73       	andi	r24, 0x3F	; 63
    1af0:	99 27       	eor	r25, r25
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
    1af6:	20 93 d6 00 	sts	0x00D6, r18
    1afa:	ff 91       	pop	r31
    1afc:	ef 91       	pop	r30
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	9f 91       	pop	r25
    1b04:	8f 91       	pop	r24
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0b be       	out	0x3b, r0	; 59
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_55>:
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	0b b6       	in	r0, 0x3b	; 59
    1b24:	0f 92       	push	r0
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	20 91 f4 0f 	lds	r18, 0x0FF4
    1b3a:	30 91 f5 0f 	lds	r19, 0x0FF5
    1b3e:	80 91 f6 0f 	lds	r24, 0x0FF6
    1b42:	90 91 f7 0f 	lds	r25, 0x0FF7
    1b46:	28 17       	cp	r18, r24
    1b48:	39 07       	cpc	r19, r25
    1b4a:	31 f4       	brne	.+12     	; 0x1b58 <__vector_55+0x40>
    1b4c:	e1 e3       	ldi	r30, 0x31	; 49
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	80 81       	ld	r24, Z
    1b52:	8f 7d       	andi	r24, 0xDF	; 223
    1b54:	80 83       	st	Z, r24
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <__vector_55+0x60>
    1b58:	e6 ef       	ldi	r30, 0xF6	; 246
    1b5a:	ff e0       	ldi	r31, 0x0F	; 15
    1b5c:	a0 81       	ld	r26, Z
    1b5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b60:	ac 54       	subi	r26, 0x4C	; 76
    1b62:	b0 4f       	sbci	r27, 0xF0	; 240
    1b64:	2c 91       	ld	r18, X
    1b66:	80 81       	ld	r24, Z
    1b68:	91 81       	ldd	r25, Z+1	; 0x01
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	8f 73       	andi	r24, 0x3F	; 63
    1b6e:	99 27       	eor	r25, r25
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	20 93 36 01 	sts	0x0136, r18
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	13 82       	std	Z+3, r1	; 0x03
    1bb6:	12 82       	std	Z+2, r1	; 0x02
    1bb8:	88 ee       	ldi	r24, 0xE8	; 232
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	84 83       	std	Z+4, r24	; 0x04
    1bc2:	95 83       	std	Z+5, r25	; 0x05
    1bc4:	a6 83       	std	Z+6, r26	; 0x06
    1bc6:	b7 83       	std	Z+7, r27	; 0x07
    1bc8:	86 e3       	ldi	r24, 0x36	; 54
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	75 87       	std	Z+13, r23	; 0x0d
    1bd2:	64 87       	std	Z+12, r22	; 0x0c
    1bd4:	57 87       	std	Z+15, r21	; 0x0f
    1bd6:	46 87       	std	Z+14, r20	; 0x0e
    1bd8:	31 8b       	std	Z+17, r19	; 0x11
    1bda:	20 8b       	std	Z+16, r18	; 0x10
    1bdc:	13 8b       	std	Z+19, r17	; 0x13
    1bde:	02 8b       	std	Z+18, r16	; 0x12
    1be0:	f5 8a       	std	Z+21, r15	; 0x15
    1be2:	e4 8a       	std	Z+20, r14	; 0x14
    1be4:	d7 8a       	std	Z+23, r13	; 0x17
    1be6:	c6 8a       	std	Z+22, r12	; 0x16
    1be8:	b1 8e       	std	Z+25, r11	; 0x19
    1bea:	a0 8e       	std	Z+24, r10	; 0x18
    1bec:	93 8e       	std	Z+27, r9	; 0x1b
    1bee:	82 8e       	std	Z+26, r8	; 0x1a
    1bf0:	88 89       	ldd	r24, Y+16	; 0x10
    1bf2:	84 8f       	std	Z+28, r24	; 0x1c
    1bf4:	89 89       	ldd	r24, Y+17	; 0x11
    1bf6:	85 8f       	std	Z+29, r24	; 0x1d
    1bf8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfa:	86 8f       	std	Z+30, r24	; 0x1e
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	87 8f       	std	Z+31, r24	; 0x1f
    1c00:	8c 89       	ldd	r24, Y+20	; 0x14
    1c02:	80 a3       	std	Z+32, r24	; 0x20
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	8f 90       	pop	r8
    1c1c:	08 95       	ret

00001c1e <_ZN14HardwareSerial5beginEm>:
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	6a 01       	movw	r12, r20
    1c2e:	7b 01       	movw	r14, r22
    1c30:	41 15       	cp	r20, r1
    1c32:	81 ee       	ldi	r24, 0xE1	; 225
    1c34:	58 07       	cpc	r21, r24
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	01 f1       	breq	.+64     	; 0x1c7c <_ZN14HardwareSerial5beginEm+0x5e>
    1c3c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c3e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	08 a0       	ldd	r0, Y+32	; 0x20
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <_ZN14HardwareSerial5beginEm+0x2e>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <_ZN14HardwareSerial5beginEm+0x2a>
    1c50:	80 83       	st	Z, r24
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	79 e0       	ldi	r23, 0x09	; 9
    1c56:	8d e3       	ldi	r24, 0x3D	; 61
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a7 01       	movw	r20, r14
    1c5c:	96 01       	movw	r18, r12
    1c5e:	a4 d3       	rcall	.+1864   	; 0x23a8 <__udivmodsi4>
    1c60:	ba 01       	movw	r22, r20
    1c62:	a9 01       	movw	r20, r18
    1c64:	41 50       	subi	r20, 0x01	; 1
    1c66:	51 09       	sbc	r21, r1
    1c68:	61 09       	sbc	r22, r1
    1c6a:	71 09       	sbc	r23, r1
    1c6c:	76 95       	lsr	r23
    1c6e:	67 95       	ror	r22
    1c70:	57 95       	ror	r21
    1c72:	47 95       	ror	r20
    1c74:	41 15       	cp	r20, r1
    1c76:	80 e1       	ldi	r24, 0x10	; 16
    1c78:	58 07       	cpc	r21, r24
    1c7a:	a0 f0       	brcs	.+40     	; 0x1ca4 <_ZN14HardwareSerial5beginEm+0x86>
    1c7c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c7e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c80:	10 82       	st	Z, r1
    1c82:	60 e8       	ldi	r22, 0x80	; 128
    1c84:	74 e8       	ldi	r23, 0x84	; 132
    1c86:	8e e1       	ldi	r24, 0x1E	; 30
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a7 01       	movw	r20, r14
    1c8c:	96 01       	movw	r18, r12
    1c8e:	8c d3       	rcall	.+1816   	; 0x23a8 <__udivmodsi4>
    1c90:	ba 01       	movw	r22, r20
    1c92:	a9 01       	movw	r20, r18
    1c94:	41 50       	subi	r20, 0x01	; 1
    1c96:	51 09       	sbc	r21, r1
    1c98:	61 09       	sbc	r22, r1
    1c9a:	71 09       	sbc	r23, r1
    1c9c:	76 95       	lsr	r23
    1c9e:	67 95       	ror	r22
    1ca0:	57 95       	ror	r21
    1ca2:	47 95       	ror	r20
    1ca4:	e8 89       	ldd	r30, Y+16	; 0x10
    1ca6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ca8:	50 83       	st	Z, r21
    1caa:	ea 89       	ldd	r30, Y+18	; 0x12
    1cac:	fb 89       	ldd	r31, Y+19	; 0x13
    1cae:	40 83       	st	Z, r20
    1cb0:	19 a2       	std	Y+33, r1	; 0x21
    1cb2:	ee 89       	ldd	r30, Y+22	; 0x16
    1cb4:	ff 89       	ldd	r31, Y+23	; 0x17
    1cb6:	40 81       	ld	r20, Z
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <_ZN14HardwareSerial5beginEm+0xa8>
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <_ZN14HardwareSerial5beginEm+0xa4>
    1cca:	24 2b       	or	r18, r20
    1ccc:	20 83       	st	Z, r18
    1cce:	ee 89       	ldd	r30, Y+22	; 0x16
    1cd0:	ff 89       	ldd	r31, Y+23	; 0x17
    1cd2:	40 81       	ld	r20, Z
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <_ZN14HardwareSerial5beginEm+0xc0>
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <_ZN14HardwareSerial5beginEm+0xbc>
    1ce2:	24 2b       	or	r18, r20
    1ce4:	20 83       	st	Z, r18
    1ce6:	ee 89       	ldd	r30, Y+22	; 0x16
    1ce8:	ff 89       	ldd	r31, Y+23	; 0x17
    1cea:	40 81       	ld	r20, Z
    1cec:	9c 01       	movw	r18, r24
    1cee:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <_ZN14HardwareSerial5beginEm+0xd8>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <_ZN14HardwareSerial5beginEm+0xd4>
    1cfa:	24 2b       	or	r18, r20
    1cfc:	20 83       	st	Z, r18
    1cfe:	ee 89       	ldd	r30, Y+22	; 0x16
    1d00:	ff 89       	ldd	r31, Y+23	; 0x17
    1d02:	20 81       	ld	r18, Z
    1d04:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <_ZN14HardwareSerial5beginEm+0xee>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <_ZN14HardwareSerial5beginEm+0xea>
    1d10:	80 95       	com	r24
    1d12:	82 23       	and	r24, r18
    1d14:	80 83       	st	Z, r24
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	08 95       	ret

00001d24 <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1d24:	5f 92       	push	r5
    1d26:	6f 92       	push	r6
    1d28:	7f 92       	push	r7
    1d2a:	8f 92       	push	r8
    1d2c:	9f 92       	push	r9
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1d42:	55 24       	eor	r5, r5
    1d44:	53 94       	inc	r5
    1d46:	5f 92       	push	r5
    1d48:	0f 2e       	mov	r0, r31
    1d4a:	f5 e0       	ldi	r31, 0x05	; 5
    1d4c:	6f 2e       	mov	r6, r31
    1d4e:	f0 2d       	mov	r31, r0
    1d50:	6f 92       	push	r6
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f7 e0       	ldi	r31, 0x07	; 7
    1d56:	7f 2e       	mov	r7, r31
    1d58:	f0 2d       	mov	r31, r0
    1d5a:	7f 92       	push	r7
    1d5c:	d3 e0       	ldi	r29, 0x03	; 3
    1d5e:	df 93       	push	r29
    1d60:	c4 e0       	ldi	r28, 0x04	; 4
    1d62:	cf 93       	push	r28
    1d64:	0f 2e       	mov	r0, r31
    1d66:	f6 ec       	ldi	r31, 0xC6	; 198
    1d68:	8f 2e       	mov	r8, r31
    1d6a:	91 2c       	mov	r9, r1
    1d6c:	f0 2d       	mov	r31, r0
    1d6e:	0f 2e       	mov	r0, r31
    1d70:	f2 ec       	ldi	r31, 0xC2	; 194
    1d72:	af 2e       	mov	r10, r31
    1d74:	b1 2c       	mov	r11, r1
    1d76:	f0 2d       	mov	r31, r0
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	f1 ec       	ldi	r31, 0xC1	; 193
    1d7c:	cf 2e       	mov	r12, r31
    1d7e:	d1 2c       	mov	r13, r1
    1d80:	f0 2d       	mov	r31, r0
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f0 ec       	ldi	r31, 0xC0	; 192
    1d86:	ef 2e       	mov	r14, r31
    1d88:	f1 2c       	mov	r15, r1
    1d8a:	f0 2d       	mov	r31, r0
    1d8c:	04 ec       	ldi	r16, 0xC4	; 196
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	25 ec       	ldi	r18, 0xC5	; 197
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4c e4       	ldi	r20, 0x4C	; 76
    1d96:	51 e1       	ldi	r21, 0x11	; 17
    1d98:	60 e9       	ldi	r22, 0x90	; 144
    1d9a:	71 e1       	ldi	r23, 0x11	; 17
    1d9c:	82 e9       	ldi	r24, 0x92	; 146
    1d9e:	9f e0       	ldi	r25, 0x0F	; 15
    1da0:	fa de       	rcall	.-524    	; 0x1b96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    1da2:	5f 92       	push	r5
    1da4:	6f 92       	push	r6
    1da6:	7f 92       	push	r7
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	0f 2e       	mov	r0, r31
    1dae:	fe ec       	ldi	r31, 0xCE	; 206
    1db0:	8f 2e       	mov	r8, r31
    1db2:	91 2c       	mov	r9, r1
    1db4:	f0 2d       	mov	r31, r0
    1db6:	0f 2e       	mov	r0, r31
    1db8:	fa ec       	ldi	r31, 0xCA	; 202
    1dba:	af 2e       	mov	r10, r31
    1dbc:	b1 2c       	mov	r11, r1
    1dbe:	f0 2d       	mov	r31, r0
    1dc0:	0f 2e       	mov	r0, r31
    1dc2:	f9 ec       	ldi	r31, 0xC9	; 201
    1dc4:	cf 2e       	mov	r12, r31
    1dc6:	d1 2c       	mov	r13, r1
    1dc8:	f0 2d       	mov	r31, r0
    1dca:	0f 2e       	mov	r0, r31
    1dcc:	f8 ec       	ldi	r31, 0xC8	; 200
    1dce:	ef 2e       	mov	r14, r31
    1dd0:	f1 2c       	mov	r15, r1
    1dd2:	f0 2d       	mov	r31, r0
    1dd4:	0c ec       	ldi	r16, 0xCC	; 204
    1dd6:	10 e0       	ldi	r17, 0x00	; 0
    1dd8:	2d ec       	ldi	r18, 0xCD	; 205
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	44 ec       	ldi	r20, 0xC4	; 196
    1dde:	50 e1       	ldi	r21, 0x10	; 16
    1de0:	68 e0       	ldi	r22, 0x08	; 8
    1de2:	71 e1       	ldi	r23, 0x11	; 17
    1de4:	80 e7       	ldi	r24, 0x70	; 112
    1de6:	9f e0       	ldi	r25, 0x0F	; 15
    1de8:	d6 de       	rcall	.-596    	; 0x1b96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    1dea:	5f 92       	push	r5
    1dec:	6f 92       	push	r6
    1dee:	7f 92       	push	r7
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	0f 2e       	mov	r0, r31
    1df6:	f6 ed       	ldi	r31, 0xD6	; 214
    1df8:	8f 2e       	mov	r8, r31
    1dfa:	91 2c       	mov	r9, r1
    1dfc:	f0 2d       	mov	r31, r0
    1dfe:	0f 2e       	mov	r0, r31
    1e00:	f2 ed       	ldi	r31, 0xD2	; 210
    1e02:	af 2e       	mov	r10, r31
    1e04:	b1 2c       	mov	r11, r1
    1e06:	f0 2d       	mov	r31, r0
    1e08:	0f 2e       	mov	r0, r31
    1e0a:	f1 ed       	ldi	r31, 0xD1	; 209
    1e0c:	cf 2e       	mov	r12, r31
    1e0e:	d1 2c       	mov	r13, r1
    1e10:	f0 2d       	mov	r31, r0
    1e12:	0f 2e       	mov	r0, r31
    1e14:	f0 ed       	ldi	r31, 0xD0	; 208
    1e16:	ef 2e       	mov	r14, r31
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	f0 2d       	mov	r31, r0
    1e1c:	04 ed       	ldi	r16, 0xD4	; 212
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	25 ed       	ldi	r18, 0xD5	; 213
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4c e3       	ldi	r20, 0x3C	; 60
    1e26:	50 e1       	ldi	r21, 0x10	; 16
    1e28:	60 e8       	ldi	r22, 0x80	; 128
    1e2a:	70 e1       	ldi	r23, 0x10	; 16
    1e2c:	8e e4       	ldi	r24, 0x4E	; 78
    1e2e:	9f e0       	ldi	r25, 0x0F	; 15
    1e30:	b2 de       	rcall	.-668    	; 0x1b96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f6 e3       	ldi	r31, 0x36	; 54
    1e40:	8f 2e       	mov	r8, r31
    1e42:	99 24       	eor	r9, r9
    1e44:	93 94       	inc	r9
    1e46:	f0 2d       	mov	r31, r0
    1e48:	0f 2e       	mov	r0, r31
    1e4a:	f2 e3       	ldi	r31, 0x32	; 50
    1e4c:	af 2e       	mov	r10, r31
    1e4e:	bb 24       	eor	r11, r11
    1e50:	b3 94       	inc	r11
    1e52:	f0 2d       	mov	r31, r0
    1e54:	0f 2e       	mov	r0, r31
    1e56:	f1 e3       	ldi	r31, 0x31	; 49
    1e58:	cf 2e       	mov	r12, r31
    1e5a:	dd 24       	eor	r13, r13
    1e5c:	d3 94       	inc	r13
    1e5e:	f0 2d       	mov	r31, r0
    1e60:	0f 2e       	mov	r0, r31
    1e62:	f0 e3       	ldi	r31, 0x30	; 48
    1e64:	ef 2e       	mov	r14, r31
    1e66:	ff 24       	eor	r15, r15
    1e68:	f3 94       	inc	r15
    1e6a:	f0 2d       	mov	r31, r0
    1e6c:	04 e3       	ldi	r16, 0x34	; 52
    1e6e:	11 e0       	ldi	r17, 0x01	; 1
    1e70:	25 e3       	ldi	r18, 0x35	; 53
    1e72:	31 e0       	ldi	r19, 0x01	; 1
    1e74:	44 eb       	ldi	r20, 0xB4	; 180
    1e76:	5f e0       	ldi	r21, 0x0F	; 15
    1e78:	68 ef       	ldi	r22, 0xF8	; 248
    1e7a:	7f e0       	ldi	r23, 0x0F	; 15
    1e7c:	8c e2       	ldi	r24, 0x2C	; 44
    1e7e:	9f e0       	ldi	r25, 0x0F	; 15
    1e80:	8a de       	rcall	.-748    	; 0x1b96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    1e82:	8d b7       	in	r24, 0x3d	; 61
    1e84:	9e b7       	in	r25, 0x3e	; 62
    1e86:	44 96       	adiw	r24, 0x14	; 20
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	9e bf       	out	0x3e, r25	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	8d bf       	out	0x3d, r24	; 61
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
    1eaa:	7f 90       	pop	r7
    1eac:	6f 90       	pop	r6
    1eae:	5f 90       	pop	r5
    1eb0:	08 95       	ret

00001eb2 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	6c 01       	movw	r12, r24
    1ec4:	41 15       	cp	r20, r1
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	b1 f0       	breq	.+44     	; 0x1ef6 <_ZN5Print5writeEPKhj+0x44>
    1eca:	06 2f       	mov	r16, r22
    1ecc:	17 2f       	mov	r17, r23
    1ece:	ea 01       	movw	r28, r20
    1ed0:	e1 2c       	mov	r14, r1
    1ed2:	f1 2c       	mov	r15, r1
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	6d 91       	ld	r22, X+
    1ed8:	8d 01       	movw	r16, r26
    1eda:	d6 01       	movw	r26, r12
    1edc:	ed 91       	ld	r30, X+
    1ede:	fc 91       	ld	r31, X
    1ee0:	01 90       	ld	r0, Z+
    1ee2:	f0 81       	ld	r31, Z
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	c6 01       	movw	r24, r12
    1ee8:	19 95       	eicall
    1eea:	e8 0e       	add	r14, r24
    1eec:	f9 1e       	adc	r15, r25
    1eee:	21 97       	sbiw	r28, 0x01	; 1
    1ef0:	20 97       	sbiw	r28, 0x00	; 0
    1ef2:	81 f7       	brne	.-32     	; 0x1ed4 <_ZN5Print5writeEPKhj+0x22>
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <_ZN5Print5writeEPKhj+0x48>
    1ef6:	e1 2c       	mov	r14, r1
    1ef8:	f1 2c       	mov	r15, r1
    1efa:	c7 01       	movw	r24, r14
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	08 95       	ret

00001f0e <_ZN5Print5printEPKc>:
    1f0e:	61 15       	cp	r22, r1
    1f10:	71 05       	cpc	r23, r1
    1f12:	81 f0       	breq	.+32     	; 0x1f34 <_ZN5Print5printEPKc+0x26>
    1f14:	fb 01       	movw	r30, r22
    1f16:	01 90       	ld	r0, Z+
    1f18:	00 20       	and	r0, r0
    1f1a:	e9 f7       	brne	.-6      	; 0x1f16 <_ZN5Print5printEPKc+0x8>
    1f1c:	31 97       	sbiw	r30, 0x01	; 1
    1f1e:	af 01       	movw	r20, r30
    1f20:	46 1b       	sub	r20, r22
    1f22:	57 0b       	sbc	r21, r23
    1f24:	dc 01       	movw	r26, r24
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	02 80       	ldd	r0, Z+2	; 0x02
    1f2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	19 95       	eicall
    1f32:	08 95       	ret
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	08 95       	ret

00001f3a <_ZN5Print5printEc>:
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	01 90       	ld	r0, Z+
    1f42:	f0 81       	ld	r31, Z
    1f44:	e0 2d       	mov	r30, r0
    1f46:	19 95       	eicall
    1f48:	08 95       	ret

00001f4a <_ZN5Print7printlnEv>:
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	6d e0       	ldi	r22, 0x0D	; 13
    1f56:	f1 df       	rcall	.-30     	; 0x1f3a <_ZN5Print5printEc>
    1f58:	8c 01       	movw	r16, r24
    1f5a:	6a e0       	ldi	r22, 0x0A	; 10
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	ed df       	rcall	.-38     	; 0x1f3a <_ZN5Print5printEc>
    1f60:	80 0f       	add	r24, r16
    1f62:	91 1f       	adc	r25, r17
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <_ZN5Print7printlnEPKc>:
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	ec 01       	movw	r28, r24
    1f78:	ca df       	rcall	.-108    	; 0x1f0e <_ZN5Print5printEPKc>
    1f7a:	8c 01       	movw	r16, r24
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	e5 df       	rcall	.-54     	; 0x1f4a <_ZN5Print7printlnEv>
    1f80:	80 0f       	add	r24, r16
    1f82:	91 1f       	adc	r25, r17
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	a1 97       	sbiw	r28, 0x21	; 33
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	6c 01       	movw	r12, r24
    1fbc:	74 2e       	mov	r7, r20
    1fbe:	35 2f       	mov	r19, r21
    1fc0:	86 2f       	mov	r24, r22
    1fc2:	97 2f       	mov	r25, r23
    1fc4:	62 2e       	mov	r6, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1fc6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1fc8:	21 e0       	ldi	r18, 0x01	; 1
    1fca:	26 15       	cp	r18, r6
    1fcc:	20 f0       	brcs	.+8      	; 0x1fd6 <_ZN5Print11printNumberEmh+0x48>
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	fa e0       	ldi	r31, 0x0A	; 10
    1fd2:	6f 2e       	mov	r6, r31
    1fd4:	f0 2d       	mov	r31, r0
    1fd6:	7e 01       	movw	r14, r28
    1fd8:	a1 e2       	ldi	r26, 0x21	; 33
    1fda:	ea 0e       	add	r14, r26
    1fdc:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
    1fde:	86 2c       	mov	r8, r6
    1fe0:	91 2c       	mov	r9, r1
    1fe2:	a1 2c       	mov	r10, r1
    1fe4:	b1 2c       	mov	r11, r1
    1fe6:	67 2d       	mov	r22, r7
    1fe8:	73 2f       	mov	r23, r19
    1fea:	a5 01       	movw	r20, r10
    1fec:	94 01       	movw	r18, r8
    1fee:	dc d1       	rcall	.+952    	; 0x23a8 <__udivmodsi4>
    1ff0:	e2 2f       	mov	r30, r18
    1ff2:	73 2f       	mov	r23, r19
    1ff4:	02 2f       	mov	r16, r18
    1ff6:	13 2f       	mov	r17, r19
    1ff8:	24 2f       	mov	r18, r20
    1ffa:	35 2f       	mov	r19, r21
    char c = m - base * n;
    1ffc:	f7 2d       	mov	r31, r7
    1ffe:	6e 9e       	mul	r6, r30
    2000:	f0 19       	sub	r31, r0
    2002:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2004:	b1 e0       	ldi	r27, 0x01	; 1
    2006:	eb 1a       	sub	r14, r27
    2008:	f1 08       	sbc	r15, r1
    200a:	fa 30       	cpi	r31, 0x0A	; 10
    200c:	10 f4       	brcc	.+4      	; 0x2012 <_ZN5Print11printNumberEmh+0x84>
    200e:	f0 5d       	subi	r31, 0xD0	; 208
    2010:	01 c0       	rjmp	.+2      	; 0x2014 <_ZN5Print11printNumberEmh+0x86>
    2012:	f9 5c       	subi	r31, 0xC9	; 201
    2014:	d7 01       	movw	r26, r14
    2016:	fc 93       	st	X, r31
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2018:	01 2b       	or	r16, r17
    201a:	02 2b       	or	r16, r18
    201c:	03 2b       	or	r16, r19
    201e:	29 f0       	breq	.+10     	; 0x202a <_ZN5Print11printNumberEmh+0x9c>
    unsigned long m = n;
    n /= base;
    2020:	7e 2e       	mov	r7, r30
    2022:	37 2f       	mov	r19, r23
    2024:	84 2f       	mov	r24, r20
    2026:	95 2f       	mov	r25, r21
    2028:	de cf       	rjmp	.-68     	; 0x1fe6 <_ZN5Print11printNumberEmh+0x58>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    202a:	e1 14       	cp	r14, r1
    202c:	f1 04       	cpc	r15, r1
    202e:	91 f0       	breq	.+36     	; 0x2054 <_ZN5Print11printNumberEmh+0xc6>
      return write((const uint8_t *)str, strlen(str));
    2030:	f7 01       	movw	r30, r14
    2032:	01 90       	ld	r0, Z+
    2034:	00 20       	and	r0, r0
    2036:	e9 f7       	brne	.-6      	; 0x2032 <_ZN5Print11printNumberEmh+0xa4>
    2038:	31 97       	sbiw	r30, 0x01	; 1
    203a:	af 01       	movw	r20, r30
    203c:	4e 19       	sub	r20, r14
    203e:	5f 09       	sbc	r21, r15
    2040:	d6 01       	movw	r26, r12
    2042:	ed 91       	ld	r30, X+
    2044:	fc 91       	ld	r31, X
    2046:	02 80       	ldd	r0, Z+2	; 0x02
    2048:	f3 81       	ldd	r31, Z+3	; 0x03
    204a:	e0 2d       	mov	r30, r0
    204c:	b7 01       	movw	r22, r14
    204e:	c6 01       	movw	r24, r12
    2050:	19 95       	eicall
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <_ZN5Print11printNumberEmh+0xca>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    2058:	a1 96       	adiw	r28, 0x21	; 33
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	9f 90       	pop	r9
    207a:	8f 90       	pop	r8
    207c:	7f 90       	pop	r7
    207e:	6f 90       	pop	r6
    2080:	08 95       	ret

00002082 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	ec 01       	movw	r28, r24
    2094:	6a 01       	movw	r12, r20
    2096:	7b 01       	movw	r14, r22
  if (base == 0) {
    2098:	21 15       	cp	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	41 f4       	brne	.+16     	; 0x20ae <_ZN5Print5printEli+0x2c>
    return write(n);
    209e:	e8 81       	ld	r30, Y
    20a0:	f9 81       	ldd	r31, Y+1	; 0x01
    20a2:	01 90       	ld	r0, Z+
    20a4:	f0 81       	ld	r31, Z
    20a6:	e0 2d       	mov	r30, r0
    20a8:	64 2f       	mov	r22, r20
    20aa:	19 95       	eicall
    20ac:	19 c0       	rjmp	.+50     	; 0x20e0 <_ZN5Print5printEli+0x5e>
  } else if (base == 10) {
    20ae:	2a 30       	cpi	r18, 0x0A	; 10
    20b0:	31 05       	cpc	r19, r1
    20b2:	a9 f4       	brne	.+42     	; 0x20de <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    20b4:	77 23       	and	r23, r23
    20b6:	84 f4       	brge	.+32     	; 0x20d8 <_ZN5Print5printEli+0x56>
      int t = print('-');
    20b8:	6d e2       	ldi	r22, 0x2D	; 45
    20ba:	3f df       	rcall	.-386    	; 0x1f3a <_ZN5Print5printEc>
    20bc:	8c 01       	movw	r16, r24
      n = -n;
    20be:	44 27       	eor	r20, r20
    20c0:	55 27       	eor	r21, r21
    20c2:	ba 01       	movw	r22, r20
    20c4:	4c 19       	sub	r20, r12
    20c6:	5d 09       	sbc	r21, r13
    20c8:	6e 09       	sbc	r22, r14
    20ca:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    20cc:	2a e0       	ldi	r18, 0x0A	; 10
    20ce:	ce 01       	movw	r24, r28
    20d0:	5e df       	rcall	.-324    	; 0x1f8e <_ZN5Print11printNumberEmh>
    20d2:	80 0f       	add	r24, r16
    20d4:	91 1f       	adc	r25, r17
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <_ZN5Print5printEli+0x5e>
    }
    return printNumber(n, 10);
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	59 df       	rcall	.-334    	; 0x1f8e <_ZN5Print11printNumberEmh>
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <_ZN5Print5printEli+0x5e>
  } else {
    return printNumber(n, base);
    20de:	57 df       	rcall	.-338    	; 0x1f8e <_ZN5Print11printNumberEmh>
  }
}
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	08 95       	ret

000020f2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    20f2:	9a 01       	movw	r18, r20
  return print((long) n, base);
    20f4:	ab 01       	movw	r20, r22
    20f6:	66 27       	eor	r22, r22
    20f8:	57 fd       	sbrc	r21, 7
    20fa:	60 95       	com	r22
    20fc:	76 2f       	mov	r23, r22
    20fe:	c1 cf       	rjmp	.-126    	; 0x2082 <_ZN5Print5printEli>
}
    2100:	08 95       	ret

00002102 <__vector_23>:
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2102:	1f 92       	push	r1
    2104:	0f 92       	push	r0
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	0f 92       	push	r0
    210a:	11 24       	eor	r1, r1
    210c:	2f 93       	push	r18
    210e:	3f 93       	push	r19
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	80 91 d5 11 	lds	r24, 0x11D5
    211c:	90 91 d6 11 	lds	r25, 0x11D6
    2120:	a0 91 d7 11 	lds	r26, 0x11D7
    2124:	b0 91 d8 11 	lds	r27, 0x11D8
    2128:	30 91 d4 11 	lds	r19, 0x11D4
    212c:	23 e0       	ldi	r18, 0x03	; 3
    212e:	23 0f       	add	r18, r19
    2130:	2d 37       	cpi	r18, 0x7D	; 125
    2132:	20 f4       	brcc	.+8      	; 0x213c <__vector_23+0x3a>
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	a1 1d       	adc	r26, r1
    2138:	b1 1d       	adc	r27, r1
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <__vector_23+0x44>
    213c:	26 e8       	ldi	r18, 0x86	; 134
    213e:	23 0f       	add	r18, r19
    2140:	02 96       	adiw	r24, 0x02	; 2
    2142:	a1 1d       	adc	r26, r1
    2144:	b1 1d       	adc	r27, r1
    2146:	20 93 d4 11 	sts	0x11D4, r18
    214a:	80 93 d5 11 	sts	0x11D5, r24
    214e:	90 93 d6 11 	sts	0x11D6, r25
    2152:	a0 93 d7 11 	sts	0x11D7, r26
    2156:	b0 93 d8 11 	sts	0x11D8, r27
    215a:	80 91 d9 11 	lds	r24, 0x11D9
    215e:	90 91 da 11 	lds	r25, 0x11DA
    2162:	a0 91 db 11 	lds	r26, 0x11DB
    2166:	b0 91 dc 11 	lds	r27, 0x11DC
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	a1 1d       	adc	r26, r1
    216e:	b1 1d       	adc	r27, r1
    2170:	80 93 d9 11 	sts	0x11D9, r24
    2174:	90 93 da 11 	sts	0x11DA, r25
    2178:	a0 93 db 11 	sts	0x11DB, r26
    217c:	b0 93 dc 11 	sts	0x11DC, r27
    2180:	bf 91       	pop	r27
    2182:	af 91       	pop	r26
    2184:	9f 91       	pop	r25
    2186:	8f 91       	pop	r24
    2188:	3f 91       	pop	r19
    218a:	2f 91       	pop	r18
    218c:	0f 90       	pop	r0
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	0f 90       	pop	r0
    2192:	1f 90       	pop	r1
    2194:	18 95       	reti

00002196 <millis>:
    2196:	2f b7       	in	r18, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	60 91 d5 11 	lds	r22, 0x11D5
    219e:	70 91 d6 11 	lds	r23, 0x11D6
    21a2:	80 91 d7 11 	lds	r24, 0x11D7
    21a6:	90 91 d8 11 	lds	r25, 0x11D8
    21aa:	2f bf       	out	0x3f, r18	; 63
    21ac:	08 95       	ret

000021ae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	39 f0       	breq	.+14     	; 0x21c2 <delayMicroseconds+0x14>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    21bc:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <delayMicroseconds+0x10>
    21c2:	08 95       	ret

000021c4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    21c4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    21c6:	84 b5       	in	r24, 0x24	; 36
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    21cc:	84 b5       	in	r24, 0x24	; 36
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    21d2:	85 b5       	in	r24, 0x25	; 37
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    21d8:	85 b5       	in	r24, 0x25	; 37
    21da:	81 60       	ori	r24, 0x01	; 1
    21dc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    21de:	ee e6       	ldi	r30, 0x6E	; 110
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	81 60       	ori	r24, 0x01	; 1
    21e6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21e8:	e1 e8       	ldi	r30, 0x81	; 129
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21ee:	80 81       	ld	r24, Z
    21f0:	82 60       	ori	r24, 0x02	; 2
    21f2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21f4:	80 81       	ld	r24, Z
    21f6:	81 60       	ori	r24, 0x01	; 1
    21f8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21fa:	e0 e8       	ldi	r30, 0x80	; 128
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	81 60       	ori	r24, 0x01	; 1
    2202:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2204:	e1 eb       	ldi	r30, 0xB1	; 177
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	84 60       	ori	r24, 0x04	; 4
    220c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    220e:	e0 eb       	ldi	r30, 0xB0	; 176
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	81 60       	ori	r24, 0x01	; 1
    2216:	80 83       	st	Z, r24
	#warning Timer 2 not finished (may not be present on this CPU)
#endif


#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2218:	e1 e9       	ldi	r30, 0x91	; 145
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	82 60       	ori	r24, 0x02	; 2
    2220:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2222:	80 81       	ld	r24, Z
    2224:	81 60       	ori	r24, 0x01	; 1
    2226:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2228:	e0 e9       	ldi	r30, 0x90	; 144
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	81 60       	ori	r24, 0x01	; 1
    2230:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2232:	e1 ea       	ldi	r30, 0xA1	; 161
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    223c:	80 81       	ld	r24, Z
    223e:	81 60       	ori	r24, 0x01	; 1
    2240:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2242:	e0 ea       	ldi	r30, 0xA0	; 160
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	81 60       	ori	r24, 0x01	; 1
    224a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    224c:	e1 e2       	ldi	r30, 0x21	; 33
    224e:	f1 e0       	ldi	r31, 0x01	; 1
    2250:	80 81       	ld	r24, Z
    2252:	82 60       	ori	r24, 0x02	; 2
    2254:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2256:	80 81       	ld	r24, Z
    2258:	81 60       	ori	r24, 0x01	; 1
    225a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    225c:	e0 e2       	ldi	r30, 0x20	; 32
    225e:	f1 e0       	ldi	r31, 0x01	; 1
    2260:	80 81       	ld	r24, Z
    2262:	81 60       	ori	r24, 0x01	; 1
    2264:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2266:	ea e7       	ldi	r30, 0x7A	; 122
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	84 60       	ori	r24, 0x04	; 4
    226e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2270:	80 81       	ld	r24, Z
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    227c:	80 81       	ld	r24, Z
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2282:	10 92 c1 00 	sts	0x00C1, r1
    2286:	08 95       	ret

00002288 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	fc 01       	movw	r30, r24
    228c:	31 97       	sbiw	r30, 0x01	; 1
    228e:	e1 31       	cpi	r30, 0x11	; 17
    2290:	f1 05       	cpc	r31, r1
    2292:	08 f0       	brcs	.+2      	; 0x2296 <turnOffPWM+0xe>
    2294:	58 c0       	rjmp	.+176    	; 0x2346 <turnOffPWM+0xbe>
    2296:	ee 58       	subi	r30, 0x8E	; 142
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	a8 c0       	rjmp	.+336    	; 0x23ec <__tablejump2__>
    229c:	e0 e8       	ldi	r30, 0x80	; 128
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 77       	andi	r24, 0x7F	; 127
    22a4:	80 83       	st	Z, r24
    22a6:	08 95       	ret
    22a8:	e0 e8       	ldi	r30, 0x80	; 128
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8f 7d       	andi	r24, 0xDF	; 223
    22b0:	80 83       	st	Z, r24
    22b2:	08 95       	ret
    22b4:	84 b5       	in	r24, 0x24	; 36
    22b6:	8f 77       	andi	r24, 0x7F	; 127
    22b8:	84 bd       	out	0x24, r24	; 36
    22ba:	08 95       	ret
    22bc:	84 b5       	in	r24, 0x24	; 36
    22be:	8f 7d       	andi	r24, 0xDF	; 223
    22c0:	84 bd       	out	0x24, r24	; 36
    22c2:	08 95       	ret
    22c4:	e0 eb       	ldi	r30, 0xB0	; 176
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 77       	andi	r24, 0x7F	; 127
    22cc:	80 83       	st	Z, r24
    22ce:	08 95       	ret
    22d0:	e0 eb       	ldi	r30, 0xB0	; 176
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 7d       	andi	r24, 0xDF	; 223
    22d8:	80 83       	st	Z, r24
    22da:	08 95       	ret
    22dc:	e0 e9       	ldi	r30, 0x90	; 144
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 77       	andi	r24, 0x7F	; 127
    22e4:	80 83       	st	Z, r24
    22e6:	08 95       	ret
    22e8:	e0 e9       	ldi	r30, 0x90	; 144
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8f 7d       	andi	r24, 0xDF	; 223
    22f0:	80 83       	st	Z, r24
    22f2:	08 95       	ret
    22f4:	e0 e9       	ldi	r30, 0x90	; 144
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	87 7f       	andi	r24, 0xF7	; 247
    22fc:	80 83       	st	Z, r24
    22fe:	08 95       	ret
    2300:	e0 ea       	ldi	r30, 0xA0	; 160
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8f 77       	andi	r24, 0x7F	; 127
    2308:	80 83       	st	Z, r24
    230a:	08 95       	ret
    230c:	e0 ea       	ldi	r30, 0xA0	; 160
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8f 7d       	andi	r24, 0xDF	; 223
    2314:	80 83       	st	Z, r24
    2316:	08 95       	ret
    2318:	e0 ea       	ldi	r30, 0xA0	; 160
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	87 7f       	andi	r24, 0xF7	; 247
    2320:	80 83       	st	Z, r24
    2322:	08 95       	ret
    2324:	e0 e2       	ldi	r30, 0x20	; 32
    2326:	f1 e0       	ldi	r31, 0x01	; 1
    2328:	80 81       	ld	r24, Z
    232a:	8f 77       	andi	r24, 0x7F	; 127
    232c:	80 83       	st	Z, r24
    232e:	08 95       	ret
    2330:	e0 e2       	ldi	r30, 0x20	; 32
    2332:	f1 e0       	ldi	r31, 0x01	; 1
    2334:	80 81       	ld	r24, Z
    2336:	8f 7d       	andi	r24, 0xDF	; 223
    2338:	80 83       	st	Z, r24
    233a:	08 95       	ret
    233c:	e0 e2       	ldi	r30, 0x20	; 32
    233e:	f1 e0       	ldi	r31, 0x01	; 1
    2340:	80 81       	ld	r24, Z
    2342:	87 7f       	andi	r24, 0xF7	; 247
    2344:	80 83       	st	Z, r24
    2346:	08 95       	ret

00002348 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	ea 5f       	subi	r30, 0xFA	; 250
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    235c:	f9 01       	movw	r30, r18
    235e:	e4 5b       	subi	r30, 0xB4	; 180
    2360:	fe 4f       	sbci	r31, 0xFE	; 254
    2362:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2364:	f9 01       	movw	r30, r18
    2366:	ee 56       	subi	r30, 0x6E	; 110
    2368:	fe 4f       	sbci	r31, 0xFE	; 254
    236a:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    236c:	dd 23       	and	r29, r29
    236e:	c1 f0       	breq	.+48     	; 0x23a0 <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2370:	81 11       	cpse	r24, r1
    2372:	8a df       	rcall	.-236    	; 0x2288 <turnOffPWM>

	out = portOutputRegister(port);
    2374:	2d 2f       	mov	r18, r29
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	f9 01       	movw	r30, r18
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	e8 52       	subi	r30, 0x28	; 40
    2380:	fe 4f       	sbci	r31, 0xFE	; 254
    2382:	a5 91       	lpm	r26, Z+
    2384:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2386:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2388:	f8 94       	cli

	if (val == LOW) {
    238a:	c1 11       	cpse	r28, r1
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <digitalWrite+0x50>
		*out &= ~bit;
    238e:	ec 91       	ld	r30, X
    2390:	10 95       	com	r17
    2392:	1e 23       	and	r17, r30
    2394:	1c 93       	st	X, r17
    2396:	03 c0       	rjmp	.+6      	; 0x239e <digitalWrite+0x56>
	} else {
		*out |= bit;
    2398:	ec 91       	ld	r30, X
    239a:	1e 2b       	or	r17, r30
    239c:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    239e:	8f bf       	out	0x3f, r24	; 63
}
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	08 95       	ret

000023a8 <__udivmodsi4>:
    23a8:	a1 e2       	ldi	r26, 0x21	; 33
    23aa:	1a 2e       	mov	r1, r26
    23ac:	aa 1b       	sub	r26, r26
    23ae:	bb 1b       	sub	r27, r27
    23b0:	fd 01       	movw	r30, r26
    23b2:	0d c0       	rjmp	.+26     	; 0x23ce <__udivmodsi4_ep>

000023b4 <__udivmodsi4_loop>:
    23b4:	aa 1f       	adc	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	ee 1f       	adc	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	a2 17       	cp	r26, r18
    23be:	b3 07       	cpc	r27, r19
    23c0:	e4 07       	cpc	r30, r20
    23c2:	f5 07       	cpc	r31, r21
    23c4:	20 f0       	brcs	.+8      	; 0x23ce <__udivmodsi4_ep>
    23c6:	a2 1b       	sub	r26, r18
    23c8:	b3 0b       	sbc	r27, r19
    23ca:	e4 0b       	sbc	r30, r20
    23cc:	f5 0b       	sbc	r31, r21

000023ce <__udivmodsi4_ep>:
    23ce:	66 1f       	adc	r22, r22
    23d0:	77 1f       	adc	r23, r23
    23d2:	88 1f       	adc	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	1a 94       	dec	r1
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <__udivmodsi4_loop>
    23da:	60 95       	com	r22
    23dc:	70 95       	com	r23
    23de:	80 95       	com	r24
    23e0:	90 95       	com	r25
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	bd 01       	movw	r22, r26
    23e8:	cf 01       	movw	r24, r30
    23ea:	08 95       	ret

000023ec <__tablejump2__>:
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31

000023f0 <__tablejump__>:
    23f0:	05 90       	lpm	r0, Z+
    23f2:	f4 91       	lpm	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	19 94       	eijmp

000023f8 <__tablejump_elpm__>:
    23f8:	07 90       	elpm	r0, Z+
    23fa:	f6 91       	elpm	r31, Z
    23fc:	e0 2d       	mov	r30, r0
    23fe:	19 94       	eijmp

00002400 <_exit>:
    2400:	f8 94       	cli

00002402 <__stop_program>:
    2402:	ff cf       	rjmp	.-2      	; 0x2402 <__stop_program>
