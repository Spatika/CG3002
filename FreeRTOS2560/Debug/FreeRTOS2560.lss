
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  000022b4  00002348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009b6  00800298  00800298  000023e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00001208  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001aa69  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d70  00000000  00000000  0001e081  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007bb6  00000000  00000000  00020df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000040b0  00000000  00000000  000289a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006b6e  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014e89  00000000  00000000  000335c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001298  00000000  00000000  0004844f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	f5 c5       	rjmp	.+3050   	; 0xc20 <__vector_13>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_23>
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_25>
      68:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_26>
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__vector_36>
      94:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_37>
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_39>
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_51>
      d0:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_52>
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_54>
      dc:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__vector_55>
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	cf 0b       	sbc	r28, r31
      e6:	ad 0e       	add	r10, r29

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d1 e2       	ldi	r29, 0x21	; 33
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
      f8:	12 e0       	ldi	r17, 0x02	; 2
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	e4 eb       	ldi	r30, 0xB4	; 180
     100:	f2 e2       	ldi	r31, 0x22	; 34
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a8 39       	cpi	r26, 0x98	; 152
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	2c e0       	ldi	r18, 0x0C	; 12
     114:	a8 e9       	ldi	r26, 0x98	; 152
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ae 34       	cpi	r26, 0x4E	; 78
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c8 ee       	ldi	r28, 0xE8	; 232
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x16>
     12c:	22 97       	sbiw	r28, 0x02	; 2
     12e:	01 09       	sbc	r16, r1
     130:	fe 01       	movw	r30, r28
     132:	0b bf       	out	0x3b, r16	; 59
     134:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__tablejump_elpm__>
     138:	c4 3e       	cpi	r28, 0xE4	; 228
     13a:	d1 07       	cpc	r29, r17
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	08 07       	cpc	r16, r24
     140:	a9 f7       	brne	.-22     	; 0x12c <__do_global_ctors+0xa>
     142:	a2 d0       	rcall	.+324    	; 0x288 <main>
     144:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <_Z5task1Pv>:


#define STACK_DEPTH 512

void vApplicationIdleHook()
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	2f 97       	sbiw	r28, 0x0f	; 15
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	62 e4       	ldi	r22, 0x42	; 66
     160:	72 e0       	ldi	r23, 0x02	; 2
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	9a e0       	ldi	r25, 0x0A	; 10
     166:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print7printlnEPKc>
     16a:	ce 01       	movw	r24, r28
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	28 d3       	rcall	.+1616   	; 0x7c0 <_ZN7MPU6050C1Ev>
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	a0 d3       	rcall	.+1856   	; 0x8b6 <_ZN7MPU605010initializeEv>
     176:	68 e4       	ldi	r22, 0x48	; 72
     178:	72 e0       	ldi	r23, 0x02	; 2
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	9a e0       	ldi	r25, 0x0A	; 10
     17e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print7printlnEPKc>
     182:	ce 01       	movw	r24, r28
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	c2 d3       	rcall	.+1924   	; 0x90c <_ZN7MPU605014testConnectionEv>
     188:	88 23       	and	r24, r24
     18a:	19 f0       	breq	.+6      	; 0x192 <_Z5task1Pv+0x48>
     18c:	6a e0       	ldi	r22, 0x0A	; 10
     18e:	72 e0       	ldi	r23, 0x02	; 2
     190:	02 c0       	rjmp	.+4      	; 0x196 <_Z5task1Pv+0x4c>
     192:	68 e2       	ldi	r22, 0x28	; 40
     194:	72 e0       	ldi	r23, 0x02	; 2
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	9a e0       	ldi	r25, 0x0A	; 10
     19a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print7printlnEPKc>
     19e:	2e e9       	ldi	r18, 0x9E	; 158
     1a0:	32 e0       	ldi	r19, 0x02	; 2
     1a2:	40 ea       	ldi	r20, 0xA0	; 160
     1a4:	52 e0       	ldi	r21, 0x02	; 2
     1a6:	62 ea       	ldi	r22, 0xA2	; 162
     1a8:	72 e0       	ldi	r23, 0x02	; 2
     1aa:	ce 01       	movw	r24, r28
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	20 d3       	rcall	.+1600   	; 0x7f0 <_ZN7MPU605015getAccelerationEPiS0_S0_>
     1b0:	66 e6       	ldi	r22, 0x66	; 102
     1b2:	72 e0       	ldi	r23, 0x02	; 2
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	9a e0       	ldi	r25, 0x0A	; 10
     1b8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     1bc:	60 91 a2 02 	lds	r22, 0x02A2
     1c0:	70 91 a3 02 	lds	r23, 0x02A3
     1c4:	4a e0       	ldi	r20, 0x0A	; 10
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	9a e0       	ldi	r25, 0x0A	; 10
     1cc:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEii>
     1d0:	6a e6       	ldi	r22, 0x6A	; 106
     1d2:	72 e0       	ldi	r23, 0x02	; 2
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	9a e0       	ldi	r25, 0x0A	; 10
     1d8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     1dc:	60 91 a0 02 	lds	r22, 0x02A0
     1e0:	70 91 a1 02 	lds	r23, 0x02A1
     1e4:	4a e0       	ldi	r20, 0x0A	; 10
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	9a e0       	ldi	r25, 0x0A	; 10
     1ec:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEii>
     1f0:	6a e6       	ldi	r22, 0x6A	; 106
     1f2:	72 e0       	ldi	r23, 0x02	; 2
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	9a e0       	ldi	r25, 0x0A	; 10
     1f8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     1fc:	60 91 9e 02 	lds	r22, 0x029E
     200:	70 91 9f 02 	lds	r23, 0x029F
     204:	4a e0       	ldi	r20, 0x0A	; 10
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	9a e0       	ldi	r25, 0x0A	; 10
     20c:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEii>
     210:	6a e6       	ldi	r22, 0x6A	; 106
     212:	72 e0       	ldi	r23, 0x02	; 2
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	9a e0       	ldi	r25, 0x0A	; 10
     218:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     21c:	60 91 9c 02 	lds	r22, 0x029C
     220:	70 91 9d 02 	lds	r23, 0x029D
     224:	4a e0       	ldi	r20, 0x0A	; 10
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	9a e0       	ldi	r25, 0x0A	; 10
     22c:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEii>
     230:	6a e6       	ldi	r22, 0x6A	; 106
     232:	72 e0       	ldi	r23, 0x02	; 2
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	9a e0       	ldi	r25, 0x0A	; 10
     238:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     23c:	60 91 9a 02 	lds	r22, 0x029A
     240:	70 91 9b 02 	lds	r23, 0x029B
     244:	4a e0       	ldi	r20, 0x0A	; 10
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	9a e0       	ldi	r25, 0x0A	; 10
     24c:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEii>
     250:	6a e6       	ldi	r22, 0x6A	; 106
     252:	72 e0       	ldi	r23, 0x02	; 2
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	9a e0       	ldi	r25, 0x0A	; 10
     258:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN5Print5printEPKc>
     25c:	60 91 98 02 	lds	r22, 0x0298
     260:	70 91 99 02 	lds	r23, 0x0299
     264:	4a e0       	ldi	r20, 0x0A	; 10
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	9a e0       	ldi	r25, 0x0A	; 10
     26c:	0e 94 9c 10 	call	0x2138	; 0x2138 <_ZN5Print7printlnEii>
     270:	86 e9       	ldi	r24, 0x96	; 150
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	57 d7       	rcall	.+3758   	; 0x1124 <vTaskDelay>
     276:	2f 96       	adiw	r28, 0x0f	; 15
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <main>:
	//
}

int main(void)
{
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	1f 92       	push	r1
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t t1 ;
	
	xTaskCreate(task1, "Task 1", STACK_DEPTH, NULL,6,&t1);
     2a2:	a1 2c       	mov	r10, r1
     2a4:	b1 2c       	mov	r11, r1
     2a6:	c1 2c       	mov	r12, r1
     2a8:	d1 2c       	mov	r13, r1
     2aa:	ce 01       	movw	r24, r28
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	7c 01       	movw	r14, r24
     2b0:	06 e0       	ldi	r16, 0x06	; 6
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	52 e0       	ldi	r21, 0x02	; 2
     2ba:	6c e6       	ldi	r22, 0x6C	; 108
     2bc:	72 e0       	ldi	r23, 0x02	; 2
     2be:	85 ea       	ldi	r24, 0xA5	; 165
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fd d4       	rcall	.+2554   	; 0xcbe <xTaskGenericCreate>
	//xTaskCreate(task2,"Task 2", STACK_DEPTH, NULL, 5, &t2);
	
	vTaskStartScheduler();
     2c4:	e2 d5       	rcall	.+3012   	; 0xe8a <vTaskStartScheduler>
		blinkState = !blinkState;
		digitalWrite(LED_PIN, blinkState);
	}*/
	
	
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	bf 90       	pop	r11
     2de:	af 90       	pop	r10
     2e0:	08 95       	ret

000002e2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2e8:	00 d6       	rcall	.+3072   	; 0xeea <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     2ea:	80 91 a4 02 	lds	r24, 0x02A4
     2ee:	90 91 a5 02 	lds	r25, 0x02A5
     2f2:	89 2b       	or	r24, r25
     2f4:	31 f4       	brne	.+12     	; 0x302 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     2f6:	89 ea       	ldi	r24, 0xA9	; 169
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	90 93 a5 02 	sts	0x02A5, r25
     2fe:	80 93 a4 02 	sts	0x02A4, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     302:	20 91 a6 02 	lds	r18, 0x02A6
     306:	30 91 a7 02 	lds	r19, 0x02A7
     30a:	ce 01       	movw	r24, r28
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	8b 3d       	cpi	r24, 0xDB	; 219
     312:	45 e0       	ldi	r20, 0x05	; 5
     314:	94 07       	cpc	r25, r20
     316:	70 f4       	brcc	.+28     	; 0x334 <pvPortMalloc+0x52>
     318:	28 17       	cp	r18, r24
     31a:	39 07       	cpc	r19, r25
     31c:	58 f4       	brcc	.+22     	; 0x334 <pvPortMalloc+0x52>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     31e:	c0 91 a4 02 	lds	r28, 0x02A4
     322:	d0 91 a5 02 	lds	r29, 0x02A5
     326:	c2 0f       	add	r28, r18
     328:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     32a:	90 93 a7 02 	sts	0x02A7, r25
     32e:	80 93 a6 02 	sts	0x02A6, r24
     332:	02 c0       	rjmp	.+4      	; 0x338 <pvPortMalloc+0x56>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     334:	c0 e0       	ldi	r28, 0x00	; 0
     336:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     338:	8a d6       	rcall	.+3348   	; 0x104e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     33a:	ce 01       	movw	r24, r28
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     342:	08 95       	ret

00000344 <_ZN6I2Cdev10writeBytesEhhhPh>:
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    *data = b & (1 << bitNum);
    return count;
}
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	1f 92       	push	r1
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	06 2f       	mov	r16, r22
     35a:	14 2f       	mov	r17, r20
     35c:	68 2f       	mov	r22, r24
     35e:	8b e4       	ldi	r24, 0x4B	; 75
     360:	99 e0       	ldi	r25, 0x09	; 9
     362:	29 83       	std	Y+1, r18	; 0x01
     364:	3a 83       	std	Y+2, r19	; 0x02
     366:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN7TwoWire17beginTransmissionEh>
     36a:	60 2f       	mov	r22, r16
     36c:	8b e4       	ldi	r24, 0x4B	; 75
     36e:	99 e0       	ldi	r25, 0x09	; 9
     370:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN7TwoWire5writeEh>
     374:	29 81       	ldd	r18, Y+1	; 0x01
     376:	02 2f       	mov	r16, r18
     378:	e2 2e       	mov	r14, r18
     37a:	3a 81       	ldd	r19, Y+2	; 0x02
     37c:	f3 2e       	mov	r15, r19
     37e:	8e 2d       	mov	r24, r14
     380:	80 1b       	sub	r24, r16
     382:	81 17       	cp	r24, r17
     384:	40 f4       	brcc	.+16     	; 0x396 <_ZN6I2Cdev10writeBytesEhhhPh+0x52>
     386:	f7 01       	movw	r30, r14
     388:	61 91       	ld	r22, Z+
     38a:	7f 01       	movw	r14, r30
     38c:	8b e4       	ldi	r24, 0x4B	; 75
     38e:	99 e0       	ldi	r25, 0x09	; 9
     390:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN7TwoWire5writeEh>
     394:	f4 cf       	rjmp	.-24     	; 0x37e <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
     396:	8b e4       	ldi	r24, 0x4B	; 75
     398:	99 e0       	ldi	r25, 0x09	; 9
     39a:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN7TwoWire15endTransmissionEv>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	08 95       	ret

000003b2 <_ZN6I2Cdev9writeByteEhhh>:
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	1f 92       	push	r1
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	49 83       	std	Y+1, r20	; 0x01
     3be:	9e 01       	movw	r18, r28
     3c0:	2f 5f       	subi	r18, 0xFF	; 255
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	be df       	rcall	.-132    	; 0x344 <_ZN6I2Cdev10writeBytesEhhhPh>
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <_ZN6I2Cdev9readBytesEhhhPhj>:
     3d0:	3f 92       	push	r3
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	6f 92       	push	r6
     3d8:	7f 92       	push	r7
     3da:	8f 92       	push	r8
     3dc:	9f 92       	push	r9
     3de:	af 92       	push	r10
     3e0:	bf 92       	push	r11
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	68 2e       	mov	r6, r24
     3fc:	56 2e       	mov	r5, r22
     3fe:	74 2e       	mov	r7, r20
     400:	3a 83       	std	Y+2, r19	; 0x02
     402:	29 83       	std	Y+1, r18	; 0x01
     404:	0e 94 26 11 	call	0x224c	; 0x224c <millis>
     408:	6b 01       	movw	r12, r22
     40a:	7c 01       	movw	r14, r24
     40c:	31 2c       	mov	r3, r1
     40e:	41 2c       	mov	r4, r1
     410:	87 2d       	mov	r24, r7
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 83       	std	Y+4, r25	; 0x04
     416:	8b 83       	std	Y+3, r24	; 0x03
     418:	48 01       	movw	r8, r16
     41a:	a1 2c       	mov	r10, r1
     41c:	b1 2c       	mov	r11, r1
     41e:	37 14       	cp	r3, r7
     420:	b0 f5       	brcc	.+108    	; 0x48e <_ZN6I2Cdev9readBytesEhhhPhj+0xbe>
     422:	66 2d       	mov	r22, r6
     424:	8b e4       	ldi	r24, 0x4B	; 75
     426:	99 e0       	ldi	r25, 0x09	; 9
     428:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN7TwoWire17beginTransmissionEh>
     42c:	65 2d       	mov	r22, r5
     42e:	8b e4       	ldi	r24, 0x4B	; 75
     430:	99 e0       	ldi	r25, 0x09	; 9
     432:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN7TwoWire5writeEh>
     436:	8b e4       	ldi	r24, 0x4B	; 75
     438:	99 e0       	ldi	r25, 0x09	; 9
     43a:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN7TwoWire15endTransmissionEv>
     43e:	66 2d       	mov	r22, r6
     440:	8b e4       	ldi	r24, 0x4B	; 75
     442:	99 e0       	ldi	r25, 0x09	; 9
     444:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN7TwoWire17beginTransmissionEh>
     448:	4b 81       	ldd	r20, Y+3	; 0x03
     44a:	5c 81       	ldd	r21, Y+4	; 0x04
     44c:	43 19       	sub	r20, r3
     44e:	51 09       	sbc	r21, r1
     450:	41 32       	cpi	r20, 0x21	; 33
     452:	51 05       	cpc	r21, r1
     454:	14 f0       	brlt	.+4      	; 0x45a <_ZN6I2Cdev9readBytesEhhhPhj+0x8a>
     456:	40 e2       	ldi	r20, 0x20	; 32
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	66 2d       	mov	r22, r6
     45c:	8b e4       	ldi	r24, 0x4B	; 75
     45e:	99 e0       	ldi	r25, 0x09	; 9
     460:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN7TwoWire11requestFromEhh>
     464:	8b e4       	ldi	r24, 0x4B	; 75
     466:	99 e0       	ldi	r25, 0x09	; 9
     468:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN7TwoWire9availableEv>
     46c:	89 2b       	or	r24, r25
     46e:	59 f1       	breq	.+86     	; 0x4c6 <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     470:	01 15       	cp	r16, r1
     472:	11 05       	cpc	r17, r1
     474:	99 f1       	breq	.+102    	; 0x4dc <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     476:	0e 94 26 11 	call	0x224c	; 0x224c <millis>
     47a:	6c 19       	sub	r22, r12
     47c:	7d 09       	sbc	r23, r13
     47e:	8e 09       	sbc	r24, r14
     480:	9f 09       	sbc	r25, r15
     482:	68 15       	cp	r22, r8
     484:	79 05       	cpc	r23, r9
     486:	8a 05       	cpc	r24, r10
     488:	9b 05       	cpc	r25, r11
     48a:	40 f1       	brcs	.+80     	; 0x4dc <_ZN6I2Cdev9readBytesEhhhPhj+0x10c>
     48c:	1c c0       	rjmp	.+56     	; 0x4c6 <_ZN6I2Cdev9readBytesEhhhPhj+0xf6>
     48e:	01 15       	cp	r16, r1
     490:	11 05       	cpc	r17, r1
     492:	a9 f1       	breq	.+106    	; 0x4fe <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     494:	0e 94 26 11 	call	0x224c	; 0x224c <millis>
     498:	6c 19       	sub	r22, r12
     49a:	7d 09       	sbc	r23, r13
     49c:	8e 09       	sbc	r24, r14
     49e:	9f 09       	sbc	r25, r15
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	60 17       	cp	r22, r16
     4a6:	71 07       	cpc	r23, r17
     4a8:	82 07       	cpc	r24, r18
     4aa:	93 07       	cpc	r25, r19
     4ac:	40 f1       	brcs	.+80     	; 0x4fe <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     4ae:	87 2d       	mov	r24, r7
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	24 2d       	mov	r18, r4
     4b4:	33 27       	eor	r19, r19
     4b6:	27 fd       	sbrc	r18, 7
     4b8:	30 95       	com	r19
     4ba:	28 17       	cp	r18, r24
     4bc:	39 07       	cpc	r19, r25
     4be:	fc f4       	brge	.+62     	; 0x4fe <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     4c0:	44 24       	eor	r4, r4
     4c2:	4a 94       	dec	r4
     4c4:	1c c0       	rjmp	.+56     	; 0x4fe <_ZN6I2Cdev9readBytesEhhhPhj+0x12e>
     4c6:	8b e4       	ldi	r24, 0x4B	; 75
     4c8:	99 e0       	ldi	r25, 0x09	; 9
     4ca:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN7TwoWire15endTransmissionEv>
     4ce:	87 2d       	mov	r24, r7
     4d0:	90 e2       	ldi	r25, 0x20	; 32
     4d2:	97 15       	cp	r25, r7
     4d4:	08 f4       	brcc	.+2      	; 0x4d8 <_ZN6I2Cdev9readBytesEhhhPhj+0x108>
     4d6:	80 e2       	ldi	r24, 0x20	; 32
     4d8:	38 0e       	add	r3, r24
     4da:	a1 cf       	rjmp	.-190    	; 0x41e <_ZN6I2Cdev9readBytesEhhhPhj+0x4e>
     4dc:	e9 81       	ldd	r30, Y+1	; 0x01
     4de:	fa 81       	ldd	r31, Y+2	; 0x02
     4e0:	e4 0d       	add	r30, r4
     4e2:	f1 1d       	adc	r31, r1
     4e4:	47 fc       	sbrc	r4, 7
     4e6:	fa 95       	dec	r31
     4e8:	fe 83       	std	Y+6, r31	; 0x06
     4ea:	ed 83       	std	Y+5, r30	; 0x05
     4ec:	8b e4       	ldi	r24, 0x4B	; 75
     4ee:	99 e0       	ldi	r25, 0x09	; 9
     4f0:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN7TwoWire4readEv>
     4f4:	ed 81       	ldd	r30, Y+5	; 0x05
     4f6:	fe 81       	ldd	r31, Y+6	; 0x06
     4f8:	80 83       	st	Z, r24
     4fa:	43 94       	inc	r4
     4fc:	b3 cf       	rjmp	.-154    	; 0x464 <_ZN6I2Cdev9readBytesEhhhPhj+0x94>
     4fe:	84 2d       	mov	r24, r4
     500:	26 96       	adiw	r28, 0x06	; 6
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	af 90       	pop	r10
     520:	9f 90       	pop	r9
     522:	8f 90       	pop	r8
     524:	7f 90       	pop	r7
     526:	6f 90       	pop	r6
     528:	5f 90       	pop	r5
     52a:	4f 90       	pop	r4
     52c:	3f 90       	pop	r3
     52e:	08 95       	ret

00000530 <_ZN6I2Cdev8readByteEhhPhj>:
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	89 01       	movw	r16, r18
     536:	9a 01       	movw	r18, r20
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	4a df       	rcall	.-364    	; 0x3d0 <_ZN6I2Cdev9readBytesEhhhPhj>
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	1f 92       	push	r1
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	c4 2e       	mov	r12, r20
     55a:	d2 2e       	mov	r13, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
     55c:	97 01       	movw	r18, r14
     55e:	ae 01       	movw	r20, r28
     560:	4f 5f       	subi	r20, 0xFF	; 255
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	e5 df       	rcall	.-54     	; 0x530 <_ZN6I2Cdev8readByteEhhPhj>
     566:	88 23       	and	r24, r24
     568:	f1 f0       	breq	.+60     	; 0x5a6 <_ZN6I2Cdev8readBitsEhhhhPhj+0x64>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     56a:	4c 2d       	mov	r20, r12
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	4d 19       	sub	r20, r13
     570:	51 09       	sbc	r21, r1
     572:	4f 5f       	subi	r20, 0xFF	; 255
     574:	5f 4f       	sbci	r21, 0xFF	; 255
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	da 94       	dec	r13
     582:	e2 f7       	brpl	.-8      	; 0x57c <_ZN6I2Cdev8readBitsEhhhhPhj+0x3a>
     584:	61 50       	subi	r22, 0x01	; 1
     586:	71 09       	sbc	r23, r1
     588:	04 2e       	mov	r0, r20
     58a:	01 c0       	rjmp	.+2      	; 0x58e <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
     58c:	66 0f       	add	r22, r22
     58e:	0a 94       	dec	r0
     590:	ea f7       	brpl	.-6      	; 0x58c <_ZN6I2Cdev8readBitsEhhhhPhj+0x4a>
        b &= mask;
     592:	29 81       	ldd	r18, Y+1	; 0x01
     594:	26 23       	and	r18, r22
        b >>= (bitStart - length + 1);
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <_ZN6I2Cdev8readBitsEhhhhPhj+0x5c>
     59a:	35 95       	asr	r19
     59c:	27 95       	ror	r18
     59e:	4a 95       	dec	r20
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <_ZN6I2Cdev8readBitsEhhhhPhj+0x58>
     5a2:	f8 01       	movw	r30, r16
     5a4:	20 83       	st	Z, r18
        *data = b;
    }
    return count;
}
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	08 95       	ret

000005ba <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	1f 92       	push	r1
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	18 2f       	mov	r17, r24
     5ce:	06 2f       	mov	r16, r22
     5d0:	f4 2e       	mov	r15, r20
     5d2:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     5d4:	20 91 06 02 	lds	r18, 0x0206
     5d8:	30 91 07 02 	lds	r19, 0x0207
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	a6 df       	rcall	.-180    	; 0x530 <_ZN6I2Cdev8readByteEhhPhj>
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	0f 2c       	mov	r0, r15
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <_ZN6I2Cdev8writeBitEhhhh+0x36>
     5ee:	22 0f       	add	r18, r18
     5f0:	0a 94       	dec	r0
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <_ZN6I2Cdev8writeBitEhhhh+0x34>
     5f4:	ee 20       	and	r14, r14
     5f6:	19 f0       	breq	.+6      	; 0x5fe <_ZN6I2Cdev8writeBitEhhhh+0x44>
     5f8:	48 2f       	mov	r20, r24
     5fa:	42 2b       	or	r20, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
     5fe:	42 2f       	mov	r20, r18
     600:	40 95       	com	r20
     602:	48 23       	and	r20, r24
     604:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     606:	60 2f       	mov	r22, r16
     608:	81 2f       	mov	r24, r17
     60a:	d3 de       	rcall	.-602    	; 0x3b2 <_ZN6I2Cdev9writeByteEhhh>
}
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	1f 92       	push	r1
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	f8 2e       	mov	r15, r24
     632:	e6 2e       	mov	r14, r22
     634:	d4 2e       	mov	r13, r20
     636:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     638:	20 91 06 02 	lds	r18, 0x0206
     63c:	30 91 07 02 	lds	r19, 0x0207
     640:	ae 01       	movw	r20, r28
     642:	4f 5f       	subi	r20, 0xFF	; 255
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	74 df       	rcall	.-280    	; 0x530 <_ZN6I2Cdev8readByteEhhPhj>
     648:	88 23       	and	r24, r24
     64a:	11 f1       	breq	.+68     	; 0x690 <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     64c:	4d 2d       	mov	r20, r13
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	41 1b       	sub	r20, r17
     652:	51 09       	sbc	r21, r1
     654:	4f 5f       	subi	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	e1 e0       	ldi	r30, 0x01	; 1
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	1a 95       	dec	r17
     664:	e2 f7       	brpl	.-8      	; 0x65e <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	04 2e       	mov	r0, r20
     66a:	01 c0       	rjmp	.+2      	; 0x66e <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
     66c:	ee 0f       	add	r30, r30
     66e:	0a 94       	dec	r0
     670:	ea f7       	brpl	.-6      	; 0x66c <_ZN6I2Cdev9writeBitsEhhhhh+0x50>
        data <<= (bitStart - length + 1); // shift data into correct position
     672:	01 c0       	rjmp	.+2      	; 0x676 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     674:	00 0f       	add	r16, r16
     676:	4a 95       	dec	r20
     678:	ea f7       	brpl	.-6      	; 0x674 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     67a:	4e 2f       	mov	r20, r30
     67c:	40 95       	com	r20
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	48 23       	and	r20, r24
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     682:	e0 23       	and	r30, r16
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     684:	4e 2b       	or	r20, r30
     686:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     688:	6e 2d       	mov	r22, r14
     68a:	8f 2d       	mov	r24, r15
     68c:	92 de       	rcall	.-732    	; 0x3b2 <_ZN6I2Cdev9writeByteEhhh>
     68e:	01 c0       	rjmp	.+2      	; 0x692 <_ZN6I2Cdev9writeBitsEhhhhh+0x76>
    } else {
        return false;
     690:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     692:	0f 90       	pop	r0
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	08 95       	ret

000006a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6a4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6a6:	03 96       	adiw	r24, 0x03	; 3
     6a8:	92 83       	std	Z+2, r25	; 0x02
     6aa:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6ac:	2f ef       	ldi	r18, 0xFF	; 255
     6ae:	3f ef       	ldi	r19, 0xFF	; 255
     6b0:	34 83       	std	Z+4, r19	; 0x04
     6b2:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6b4:	96 83       	std	Z+6, r25	; 0x06
     6b6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6b8:	90 87       	std	Z+8, r25	; 0x08
     6ba:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6bc:	10 82       	st	Z, r1
     6be:	08 95       	ret

000006c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6c0:	fc 01       	movw	r30, r24
     6c2:	11 86       	std	Z+9, r1	; 0x09
     6c4:	10 86       	std	Z+8, r1	; 0x08
     6c6:	08 95       	ret

000006c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	9c 01       	movw	r18, r24
     6ce:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     6d0:	dc 01       	movw	r26, r24
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	cd 91       	ld	r28, X+
     6d6:	dc 91       	ld	r29, X
     6d8:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     6da:	d3 83       	std	Z+3, r29	; 0x03
     6dc:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6de:	8c 81       	ldd	r24, Y+4	; 0x04
     6e0:	9d 81       	ldd	r25, Y+5	; 0x05
     6e2:	95 83       	std	Z+5, r25	; 0x05
     6e4:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     6e6:	8c 81       	ldd	r24, Y+4	; 0x04
     6e8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ea:	dc 01       	movw	r26, r24
     6ec:	13 96       	adiw	r26, 0x03	; 3
     6ee:	7c 93       	st	X, r23
     6f0:	6e 93       	st	-X, r22
     6f2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     6f4:	7d 83       	std	Y+5, r23	; 0x05
     6f6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6f8:	31 87       	std	Z+9, r19	; 0x09
     6fa:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     6fc:	f9 01       	movw	r30, r18
     6fe:	80 81       	ld	r24, Z
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	80 83       	st	Z, r24
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	8c 01       	movw	r16, r24
     714:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     716:	20 81       	ld	r18, Z
     718:	31 81       	ldd	r19, Z+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     71a:	2f 3f       	cpi	r18, 0xFF	; 255
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	38 07       	cpc	r19, r24
     720:	21 f4       	brne	.+8      	; 0x72a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     722:	e8 01       	movw	r28, r16
     724:	af 81       	ldd	r26, Y+7	; 0x07
     726:	b8 85       	ldd	r27, Y+8	; 0x08
     728:	0e c0       	rjmp	.+28     	; 0x746 <vListInsert+0x3c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     72a:	d8 01       	movw	r26, r16
     72c:	13 96       	adiw	r26, 0x03	; 3
     72e:	12 96       	adiw	r26, 0x02	; 2
     730:	8d 91       	ld	r24, X+
     732:	9c 91       	ld	r25, X
     734:	13 97       	sbiw	r26, 0x03	; 3
     736:	ec 01       	movw	r28, r24
     738:	48 81       	ld	r20, Y
     73a:	59 81       	ldd	r21, Y+1	; 0x01
     73c:	24 17       	cp	r18, r20
     73e:	35 07       	cpc	r19, r21
     740:	10 f0       	brcs	.+4      	; 0x746 <vListInsert+0x3c>
     742:	dc 01       	movw	r26, r24
     744:	f4 cf       	rjmp	.-24     	; 0x72e <vListInsert+0x24>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     746:	12 96       	adiw	r26, 0x02	; 2
     748:	8d 91       	ld	r24, X+
     74a:	9c 91       	ld	r25, X
     74c:	13 97       	sbiw	r26, 0x03	; 3
     74e:	93 83       	std	Z+3, r25	; 0x03
     750:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     752:	ec 01       	movw	r28, r24
     754:	fd 83       	std	Y+5, r31	; 0x05
     756:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     758:	b5 83       	std	Z+5, r27	; 0x05
     75a:	a4 83       	std	Z+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	fc 93       	st	X, r31
     760:	ee 93       	st	-X, r30
     762:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     764:	11 87       	std	Z+9, r17	; 0x09
     766:	00 87       	std	Z+8, r16	; 0x08

	( pxList->uxNumberOfItems )++;
     768:	f8 01       	movw	r30, r16
     76a:	80 81       	ld	r24, Z
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 83       	st	Z, r24
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	08 95       	ret

0000077a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     780:	a0 85       	ldd	r26, Z+8	; 0x08
     782:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	93 81       	ldd	r25, Z+3	; 0x03
     788:	24 81       	ldd	r18, Z+4	; 0x04
     78a:	35 81       	ldd	r19, Z+5	; 0x05
     78c:	ec 01       	movw	r28, r24
     78e:	3d 83       	std	Y+5, r19	; 0x05
     790:	2c 83       	std	Y+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     792:	c4 81       	ldd	r28, Z+4	; 0x04
     794:	d5 81       	ldd	r29, Z+5	; 0x05
     796:	9b 83       	std	Y+3, r25	; 0x03
     798:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	8d 91       	ld	r24, X+
     79e:	9c 91       	ld	r25, X
     7a0:	12 97       	sbiw	r26, 0x02	; 2
     7a2:	8e 17       	cp	r24, r30
     7a4:	9f 07       	cpc	r25, r31
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	dc 93       	st	X, r29
     7ac:	ce 93       	st	-X, r28
     7ae:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7b0:	11 86       	std	Z+9, r1	; 0x09
     7b2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     7b4:	8c 91       	ld	r24, X
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <_ZN7MPU6050C1Ev>:
/** Write byte to FIFO buffer.
 * @see getFIFOByte()
 * @see MPU6050_RA_FIFO_R_W
 */
void MPU6050::setFIFOByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_FIFO_R_W, data);
     7c0:	28 e6       	ldi	r18, 0x68	; 104
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
     7c6:	08 95       	ret

000007c8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
     7c8:	0f 93       	push	r16
     7ca:	06 2f       	mov	r16, r22
     7cc:	22 e0       	ldi	r18, 0x02	; 2
     7ce:	44 e0       	ldi	r20, 0x04	; 4
     7d0:	6b e1       	ldi	r22, 0x1B	; 27
     7d2:	fc 01       	movw	r30, r24
     7d4:	80 81       	ld	r24, Z
     7d6:	22 df       	rcall	.-444    	; 0x61c <_ZN6I2Cdev9writeBitsEhhhhh>
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <_ZN7MPU605022setFullScaleAccelRangeEh>:
     7dc:	0f 93       	push	r16
     7de:	06 2f       	mov	r16, r22
     7e0:	22 e0       	ldi	r18, 0x02	; 2
     7e2:	44 e0       	ldi	r20, 0x04	; 4
     7e4:	6c e1       	ldi	r22, 0x1C	; 28
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	18 df       	rcall	.-464    	; 0x61c <_ZN6I2Cdev9writeBitsEhhhhh>
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <_ZN7MPU605015getAccelerationEPiS0_S0_>:
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	7b 01       	movw	r14, r22
     808:	5a 01       	movw	r10, r20
     80a:	69 01       	movw	r12, r18
     80c:	00 91 06 02 	lds	r16, 0x0206
     810:	10 91 07 02 	lds	r17, 0x0207
     814:	9c 01       	movw	r18, r24
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	46 e0       	ldi	r20, 0x06	; 6
     81c:	6b e3       	ldi	r22, 0x3B	; 59
     81e:	88 81       	ld	r24, Y
     820:	d7 dd       	rcall	.-1106   	; 0x3d0 <_ZN6I2Cdev9readBytesEhhhPhj>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	98 2f       	mov	r25, r24
     828:	88 27       	eor	r24, r24
     82a:	2a 81       	ldd	r18, Y+2	; 0x02
     82c:	82 2b       	or	r24, r18
     82e:	f7 01       	movw	r30, r14
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	98 2f       	mov	r25, r24
     83a:	88 27       	eor	r24, r24
     83c:	2c 81       	ldd	r18, Y+4	; 0x04
     83e:	82 2b       	or	r24, r18
     840:	f5 01       	movw	r30, r10
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	80 83       	st	Z, r24
     846:	8d 81       	ldd	r24, Y+5	; 0x05
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	98 2f       	mov	r25, r24
     84c:	88 27       	eor	r24, r24
     84e:	2e 81       	ldd	r18, Y+6	; 0x06
     850:	82 2b       	or	r24, r18
     852:	f6 01       	movw	r30, r12
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	80 83       	st	Z, r24
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	08 95       	ret

0000086e <_ZN7MPU605015setSleepEnabledEb>:
     86e:	26 2f       	mov	r18, r22
     870:	46 e0       	ldi	r20, 0x06	; 6
     872:	6b e6       	ldi	r22, 0x6B	; 107
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	a0 ce       	rjmp	.-704    	; 0x5ba <_ZN6I2Cdev8writeBitEhhhh>

0000087a <_ZN7MPU605014setClockSourceEh>:
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
     884:	06 2f       	mov	r16, r22
     886:	23 e0       	ldi	r18, 0x03	; 3
     888:	42 e0       	ldi	r20, 0x02	; 2
     88a:	6b e6       	ldi	r22, 0x6B	; 107
     88c:	88 81       	ld	r24, Y
     88e:	c6 de       	rcall	.-628    	; 0x61c <_ZN6I2Cdev9writeBitsEhhhhh>
     890:	18 2f       	mov	r17, r24
     892:	4a e0       	ldi	r20, 0x0A	; 10
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	68 81       	ld	r22, Y
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	9a e0       	ldi	r25, 0x0A	; 10
     89c:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN5Print5printEhi>
     8a0:	4a e0       	ldi	r20, 0x0A	; 10
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	61 2f       	mov	r22, r17
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	9a e0       	ldi	r25, 0x0A	; 10
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	0c 94 c7 10 	jmp	0x218e	; 0x218e <_ZN5Print7printlnEhi>

000008b6 <_ZN7MPU605010initializeEv>:
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	dd df       	rcall	.-70     	; 0x87a <_ZN7MPU605014setClockSourceEh>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	ce 01       	movw	r24, r28
     8c4:	81 df       	rcall	.-254    	; 0x7c8 <_ZN7MPU605021setFullScaleGyroRangeEh>
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	ce 01       	movw	r24, r28
     8ca:	88 df       	rcall	.-240    	; 0x7dc <_ZN7MPU605022setFullScaleAccelRangeEh>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	cc cf       	rjmp	.-104    	; 0x86e <_ZN7MPU605015setSleepEnabledEb>

000008d6 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
     8e4:	e0 90 06 02 	lds	r14, 0x0206
     8e8:	f0 90 07 02 	lds	r15, 0x0207
     8ec:	8c 01       	movw	r16, r24
     8ee:	0f 5f       	subi	r16, 0xFF	; 255
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	26 e0       	ldi	r18, 0x06	; 6
     8f4:	46 e0       	ldi	r20, 0x06	; 6
     8f6:	65 e7       	ldi	r22, 0x75	; 117
     8f8:	88 81       	ld	r24, Y
     8fa:	23 de       	rcall	.-954    	; 0x542 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	08 95       	ret

0000090c <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
	Serial.println(getDeviceID());
     912:	e1 df       	rcall	.-62     	; 0x8d6 <_ZN7MPU605011getDeviceIDEv>
     914:	4a e0       	ldi	r20, 0x0A	; 10
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	68 2f       	mov	r22, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	9a e0       	ldi	r25, 0x0A	; 10
     91e:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN5Print7printlnEhi>
    return getDeviceID() == 0x34;
     922:	ce 01       	movw	r24, r28
     924:	d8 df       	rcall	.-80     	; 0x8d6 <_ZN7MPU605011getDeviceIDEv>
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	84 33       	cpi	r24, 0x34	; 52
     92a:	09 f0       	breq	.+2      	; 0x92e <_ZN7MPU605014testConnectionEv+0x22>
     92c:	90 e0       	ldi	r25, 0x00	; 0
}
     92e:	89 2f       	mov	r24, r25
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     936:	31 e1       	ldi	r19, 0x11	; 17
     938:	fc 01       	movw	r30, r24
     93a:	30 83       	st	Z, r19
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	22 e2       	ldi	r18, 0x22	; 34
     940:	20 83       	st	Z, r18
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	a3 e3       	ldi	r26, 0x33	; 51
     946:	a0 83       	st	Z, r26
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	60 83       	st	Z, r22
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	70 83       	st	Z, r23
     950:	31 97       	sbiw	r30, 0x01	; 1
     952:	10 82       	st	Z, r1
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	10 82       	st	Z, r1
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	60 e8       	ldi	r22, 0x80	; 128
     95c:	60 83       	st	Z, r22
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	10 82       	st	Z, r1
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	10 82       	st	Z, r1
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	10 82       	st	Z, r1
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	60 83       	st	Z, r22
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	63 e0       	ldi	r22, 0x03	; 3
     974:	60 83       	st	Z, r22
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	60 83       	st	Z, r22
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	65 e0       	ldi	r22, 0x05	; 5
     980:	60 83       	st	Z, r22
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	66 e0       	ldi	r22, 0x06	; 6
     986:	60 83       	st	Z, r22
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	67 e0       	ldi	r22, 0x07	; 7
     98c:	60 83       	st	Z, r22
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	68 e0       	ldi	r22, 0x08	; 8
     992:	60 83       	st	Z, r22
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	69 e0       	ldi	r22, 0x09	; 9
     998:	60 83       	st	Z, r22
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	60 e1       	ldi	r22, 0x10	; 16
     99e:	60 83       	st	Z, r22
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	30 83       	st	Z, r19
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	32 e1       	ldi	r19, 0x12	; 18
     9a8:	30 83       	st	Z, r19
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	33 e1       	ldi	r19, 0x13	; 19
     9ae:	30 83       	st	Z, r19
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	34 e1       	ldi	r19, 0x14	; 20
     9b4:	30 83       	st	Z, r19
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	35 e1       	ldi	r19, 0x15	; 21
     9ba:	30 83       	st	Z, r19
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	36 e1       	ldi	r19, 0x16	; 22
     9c0:	30 83       	st	Z, r19
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	37 e1       	ldi	r19, 0x17	; 23
     9c6:	30 83       	st	Z, r19
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	38 e1       	ldi	r19, 0x18	; 24
     9cc:	30 83       	st	Z, r19
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	39 e1       	ldi	r19, 0x19	; 25
     9d2:	30 83       	st	Z, r19
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	30 e2       	ldi	r19, 0x20	; 32
     9d8:	30 83       	st	Z, r19
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	31 e2       	ldi	r19, 0x21	; 33
     9de:	30 83       	st	Z, r19
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	20 83       	st	Z, r18
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	23 e2       	ldi	r18, 0x23	; 35
     9e8:	20 83       	st	Z, r18
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	40 83       	st	Z, r20
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	50 83       	st	Z, r21
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	26 e2       	ldi	r18, 0x26	; 38
     9f6:	20 83       	st	Z, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	27 e2       	ldi	r18, 0x27	; 39
     9fc:	20 83       	st	Z, r18
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	28 e2       	ldi	r18, 0x28	; 40
     a02:	20 83       	st	Z, r18
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	29 e2       	ldi	r18, 0x29	; 41
     a08:	20 83       	st	Z, r18
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	20 e3       	ldi	r18, 0x30	; 48
     a0e:	20 83       	st	Z, r18
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	21 e3       	ldi	r18, 0x31	; 49
     a14:	20 83       	st	Z, r18
     a16:	89 97       	sbiw	r24, 0x29	; 41
     a18:	08 95       	ret

00000a1a <xPortStartScheduler>:
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 93 b0 00 	sts	0x00B0, r24
     a20:	10 92 b2 00 	sts	0x00B2, r1
     a24:	80 e3       	ldi	r24, 0x30	; 48
     a26:	80 93 b3 00 	sts	0x00B3, r24
     a2a:	e0 e7       	ldi	r30, 0x70	; 112
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	80 83       	st	Z, r24
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	80 93 b1 00 	sts	0x00B1, r24
     a3a:	a0 91 db 08 	lds	r26, 0x08DB
     a3e:	b0 91 dc 08 	lds	r27, 0x08DC
     a42:	cd 91       	ld	r28, X+
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	dd 91       	ld	r29, X+
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	7f 90       	pop	r7
     a7c:	6f 90       	pop	r6
     a7e:	5f 90       	pop	r5
     a80:	4f 90       	pop	r4
     a82:	3f 90       	pop	r3
     a84:	2f 90       	pop	r2
     a86:	1f 90       	pop	r1
     a88:	0f 90       	pop	r0
     a8a:	0c be       	out	0x3c, r0	; 60
     a8c:	0f 90       	pop	r0
     a8e:	0b be       	out	0x3b, r0	; 59
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	08 95       	ret
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	08 95       	ret

00000a9c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	0f 92       	push	r0
     aa4:	0c b6       	in	r0, 0x3c	; 60
     aa6:	0f 92       	push	r0
     aa8:	0b b6       	in	r0, 0x3b	; 59
     aaa:	0f 92       	push	r0
     aac:	1f 92       	push	r1
     aae:	11 24       	eor	r1, r1
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
     aec:	a0 91 db 08 	lds	r26, 0x08DB
     af0:	b0 91 dc 08 	lds	r27, 0x08DC
     af4:	0d b6       	in	r0, 0x3d	; 61
     af6:	0d 92       	st	X+, r0
     af8:	0e b6       	in	r0, 0x3e	; 62
     afa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     afc:	61 d3       	rcall	.+1730   	; 0x11c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     afe:	a0 91 db 08 	lds	r26, 0x08DB
     b02:	b0 91 dc 08 	lds	r27, 0x08DC
     b06:	cd 91       	ld	r28, X+
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	dd 91       	ld	r29, X+
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	af 90       	pop	r10
     b3a:	9f 90       	pop	r9
     b3c:	8f 90       	pop	r8
     b3e:	7f 90       	pop	r7
     b40:	6f 90       	pop	r6
     b42:	5f 90       	pop	r5
     b44:	4f 90       	pop	r4
     b46:	3f 90       	pop	r3
     b48:	2f 90       	pop	r2
     b4a:	1f 90       	pop	r1
     b4c:	0f 90       	pop	r0
     b4e:	0c be       	out	0x3c, r0	; 60
     b50:	0f 90       	pop	r0
     b52:	0b be       	out	0x3b, r0	; 59
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b5a:	08 95       	ret

00000b5c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b5c:	0f 92       	push	r0
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	0c b6       	in	r0, 0x3c	; 60
     b66:	0f 92       	push	r0
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	1f 92       	push	r1
     b6e:	11 24       	eor	r1, r1
     b70:	2f 92       	push	r2
     b72:	3f 92       	push	r3
     b74:	4f 92       	push	r4
     b76:	5f 92       	push	r5
     b78:	6f 92       	push	r6
     b7a:	7f 92       	push	r7
     b7c:	8f 92       	push	r8
     b7e:	9f 92       	push	r9
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	a0 91 db 08 	lds	r26, 0x08DB
     bb0:	b0 91 dc 08 	lds	r27, 0x08DC
     bb4:	0d b6       	in	r0, 0x3d	; 61
     bb6:	0d 92       	st	X+, r0
     bb8:	0e b6       	in	r0, 0x3e	; 62
     bba:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     bbc:	9c d1       	rcall	.+824    	; 0xef6 <xTaskIncrementTick>
     bbe:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     bc0:	ff d2       	rcall	.+1534   	; 0x11c0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     bc2:	a0 91 db 08 	lds	r26, 0x08DB
     bc6:	b0 91 dc 08 	lds	r27, 0x08DC
     bca:	cd 91       	ld	r28, X+
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	dd 91       	ld	r29, X+
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	3f 90       	pop	r3
     c0c:	2f 90       	pop	r2
     c0e:	1f 90       	pop	r1
     c10:	0f 90       	pop	r0
     c12:	0c be       	out	0x3c, r0	; 60
     c14:	0f 90       	pop	r0
     c16:	0b be       	out	0x3b, r0	; 59
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c1e:	08 95       	ret

00000c20 <__vector_13>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	ISR (TIMER2_COMPA_vect, ISR_NAKED)
	{
		vPortYieldFromTick();
     c20:	9d df       	rcall	.-198    	; 0xb5c <vPortYieldFromTick>
		asm volatile ( "reti" );
     c22:	18 95       	reti

00000c24 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     c24:	e0 91 a3 08 	lds	r30, 0x08A3
     c28:	f0 91 a4 08 	lds	r31, 0x08A4
     c2c:	80 81       	ld	r24, Z
     c2e:	81 11       	cpse	r24, r1
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <prvResetNextTaskUnblockTime+0x14>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <prvResetNextTaskUnblockTime+0x2c>
     c38:	e0 91 a3 08 	lds	r30, 0x08A3
     c3c:	f0 91 a4 08 	lds	r31, 0x08A4
     c40:	05 80       	ldd	r0, Z+5	; 0x05
     c42:	f6 81       	ldd	r31, Z+6	; 0x06
     c44:	e0 2d       	mov	r30, r0
     c46:	06 80       	ldd	r0, Z+6	; 0x06
     c48:	f7 81       	ldd	r31, Z+7	; 0x07
     c4a:	e0 2d       	mov	r30, r0
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	90 93 09 02 	sts	0x0209, r25
     c54:	80 93 08 02 	sts	0x0208, r24
     c58:	08 95       	ret

00000c5a <prvAddCurrentTaskToDelayedList>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
     c60:	e0 91 db 08 	lds	r30, 0x08DB
     c64:	f0 91 dc 08 	lds	r31, 0x08DC
     c68:	93 83       	std	Z+3, r25	; 0x03
     c6a:	82 83       	std	Z+2, r24	; 0x02
     c6c:	80 91 8b 08 	lds	r24, 0x088B
     c70:	90 91 8c 08 	lds	r25, 0x088C
     c74:	60 91 db 08 	lds	r22, 0x08DB
     c78:	70 91 dc 08 	lds	r23, 0x08DC
     c7c:	c8 17       	cp	r28, r24
     c7e:	d9 07       	cpc	r29, r25
     c80:	48 f4       	brcc	.+18     	; 0xc94 <prvAddCurrentTaskToDelayedList+0x3a>
     c82:	80 91 a1 08 	lds	r24, 0x08A1
     c86:	90 91 a2 08 	lds	r25, 0x08A2
     c8a:	6e 5f       	subi	r22, 0xFE	; 254
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	3b cd       	rjmp	.-1418   	; 0x70a <vListInsert>
     c94:	80 91 a3 08 	lds	r24, 0x08A3
     c98:	90 91 a4 08 	lds	r25, 0x08A4
     c9c:	6e 5f       	subi	r22, 0xFE	; 254
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	34 dd       	rcall	.-1432   	; 0x70a <vListInsert>
     ca2:	80 91 08 02 	lds	r24, 0x0208
     ca6:	90 91 09 02 	lds	r25, 0x0209
     caa:	c8 17       	cp	r28, r24
     cac:	d9 07       	cpc	r29, r25
     cae:	20 f4       	brcc	.+8      	; 0xcb8 <prvAddCurrentTaskToDelayedList+0x5e>
     cb0:	d0 93 09 02 	sts	0x0209, r29
     cb4:	c0 93 08 02 	sts	0x0208, r28
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <xTaskGenericCreate>:
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	4c 01       	movw	r8, r24
     cde:	16 2f       	mov	r17, r22
     ce0:	57 2e       	mov	r5, r23
     ce2:	5a 01       	movw	r10, r20
     ce4:	39 01       	movw	r6, r18
     ce6:	81 e2       	ldi	r24, 0x21	; 33
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fb da       	rcall	.-2570   	; 0x2e2 <pvPortMalloc>
     cec:	ec 01       	movw	r28, r24
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <xTaskGenericCreate+0x36>
     cf2:	ba c0       	rjmp	.+372    	; 0xe68 <xTaskGenericCreate+0x1aa>
     cf4:	c1 14       	cp	r12, r1
     cf6:	d1 04       	cpc	r13, r1
     cf8:	19 f4       	brne	.+6      	; 0xd00 <xTaskGenericCreate+0x42>
     cfa:	c5 01       	movw	r24, r10
     cfc:	f2 da       	rcall	.-2588   	; 0x2e2 <pvPortMalloc>
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <xTaskGenericCreate+0x44>
     d00:	c6 01       	movw	r24, r12
     d02:	98 8f       	std	Y+24, r25	; 0x18
     d04:	8f 8b       	std	Y+23, r24	; 0x17
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	19 f4       	brne	.+6      	; 0xd10 <xTaskGenericCreate+0x52>
     d0a:	ce 01       	movw	r24, r28
     d0c:	1a db       	rcall	.-2508   	; 0x342 <vPortFree>
     d0e:	ac c0       	rjmp	.+344    	; 0xe68 <xTaskGenericCreate+0x1aa>
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	a2 1a       	sub	r10, r18
     d14:	b1 08       	sbc	r11, r1
     d16:	a8 0e       	add	r10, r24
     d18:	b9 1e       	adc	r11, r25
     d1a:	e1 2f       	mov	r30, r17
     d1c:	f5 2d       	mov	r31, r5
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	bf 01       	movw	r22, r30
     d24:	41 91       	ld	r20, Z+
     d26:	9e 01       	movw	r18, r28
     d28:	28 0f       	add	r18, r24
     d2a:	39 1f       	adc	r19, r25
     d2c:	d9 01       	movw	r26, r18
     d2e:	59 96       	adiw	r26, 0x19	; 25
     d30:	4c 93       	st	X, r20
     d32:	db 01       	movw	r26, r22
     d34:	2c 91       	ld	r18, X
     d36:	22 23       	and	r18, r18
     d38:	21 f0       	breq	.+8      	; 0xd42 <xTaskGenericCreate+0x84>
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	88 30       	cpi	r24, 0x08	; 8
     d3e:	91 05       	cpc	r25, r1
     d40:	81 f7       	brne	.-32     	; 0xd22 <xTaskGenericCreate+0x64>
     d42:	18 a2       	std	Y+32, r1	; 0x20
     d44:	10 2f       	mov	r17, r16
     d46:	04 30       	cpi	r16, 0x04	; 4
     d48:	08 f0       	brcs	.+2      	; 0xd4c <xTaskGenericCreate+0x8e>
     d4a:	13 e0       	ldi	r17, 0x03	; 3
     d4c:	1e 8b       	std	Y+22, r17	; 0x16
     d4e:	6e 01       	movw	r12, r28
     d50:	b2 e0       	ldi	r27, 0x02	; 2
     d52:	cb 0e       	add	r12, r27
     d54:	d1 1c       	adc	r13, r1
     d56:	c6 01       	movw	r24, r12
     d58:	b3 dc       	rcall	.-1690   	; 0x6c0 <vListInitialiseItem>
     d5a:	ce 01       	movw	r24, r28
     d5c:	0c 96       	adiw	r24, 0x0c	; 12
     d5e:	b0 dc       	rcall	.-1696   	; 0x6c0 <vListInitialiseItem>
     d60:	d9 87       	std	Y+9, r29	; 0x09
     d62:	c8 87       	std	Y+8, r28	; 0x08
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	81 1b       	sub	r24, r17
     d6a:	91 09       	sbc	r25, r1
     d6c:	9d 87       	std	Y+13, r25	; 0x0d
     d6e:	8c 87       	std	Y+12, r24	; 0x0c
     d70:	db 8b       	std	Y+19, r29	; 0x13
     d72:	ca 8b       	std	Y+18, r28	; 0x12
     d74:	a3 01       	movw	r20, r6
     d76:	b4 01       	movw	r22, r8
     d78:	c5 01       	movw	r24, r10
     d7a:	dd dd       	rcall	.-1094   	; 0x936 <pxPortInitialiseStack>
     d7c:	99 83       	std	Y+1, r25	; 0x01
     d7e:	88 83       	st	Y, r24
     d80:	e1 14       	cp	r14, r1
     d82:	f1 04       	cpc	r15, r1
     d84:	19 f0       	breq	.+6      	; 0xd8c <xTaskGenericCreate+0xce>
     d86:	f7 01       	movw	r30, r14
     d88:	d1 83       	std	Z+1, r29	; 0x01
     d8a:	c0 83       	st	Z, r28
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	0f 92       	push	r0
     d92:	80 91 8d 08 	lds	r24, 0x088D
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 8d 08 	sts	0x088D, r24
     d9c:	80 91 db 08 	lds	r24, 0x08DB
     da0:	90 91 dc 08 	lds	r25, 0x08DC
     da4:	89 2b       	or	r24, r25
     da6:	69 f5       	brne	.+90     	; 0xe02 <xTaskGenericCreate+0x144>
     da8:	d0 93 dc 08 	sts	0x08DC, r29
     dac:	c0 93 db 08 	sts	0x08DB, r28
     db0:	80 91 8d 08 	lds	r24, 0x088D
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a1 f5       	brne	.+104    	; 0xe20 <xTaskGenericCreate+0x162>
     db8:	87 eb       	ldi	r24, 0xB7	; 183
     dba:	98 e0       	ldi	r25, 0x08	; 8
     dbc:	73 dc       	rcall	.-1818   	; 0x6a4 <vListInitialise>
     dbe:	80 ec       	ldi	r24, 0xC0	; 192
     dc0:	98 e0       	ldi	r25, 0x08	; 8
     dc2:	70 dc       	rcall	.-1824   	; 0x6a4 <vListInitialise>
     dc4:	89 ec       	ldi	r24, 0xC9	; 201
     dc6:	98 e0       	ldi	r25, 0x08	; 8
     dc8:	6d dc       	rcall	.-1830   	; 0x6a4 <vListInitialise>
     dca:	82 ed       	ldi	r24, 0xD2	; 210
     dcc:	98 e0       	ldi	r25, 0x08	; 8
     dce:	6a dc       	rcall	.-1836   	; 0x6a4 <vListInitialise>
     dd0:	8e ea       	ldi	r24, 0xAE	; 174
     dd2:	98 e0       	ldi	r25, 0x08	; 8
     dd4:	67 dc       	rcall	.-1842   	; 0x6a4 <vListInitialise>
     dd6:	85 ea       	ldi	r24, 0xA5	; 165
     dd8:	98 e0       	ldi	r25, 0x08	; 8
     dda:	64 dc       	rcall	.-1848   	; 0x6a4 <vListInitialise>
     ddc:	88 e9       	ldi	r24, 0x98	; 152
     dde:	98 e0       	ldi	r25, 0x08	; 8
     de0:	61 dc       	rcall	.-1854   	; 0x6a4 <vListInitialise>
     de2:	8f e8       	ldi	r24, 0x8F	; 143
     de4:	98 e0       	ldi	r25, 0x08	; 8
     de6:	5e dc       	rcall	.-1860   	; 0x6a4 <vListInitialise>
     de8:	8e ea       	ldi	r24, 0xAE	; 174
     dea:	98 e0       	ldi	r25, 0x08	; 8
     dec:	90 93 a4 08 	sts	0x08A4, r25
     df0:	80 93 a3 08 	sts	0x08A3, r24
     df4:	85 ea       	ldi	r24, 0xA5	; 165
     df6:	98 e0       	ldi	r25, 0x08	; 8
     df8:	90 93 a2 08 	sts	0x08A2, r25
     dfc:	80 93 a1 08 	sts	0x08A1, r24
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <xTaskGenericCreate+0x162>
     e02:	80 91 89 08 	lds	r24, 0x0889
     e06:	81 11       	cpse	r24, r1
     e08:	0b c0       	rjmp	.+22     	; 0xe20 <xTaskGenericCreate+0x162>
     e0a:	e0 91 db 08 	lds	r30, 0x08DB
     e0e:	f0 91 dc 08 	lds	r31, 0x08DC
     e12:	86 89       	ldd	r24, Z+22	; 0x16
     e14:	08 17       	cp	r16, r24
     e16:	20 f0       	brcs	.+8      	; 0xe20 <xTaskGenericCreate+0x162>
     e18:	d0 93 dc 08 	sts	0x08DC, r29
     e1c:	c0 93 db 08 	sts	0x08DB, r28
     e20:	80 91 85 08 	lds	r24, 0x0885
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 85 08 	sts	0x0885, r24
     e2a:	8e 89       	ldd	r24, Y+22	; 0x16
     e2c:	90 91 8a 08 	lds	r25, 0x088A
     e30:	98 17       	cp	r25, r24
     e32:	10 f4       	brcc	.+4      	; 0xe38 <xTaskGenericCreate+0x17a>
     e34:	80 93 8a 08 	sts	0x088A, r24
     e38:	f9 e0       	ldi	r31, 0x09	; 9
     e3a:	8f 9f       	mul	r24, r31
     e3c:	c0 01       	movw	r24, r0
     e3e:	11 24       	eor	r1, r1
     e40:	b6 01       	movw	r22, r12
     e42:	89 54       	subi	r24, 0x49	; 73
     e44:	97 4f       	sbci	r25, 0xF7	; 247
     e46:	40 dc       	rcall	.-1920   	; 0x6c8 <vListInsertEnd>
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	80 91 89 08 	lds	r24, 0x0889
     e50:	88 23       	and	r24, r24
     e52:	41 f0       	breq	.+16     	; 0xe64 <xTaskGenericCreate+0x1a6>
     e54:	e0 91 db 08 	lds	r30, 0x08DB
     e58:	f0 91 dc 08 	lds	r31, 0x08DC
     e5c:	86 89       	ldd	r24, Z+22	; 0x16
     e5e:	80 17       	cp	r24, r16
     e60:	08 f4       	brcc	.+2      	; 0xe64 <xTaskGenericCreate+0x1a6>
     e62:	1c de       	rcall	.-968    	; 0xa9c <vPortYield>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <xTaskGenericCreate+0x1ac>
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	08 95       	ret

00000e8a <vTaskStartScheduler>:
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	a1 2c       	mov	r10, r1
     e9a:	b1 2c       	mov	r11, r1
     e9c:	c1 2c       	mov	r12, r1
     e9e:	d1 2c       	mov	r13, r1
     ea0:	e1 2c       	mov	r14, r1
     ea2:	f1 2c       	mov	r15, r1
     ea4:	00 e0       	ldi	r16, 0x00	; 0
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	45 e5       	ldi	r20, 0x55	; 85
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	63 e7       	ldi	r22, 0x73	; 115
     eb0:	72 e0       	ldi	r23, 0x02	; 2
     eb2:	82 eb       	ldi	r24, 0xB2	; 178
     eb4:	98 e0       	ldi	r25, 0x08	; 8
     eb6:	03 df       	rcall	.-506    	; 0xcbe <xTaskGenericCreate>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	79 f4       	brne	.+30     	; 0xeda <vTaskStartScheduler+0x50>
     ebc:	f8 94       	cli
     ebe:	80 93 89 08 	sts	0x0889, r24
     ec2:	10 92 8c 08 	sts	0x088C, r1
     ec6:	10 92 8b 08 	sts	0x088B, r1
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	bf 90       	pop	r11
     ed6:	af 90       	pop	r10
     ed8:	a0 cd       	rjmp	.-1216   	; 0xa1a <xPortStartScheduler>
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	08 95       	ret

00000eea <vTaskSuspendAll>:
     eea:	80 91 84 08 	lds	r24, 0x0884
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 84 08 	sts	0x0884, r24
     ef4:	08 95       	ret

00000ef6 <xTaskIncrementTick>:
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	80 91 84 08 	lds	r24, 0x0884
     f0a:	81 11       	cpse	r24, r1
     f0c:	8a c0       	rjmp	.+276    	; 0x1022 <xTaskIncrementTick+0x12c>
     f0e:	80 91 8b 08 	lds	r24, 0x088B
     f12:	90 91 8c 08 	lds	r25, 0x088C
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	90 93 8c 08 	sts	0x088C, r25
     f1c:	80 93 8b 08 	sts	0x088B, r24
     f20:	00 91 8b 08 	lds	r16, 0x088B
     f24:	10 91 8c 08 	lds	r17, 0x088C
     f28:	01 15       	cp	r16, r1
     f2a:	11 05       	cpc	r17, r1
     f2c:	b1 f4       	brne	.+44     	; 0xf5a <xTaskIncrementTick+0x64>
     f2e:	80 91 a3 08 	lds	r24, 0x08A3
     f32:	90 91 a4 08 	lds	r25, 0x08A4
     f36:	20 91 a1 08 	lds	r18, 0x08A1
     f3a:	30 91 a2 08 	lds	r19, 0x08A2
     f3e:	30 93 a4 08 	sts	0x08A4, r19
     f42:	20 93 a3 08 	sts	0x08A3, r18
     f46:	90 93 a2 08 	sts	0x08A2, r25
     f4a:	80 93 a1 08 	sts	0x08A1, r24
     f4e:	80 91 86 08 	lds	r24, 0x0886
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 86 08 	sts	0x0886, r24
     f58:	65 de       	rcall	.-822    	; 0xc24 <prvResetNextTaskUnblockTime>
     f5a:	80 91 08 02 	lds	r24, 0x0208
     f5e:	90 91 09 02 	lds	r25, 0x0209
     f62:	d1 2c       	mov	r13, r1
     f64:	08 17       	cp	r16, r24
     f66:	19 07       	cpc	r17, r25
     f68:	08 f4       	brcc	.+2      	; 0xf6c <xTaskIncrementTick+0x76>
     f6a:	4a c0       	rjmp	.+148    	; 0x1000 <xTaskIncrementTick+0x10a>
     f6c:	89 e0       	ldi	r24, 0x09	; 9
     f6e:	c8 2e       	mov	r12, r24
     f70:	e0 91 a3 08 	lds	r30, 0x08A3
     f74:	f0 91 a4 08 	lds	r31, 0x08A4
     f78:	80 81       	ld	r24, Z
     f7a:	81 11       	cpse	r24, r1
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <xTaskIncrementTick+0x96>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	90 93 09 02 	sts	0x0209, r25
     f86:	80 93 08 02 	sts	0x0208, r24
     f8a:	3a c0       	rjmp	.+116    	; 0x1000 <xTaskIncrementTick+0x10a>
     f8c:	e0 91 a3 08 	lds	r30, 0x08A3
     f90:	f0 91 a4 08 	lds	r31, 0x08A4
     f94:	05 80       	ldd	r0, Z+5	; 0x05
     f96:	f6 81       	ldd	r31, Z+6	; 0x06
     f98:	e0 2d       	mov	r30, r0
     f9a:	c6 81       	ldd	r28, Z+6	; 0x06
     f9c:	d7 81       	ldd	r29, Z+7	; 0x07
     f9e:	2a 81       	ldd	r18, Y+2	; 0x02
     fa0:	3b 81       	ldd	r19, Y+3	; 0x03
     fa2:	02 17       	cp	r16, r18
     fa4:	13 07       	cpc	r17, r19
     fa6:	28 f4       	brcc	.+10     	; 0xfb2 <xTaskIncrementTick+0xbc>
     fa8:	30 93 09 02 	sts	0x0209, r19
     fac:	20 93 08 02 	sts	0x0208, r18
     fb0:	27 c0       	rjmp	.+78     	; 0x1000 <xTaskIncrementTick+0x10a>
     fb2:	7e 01       	movw	r14, r28
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	e8 0e       	add	r14, r24
     fb8:	f1 1c       	adc	r15, r1
     fba:	c7 01       	movw	r24, r14
     fbc:	de db       	rcall	.-2116   	; 0x77a <uxListRemove>
     fbe:	2c 89       	ldd	r18, Y+20	; 0x14
     fc0:	3d 89       	ldd	r19, Y+21	; 0x15
     fc2:	23 2b       	or	r18, r19
     fc4:	19 f0       	breq	.+6      	; 0xfcc <xTaskIncrementTick+0xd6>
     fc6:	ce 01       	movw	r24, r28
     fc8:	0c 96       	adiw	r24, 0x0c	; 12
     fca:	d7 db       	rcall	.-2130   	; 0x77a <uxListRemove>
     fcc:	2e 89       	ldd	r18, Y+22	; 0x16
     fce:	80 91 8a 08 	lds	r24, 0x088A
     fd2:	82 17       	cp	r24, r18
     fd4:	10 f4       	brcc	.+4      	; 0xfda <xTaskIncrementTick+0xe4>
     fd6:	20 93 8a 08 	sts	0x088A, r18
     fda:	c2 9e       	mul	r12, r18
     fdc:	c0 01       	movw	r24, r0
     fde:	11 24       	eor	r1, r1
     fe0:	b7 01       	movw	r22, r14
     fe2:	89 54       	subi	r24, 0x49	; 73
     fe4:	97 4f       	sbci	r25, 0xF7	; 247
     fe6:	70 db       	rcall	.-2336   	; 0x6c8 <vListInsertEnd>
     fe8:	e0 91 db 08 	lds	r30, 0x08DB
     fec:	f0 91 dc 08 	lds	r31, 0x08DC
     ff0:	9e 89       	ldd	r25, Y+22	; 0x16
     ff2:	86 89       	ldd	r24, Z+22	; 0x16
     ff4:	98 17       	cp	r25, r24
     ff6:	08 f4       	brcc	.+2      	; 0xffa <xTaskIncrementTick+0x104>
     ff8:	bb cf       	rjmp	.-138    	; 0xf70 <xTaskIncrementTick+0x7a>
     ffa:	dd 24       	eor	r13, r13
     ffc:	d3 94       	inc	r13
     ffe:	b8 cf       	rjmp	.-144    	; 0xf70 <xTaskIncrementTick+0x7a>
    1000:	e0 91 db 08 	lds	r30, 0x08DB
    1004:	f0 91 dc 08 	lds	r31, 0x08DC
    1008:	e6 89       	ldd	r30, Z+22	; 0x16
    100a:	89 e0       	ldi	r24, 0x09	; 9
    100c:	e8 9f       	mul	r30, r24
    100e:	f0 01       	movw	r30, r0
    1010:	11 24       	eor	r1, r1
    1012:	e9 54       	subi	r30, 0x49	; 73
    1014:	f7 4f       	sbci	r31, 0xF7	; 247
    1016:	80 81       	ld	r24, Z
    1018:	82 30       	cpi	r24, 0x02	; 2
    101a:	48 f0       	brcs	.+18     	; 0x102e <xTaskIncrementTick+0x138>
    101c:	dd 24       	eor	r13, r13
    101e:	d3 94       	inc	r13
    1020:	06 c0       	rjmp	.+12     	; 0x102e <xTaskIncrementTick+0x138>
    1022:	80 91 88 08 	lds	r24, 0x0888
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 88 08 	sts	0x0888, r24
    102c:	d1 2c       	mov	r13, r1
    102e:	80 91 87 08 	lds	r24, 0x0887
    1032:	88 23       	and	r24, r24
    1034:	11 f0       	breq	.+4      	; 0x103a <xTaskIncrementTick+0x144>
    1036:	dd 24       	eor	r13, r13
    1038:	d3 94       	inc	r13
    103a:	8d 2d       	mov	r24, r13
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	08 95       	ret

0000104e <xTaskResumeAll>:
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	0f 92       	push	r0
    1060:	80 91 84 08 	lds	r24, 0x0884
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	80 93 84 08 	sts	0x0884, r24
    106a:	80 91 84 08 	lds	r24, 0x0884
    106e:	88 23       	and	r24, r24
    1070:	11 f0       	breq	.+4      	; 0x1076 <xTaskResumeAll+0x28>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	4e c0       	rjmp	.+156    	; 0x1112 <xTaskResumeAll+0xc4>
    1076:	80 91 8d 08 	lds	r24, 0x088D
    107a:	88 23       	and	r24, r24
    107c:	d1 f3       	breq	.-12     	; 0x1072 <xTaskResumeAll+0x24>
    107e:	99 e0       	ldi	r25, 0x09	; 9
    1080:	f9 2e       	mov	r15, r25
    1082:	ee 24       	eor	r14, r14
    1084:	e3 94       	inc	r14
    1086:	80 91 98 08 	lds	r24, 0x0898
    108a:	88 23       	and	r24, r24
    108c:	39 f1       	breq	.+78     	; 0x10dc <xTaskResumeAll+0x8e>
    108e:	e0 91 9d 08 	lds	r30, 0x089D
    1092:	f0 91 9e 08 	lds	r31, 0x089E
    1096:	c6 81       	ldd	r28, Z+6	; 0x06
    1098:	d7 81       	ldd	r29, Z+7	; 0x07
    109a:	ce 01       	movw	r24, r28
    109c:	0c 96       	adiw	r24, 0x0c	; 12
    109e:	6d db       	rcall	.-2342   	; 0x77a <uxListRemove>
    10a0:	8e 01       	movw	r16, r28
    10a2:	0e 5f       	subi	r16, 0xFE	; 254
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	c8 01       	movw	r24, r16
    10a8:	68 db       	rcall	.-2352   	; 0x77a <uxListRemove>
    10aa:	8e 89       	ldd	r24, Y+22	; 0x16
    10ac:	90 91 8a 08 	lds	r25, 0x088A
    10b0:	98 17       	cp	r25, r24
    10b2:	10 f4       	brcc	.+4      	; 0x10b8 <xTaskResumeAll+0x6a>
    10b4:	80 93 8a 08 	sts	0x088A, r24
    10b8:	f8 9e       	mul	r15, r24
    10ba:	c0 01       	movw	r24, r0
    10bc:	11 24       	eor	r1, r1
    10be:	b8 01       	movw	r22, r16
    10c0:	89 54       	subi	r24, 0x49	; 73
    10c2:	97 4f       	sbci	r25, 0xF7	; 247
    10c4:	01 db       	rcall	.-2558   	; 0x6c8 <vListInsertEnd>
    10c6:	e0 91 db 08 	lds	r30, 0x08DB
    10ca:	f0 91 dc 08 	lds	r31, 0x08DC
    10ce:	9e 89       	ldd	r25, Y+22	; 0x16
    10d0:	86 89       	ldd	r24, Z+22	; 0x16
    10d2:	98 17       	cp	r25, r24
    10d4:	c0 f2       	brcs	.-80     	; 0x1086 <xTaskResumeAll+0x38>
    10d6:	e0 92 87 08 	sts	0x0887, r14
    10da:	d5 cf       	rjmp	.-86     	; 0x1086 <xTaskResumeAll+0x38>
    10dc:	80 91 88 08 	lds	r24, 0x0888
    10e0:	81 11       	cpse	r24, r1
    10e2:	08 c0       	rjmp	.+16     	; 0x10f4 <xTaskResumeAll+0xa6>
    10e4:	80 91 87 08 	lds	r24, 0x0887
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <xTaskResumeAll+0xa0>
    10ec:	c2 cf       	rjmp	.-124    	; 0x1072 <xTaskResumeAll+0x24>
    10ee:	d6 dc       	rcall	.-1620   	; 0xa9c <vPortYield>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <xTaskResumeAll+0xc4>
    10f4:	c1 e0       	ldi	r28, 0x01	; 1
    10f6:	80 91 88 08 	lds	r24, 0x0888
    10fa:	88 23       	and	r24, r24
    10fc:	99 f3       	breq	.-26     	; 0x10e4 <xTaskResumeAll+0x96>
    10fe:	fb de       	rcall	.-522    	; 0xef6 <xTaskIncrementTick>
    1100:	81 11       	cpse	r24, r1
    1102:	c0 93 87 08 	sts	0x0887, r28
    1106:	80 91 88 08 	lds	r24, 0x0888
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	80 93 88 08 	sts	0x0888, r24
    1110:	f2 cf       	rjmp	.-28     	; 0x10f6 <xTaskResumeAll+0xa8>
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	08 95       	ret

00001124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	8c 01       	movw	r16, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	11 f4       	brne	.+4      	; 0x1136 <vTaskDelay+0x12>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
    1132:	b4 dc       	rcall	.-1688   	; 0xa9c <vPortYield>
    1134:	12 c0       	rjmp	.+36     	; 0x115a <vTaskDelay+0x36>

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1136:	d9 de       	rcall	.-590    	; 0xeea <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1138:	c0 91 8b 08 	lds	r28, 0x088B
    113c:	d0 91 8c 08 	lds	r29, 0x088C
    1140:	c0 0f       	add	r28, r16
    1142:	d1 1f       	adc	r29, r17

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1144:	80 91 db 08 	lds	r24, 0x08DB
    1148:	90 91 dc 08 	lds	r25, 0x08DC
    114c:	02 96       	adiw	r24, 0x02	; 2
    114e:	15 db       	rcall	.-2518   	; 0x77a <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1150:	ce 01       	movw	r24, r28
    1152:	83 dd       	rcall	.-1274   	; 0xc5a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1154:	7c df       	rcall	.-264    	; 0x104e <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1156:	88 23       	and	r24, r24
    1158:	61 f3       	breq	.-40     	; 0x1132 <vTaskDelay+0xe>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1164:	80 91 8e 08 	lds	r24, 0x088E
    1168:	88 23       	and	r24, r24
    116a:	21 f1       	breq	.+72     	; 0x11b4 <prvIdleTask+0x50>
		{
			vTaskSuspendAll();
    116c:	be de       	rcall	.-644    	; 0xeea <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    116e:	c0 91 8f 08 	lds	r28, 0x088F
			}
			( void ) xTaskResumeAll();
    1172:	6d df       	rcall	.-294    	; 0x104e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1174:	cc 23       	and	r28, r28
    1176:	b1 f3       	breq	.-20     	; 0x1164 <prvIdleTask>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    117e:	e0 91 94 08 	lds	r30, 0x0894
    1182:	f0 91 95 08 	lds	r31, 0x0895
    1186:	c6 81       	ldd	r28, Z+6	; 0x06
    1188:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    118a:	ce 01       	movw	r24, r28
    118c:	02 96       	adiw	r24, 0x02	; 2
    118e:	f5 da       	rcall	.-2582   	; 0x77a <uxListRemove>
					--uxCurrentNumberOfTasks;
    1190:	80 91 8d 08 	lds	r24, 0x088D
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	80 93 8d 08 	sts	0x088D, r24
					--uxTasksDeleted;
    119a:	80 91 8e 08 	lds	r24, 0x088E
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	80 93 8e 08 	sts	0x088E, r24
				}
				taskEXIT_CRITICAL();
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    11a8:	8f 89       	ldd	r24, Y+23	; 0x17
    11aa:	98 8d       	ldd	r25, Y+24	; 0x18
    11ac:	ca d8       	rcall	.-3692   	; 0x342 <vPortFree>
		vPortFree( pxTCB );
    11ae:	ce 01       	movw	r24, r28
    11b0:	c8 d8       	rcall	.-3696   	; 0x342 <vPortFree>
    11b2:	d8 cf       	rjmp	.-80     	; 0x1164 <prvIdleTask>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    11b4:	80 91 b7 08 	lds	r24, 0x08B7
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	a0 f2       	brcs	.-88     	; 0x1164 <prvIdleTask>
			{
				taskYIELD();
    11bc:	6f dc       	rcall	.-1826   	; 0xa9c <vPortYield>
    11be:	d2 cf       	rjmp	.-92     	; 0x1164 <prvIdleTask>

000011c0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    11c0:	80 91 84 08 	lds	r24, 0x0884
    11c4:	88 23       	and	r24, r24
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 87 08 	sts	0x0887, r24
    11ce:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    11d0:	10 92 87 08 	sts	0x0887, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    11d4:	99 e0       	ldi	r25, 0x09	; 9
    11d6:	e0 91 8a 08 	lds	r30, 0x088A
    11da:	9e 9f       	mul	r25, r30
    11dc:	f0 01       	movw	r30, r0
    11de:	11 24       	eor	r1, r1
    11e0:	e9 54       	subi	r30, 0x49	; 73
    11e2:	f7 4f       	sbci	r31, 0xF7	; 247
    11e4:	80 81       	ld	r24, Z
    11e6:	81 11       	cpse	r24, r1
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vTaskSwitchContext+0x36>
    11ea:	80 91 8a 08 	lds	r24, 0x088A
    11ee:	81 50       	subi	r24, 0x01	; 1
    11f0:	80 93 8a 08 	sts	0x088A, r24
    11f4:	f0 cf       	rjmp	.-32     	; 0x11d6 <vTaskSwitchContext+0x16>
    11f6:	e0 91 8a 08 	lds	r30, 0x088A
    11fa:	89 e0       	ldi	r24, 0x09	; 9
    11fc:	e8 9f       	mul	r30, r24
    11fe:	f0 01       	movw	r30, r0
    1200:	11 24       	eor	r1, r1
    1202:	e9 54       	subi	r30, 0x49	; 73
    1204:	f7 4f       	sbci	r31, 0xF7	; 247
    1206:	a1 81       	ldd	r26, Z+1	; 0x01
    1208:	b2 81       	ldd	r27, Z+2	; 0x02
    120a:	12 96       	adiw	r26, 0x02	; 2
    120c:	0d 90       	ld	r0, X+
    120e:	bc 91       	ld	r27, X
    1210:	a0 2d       	mov	r26, r0
    1212:	b2 83       	std	Z+2, r27	; 0x02
    1214:	a1 83       	std	Z+1, r26	; 0x01
    1216:	cf 01       	movw	r24, r30
    1218:	03 96       	adiw	r24, 0x03	; 3
    121a:	a8 17       	cp	r26, r24
    121c:	b9 07       	cpc	r27, r25
    121e:	31 f4       	brne	.+12     	; 0x122c <vTaskSwitchContext+0x6c>
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	13 97       	sbiw	r26, 0x03	; 3
    1228:	92 83       	std	Z+2, r25	; 0x02
    122a:	81 83       	std	Z+1, r24	; 0x01
    122c:	01 80       	ldd	r0, Z+1	; 0x01
    122e:	f2 81       	ldd	r31, Z+2	; 0x02
    1230:	e0 2d       	mov	r30, r0
    1232:	86 81       	ldd	r24, Z+6	; 0x06
    1234:	97 81       	ldd	r25, Z+7	; 0x07
    1236:	90 93 dc 08 	sts	0x08DC, r25
    123a:	80 93 db 08 	sts	0x08DB, r24
    123e:	08 95       	ret

00001240 <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1240:	41 32       	cpi	r20, 0x21	; 33
    1242:	08 f0       	brcs	.+2      	; 0x1246 <twi_readFrom+0x6>
    1244:	3f c0       	rjmp	.+126    	; 0x12c4 <twi_readFrom+0x84>
    1246:	90 91 4a 09 	lds	r25, 0x094A
    124a:	91 11       	cpse	r25, r1
    124c:	fc cf       	rjmp	.-8      	; 0x1246 <twi_readFrom+0x6>
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	90 93 4a 09 	sts	0x094A, r25
    1254:	20 93 48 09 	sts	0x0948, r18
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	20 93 dd 08 	sts	0x08DD, r18
    125e:	10 92 22 09 	sts	0x0922, r1
    1262:	24 0f       	add	r18, r20
    1264:	20 93 21 09 	sts	0x0921, r18
    1268:	90 93 49 09 	sts	0x0949, r25
    126c:	90 91 49 09 	lds	r25, 0x0949
    1270:	88 0f       	add	r24, r24
    1272:	89 2b       	or	r24, r25
    1274:	80 93 49 09 	sts	0x0949, r24
    1278:	80 91 47 09 	lds	r24, 0x0947
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	41 f4       	brne	.+16     	; 0x1290 <twi_readFrom+0x50>
    1280:	10 92 47 09 	sts	0x0947, r1
    1284:	80 91 49 09 	lds	r24, 0x0949
    1288:	80 93 bb 00 	sts	0x00BB, r24
    128c:	85 ec       	ldi	r24, 0xC5	; 197
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <twi_readFrom+0x52>
    1290:	85 ee       	ldi	r24, 0xE5	; 229
    1292:	80 93 bc 00 	sts	0x00BC, r24
    1296:	80 91 4a 09 	lds	r24, 0x094A
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	e1 f3       	breq	.-8      	; 0x1296 <twi_readFrom+0x56>
    129e:	80 91 22 09 	lds	r24, 0x0922
    12a2:	84 17       	cp	r24, r20
    12a4:	10 f4       	brcc	.+4      	; 0x12aa <twi_readFrom+0x6a>
    12a6:	40 91 22 09 	lds	r20, 0x0922
    12aa:	23 e2       	ldi	r18, 0x23	; 35
    12ac:	39 e0       	ldi	r19, 0x09	; 9
    12ae:	fb 01       	movw	r30, r22
    12b0:	d9 01       	movw	r26, r18
    12b2:	8a 2f       	mov	r24, r26
    12b4:	82 1b       	sub	r24, r18
    12b6:	84 17       	cp	r24, r20
    12b8:	18 f4       	brcc	.+6      	; 0x12c0 <twi_readFrom+0x80>
    12ba:	8d 91       	ld	r24, X+
    12bc:	81 93       	st	Z+, r24
    12be:	f9 cf       	rjmp	.-14     	; 0x12b2 <twi_readFrom+0x72>
    12c0:	84 2f       	mov	r24, r20
    12c2:	08 95       	ret
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <twi_writeTo>:
    12c8:	0f 93       	push	r16
    12ca:	41 32       	cpi	r20, 0x21	; 33
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <twi_writeTo+0x8>
    12ce:	46 c0       	rjmp	.+140    	; 0x135c <twi_writeTo+0x94>
    12d0:	90 91 4a 09 	lds	r25, 0x094A
    12d4:	91 11       	cpse	r25, r1
    12d6:	fc cf       	rjmp	.-8      	; 0x12d0 <twi_writeTo+0x8>
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	90 93 4a 09 	sts	0x094A, r25
    12de:	00 93 48 09 	sts	0x0948, r16
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	90 93 dd 08 	sts	0x08DD, r25
    12e8:	10 92 22 09 	sts	0x0922, r1
    12ec:	40 93 21 09 	sts	0x0921, r20
    12f0:	fb 01       	movw	r30, r22
    12f2:	63 e2       	ldi	r22, 0x23	; 35
    12f4:	79 e0       	ldi	r23, 0x09	; 9
    12f6:	db 01       	movw	r26, r22
    12f8:	9a 2f       	mov	r25, r26
    12fa:	96 1b       	sub	r25, r22
    12fc:	94 17       	cp	r25, r20
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <twi_writeTo+0x3e>
    1300:	91 91       	ld	r25, Z+
    1302:	9d 93       	st	X+, r25
    1304:	f9 cf       	rjmp	.-14     	; 0x12f8 <twi_writeTo+0x30>
    1306:	10 92 49 09 	sts	0x0949, r1
    130a:	90 91 49 09 	lds	r25, 0x0949
    130e:	88 0f       	add	r24, r24
    1310:	89 2b       	or	r24, r25
    1312:	80 93 49 09 	sts	0x0949, r24
    1316:	80 91 47 09 	lds	r24, 0x0947
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	41 f4       	brne	.+16     	; 0x132e <twi_writeTo+0x66>
    131e:	10 92 47 09 	sts	0x0947, r1
    1322:	80 91 49 09 	lds	r24, 0x0949
    1326:	80 93 bb 00 	sts	0x00BB, r24
    132a:	85 ec       	ldi	r24, 0xC5	; 197
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <twi_writeTo+0x68>
    132e:	85 ee       	ldi	r24, 0xE5	; 229
    1330:	80 93 bc 00 	sts	0x00BC, r24
    1334:	22 23       	and	r18, r18
    1336:	21 f0       	breq	.+8      	; 0x1340 <twi_writeTo+0x78>
    1338:	80 91 4a 09 	lds	r24, 0x094A
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	e1 f3       	breq	.-8      	; 0x1338 <twi_writeTo+0x70>
    1340:	80 91 dd 08 	lds	r24, 0x08DD
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	61 f0       	breq	.+24     	; 0x1360 <twi_writeTo+0x98>
    1348:	80 91 dd 08 	lds	r24, 0x08DD
    134c:	80 32       	cpi	r24, 0x20	; 32
    134e:	51 f0       	breq	.+20     	; 0x1364 <twi_writeTo+0x9c>
    1350:	80 91 dd 08 	lds	r24, 0x08DD
    1354:	80 33       	cpi	r24, 0x30	; 48
    1356:	41 f4       	brne	.+16     	; 0x1368 <twi_writeTo+0xa0>
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	07 c0       	rjmp	.+14     	; 0x136a <twi_writeTo+0xa2>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	05 c0       	rjmp	.+10     	; 0x136a <twi_writeTo+0xa2>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	03 c0       	rjmp	.+6      	; 0x136a <twi_writeTo+0xa2>
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	01 c0       	rjmp	.+2      	; 0x136a <twi_writeTo+0xa2>
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <twi_transmit>:
    136e:	61 32       	cpi	r22, 0x21	; 33
    1370:	98 f4       	brcc	.+38     	; 0x1398 <twi_transmit+0x2a>
    1372:	20 91 4a 09 	lds	r18, 0x094A
    1376:	24 30       	cpi	r18, 0x04	; 4
    1378:	89 f4       	brne	.+34     	; 0x139c <twi_transmit+0x2e>
    137a:	60 93 ff 08 	sts	0x08FF, r22
    137e:	fc 01       	movw	r30, r24
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	99 e0       	ldi	r25, 0x09	; 9
    1384:	dc 01       	movw	r26, r24
    1386:	2a 2f       	mov	r18, r26
    1388:	28 1b       	sub	r18, r24
    138a:	26 17       	cp	r18, r22
    138c:	18 f4       	brcc	.+6      	; 0x1394 <twi_transmit+0x26>
    138e:	21 91       	ld	r18, Z+
    1390:	2d 93       	st	X+, r18
    1392:	f9 cf       	rjmp	.-14     	; 0x1386 <twi_transmit+0x18>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	08 95       	ret
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	08 95       	ret
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	08 95       	ret

000013a0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    13a0:	85 ed       	ldi	r24, 0xD5	; 213
    13a2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    13a6:	80 91 bc 00 	lds	r24, 0x00BC
    13aa:	84 fd       	sbrc	r24, 4
    13ac:	fc cf       	rjmp	.-8      	; 0x13a6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    13ae:	10 92 4a 09 	sts	0x094A, r1
    13b2:	08 95       	ret

000013b4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    13b4:	85 ec       	ldi	r24, 0xC5	; 197
    13b6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    13ba:	10 92 4a 09 	sts	0x094A, r1
    13be:	08 95       	ret

000013c0 <__vector_39>:
}

ISR(TWI_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	0b b6       	in	r0, 0x3b	; 59
    13cc:	0f 92       	push	r0
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
  switch(TW_STATUS){
    13e6:	80 91 b9 00 	lds	r24, 0x00B9
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	80 36       	cpi	r24, 0x60	; 96
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <__vector_39+0x32>
    13f0:	9c c0       	rjmp	.+312    	; 0x152a <__vector_39+0x16a>
    13f2:	68 f5       	brcc	.+90     	; 0x144e <__vector_39+0x8e>
    13f4:	88 32       	cpi	r24, 0x28	; 40
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__vector_39+0x3a>
    13f8:	5b c0       	rjmp	.+182    	; 0x14b0 <__vector_39+0xf0>
    13fa:	90 f4       	brcc	.+36     	; 0x1420 <__vector_39+0x60>
    13fc:	80 31       	cpi	r24, 0x10	; 16
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__vector_39+0x42>
    1400:	54 c0       	rjmp	.+168    	; 0x14aa <__vector_39+0xea>
    1402:	38 f4       	brcc	.+14     	; 0x1412 <__vector_39+0x52>
    1404:	88 23       	and	r24, r24
    1406:	09 f4       	brne	.+2      	; 0x140a <__vector_39+0x4a>
    1408:	f3 c0       	rjmp	.+486    	; 0x15f0 <__vector_39+0x230>
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	09 f4       	brne	.+2      	; 0x1410 <__vector_39+0x50>
    140e:	4d c0       	rjmp	.+154    	; 0x14aa <__vector_39+0xea>
    1410:	f2 c0       	rjmp	.+484    	; 0x15f6 <__vector_39+0x236>
    1412:	88 31       	cpi	r24, 0x18	; 24
    1414:	09 f4       	brne	.+2      	; 0x1418 <__vector_39+0x58>
    1416:	4c c0       	rjmp	.+152    	; 0x14b0 <__vector_39+0xf0>
    1418:	80 32       	cpi	r24, 0x20	; 32
    141a:	09 f4       	brne	.+2      	; 0x141e <__vector_39+0x5e>
    141c:	5d c0       	rjmp	.+186    	; 0x14d8 <__vector_39+0x118>
    141e:	eb c0       	rjmp	.+470    	; 0x15f6 <__vector_39+0x236>
    1420:	80 34       	cpi	r24, 0x40	; 64
    1422:	09 f4       	brne	.+2      	; 0x1426 <__vector_39+0x66>
    1424:	68 c0       	rjmp	.+208    	; 0x14f6 <__vector_39+0x136>
    1426:	48 f4       	brcc	.+18     	; 0x143a <__vector_39+0x7a>
    1428:	80 33       	cpi	r24, 0x30	; 48
    142a:	09 f4       	brne	.+2      	; 0x142e <__vector_39+0x6e>
    142c:	55 c0       	rjmp	.+170    	; 0x14d8 <__vector_39+0x118>
    142e:	88 33       	cpi	r24, 0x38	; 56
    1430:	09 f0       	breq	.+2      	; 0x1434 <__vector_39+0x74>
    1432:	e1 c0       	rjmp	.+450    	; 0x15f6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1434:	80 93 dd 08 	sts	0x08DD, r24
    1438:	a7 c0       	rjmp	.+334    	; 0x1588 <__vector_39+0x1c8>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    143a:	80 35       	cpi	r24, 0x50	; 80
    143c:	09 f4       	brne	.+2      	; 0x1440 <__vector_39+0x80>
    143e:	4f c0       	rjmp	.+158    	; 0x14de <__vector_39+0x11e>
    1440:	88 35       	cpi	r24, 0x58	; 88
    1442:	09 f4       	brne	.+2      	; 0x1446 <__vector_39+0x86>
    1444:	5d c0       	rjmp	.+186    	; 0x1500 <__vector_39+0x140>
    1446:	88 34       	cpi	r24, 0x48	; 72
    1448:	09 f0       	breq	.+2      	; 0x144c <__vector_39+0x8c>
    144a:	d5 c0       	rjmp	.+426    	; 0x15f6 <__vector_39+0x236>
    144c:	d3 c0       	rjmp	.+422    	; 0x15f4 <__vector_39+0x234>
    144e:	88 39       	cpi	r24, 0x98	; 152
    1450:	09 f4       	brne	.+2      	; 0x1454 <__vector_39+0x94>
    1452:	c4 c0       	rjmp	.+392    	; 0x15dc <__vector_39+0x21c>
    1454:	a8 f4       	brcc	.+42     	; 0x1480 <__vector_39+0xc0>
    1456:	88 37       	cpi	r24, 0x78	; 120
    1458:	09 f4       	brne	.+2      	; 0x145c <__vector_39+0x9c>
    145a:	67 c0       	rjmp	.+206    	; 0x152a <__vector_39+0x16a>
    145c:	38 f4       	brcc	.+14     	; 0x146c <__vector_39+0xac>
    145e:	88 36       	cpi	r24, 0x68	; 104
    1460:	09 f4       	brne	.+2      	; 0x1464 <__vector_39+0xa4>
    1462:	63 c0       	rjmp	.+198    	; 0x152a <__vector_39+0x16a>
    1464:	80 37       	cpi	r24, 0x70	; 112
    1466:	09 f4       	brne	.+2      	; 0x146a <__vector_39+0xaa>
    1468:	60 c0       	rjmp	.+192    	; 0x152a <__vector_39+0x16a>
    146a:	c5 c0       	rjmp	.+394    	; 0x15f6 <__vector_39+0x236>
    146c:	88 38       	cpi	r24, 0x88	; 136
    146e:	09 f4       	brne	.+2      	; 0x1472 <__vector_39+0xb2>
    1470:	b5 c0       	rjmp	.+362    	; 0x15dc <__vector_39+0x21c>
    1472:	80 39       	cpi	r24, 0x90	; 144
    1474:	09 f4       	brne	.+2      	; 0x1478 <__vector_39+0xb8>
    1476:	5f c0       	rjmp	.+190    	; 0x1536 <__vector_39+0x176>
    1478:	80 38       	cpi	r24, 0x80	; 128
    147a:	09 f0       	breq	.+2      	; 0x147e <__vector_39+0xbe>
    147c:	bc c0       	rjmp	.+376    	; 0x15f6 <__vector_39+0x236>
    147e:	5b c0       	rjmp	.+182    	; 0x1536 <__vector_39+0x176>
    1480:	80 3b       	cpi	r24, 0xB0	; 176
    1482:	09 f4       	brne	.+2      	; 0x1486 <__vector_39+0xc6>
    1484:	83 c0       	rjmp	.+262    	; 0x158c <__vector_39+0x1cc>
    1486:	38 f4       	brcc	.+14     	; 0x1496 <__vector_39+0xd6>
    1488:	80 3a       	cpi	r24, 0xA0	; 160
    148a:	09 f4       	brne	.+2      	; 0x148e <__vector_39+0xce>
    148c:	66 c0       	rjmp	.+204    	; 0x155a <__vector_39+0x19a>
    148e:	88 3a       	cpi	r24, 0xA8	; 168
    1490:	09 f4       	brne	.+2      	; 0x1494 <__vector_39+0xd4>
    1492:	7c c0       	rjmp	.+248    	; 0x158c <__vector_39+0x1cc>
    1494:	b0 c0       	rjmp	.+352    	; 0x15f6 <__vector_39+0x236>
    1496:	80 3c       	cpi	r24, 0xC0	; 192
    1498:	09 f4       	brne	.+2      	; 0x149c <__vector_39+0xdc>
    149a:	a4 c0       	rjmp	.+328    	; 0x15e4 <__vector_39+0x224>
    149c:	88 3c       	cpi	r24, 0xC8	; 200
    149e:	09 f4       	brne	.+2      	; 0x14a2 <__vector_39+0xe2>
    14a0:	a1 c0       	rjmp	.+322    	; 0x15e4 <__vector_39+0x224>
    14a2:	88 3b       	cpi	r24, 0xB8	; 184
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <__vector_39+0xe8>
    14a6:	87 c0       	rjmp	.+270    	; 0x15b6 <__vector_39+0x1f6>
    14a8:	a6 c0       	rjmp	.+332    	; 0x15f6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    14aa:	80 91 49 09 	lds	r24, 0x0949
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <__vector_39+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    14b0:	90 91 22 09 	lds	r25, 0x0922
    14b4:	80 91 21 09 	lds	r24, 0x0921
    14b8:	98 17       	cp	r25, r24
    14ba:	70 f5       	brcc	.+92     	; 0x1518 <__vector_39+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    14bc:	e0 91 22 09 	lds	r30, 0x0922
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	8e 0f       	add	r24, r30
    14c4:	80 93 22 09 	sts	0x0922, r24
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ed 5d       	subi	r30, 0xDD	; 221
    14cc:	f6 4f       	sbci	r31, 0xF6	; 246
    14ce:	80 81       	ld	r24, Z
    14d0:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    14d4:	85 ec       	ldi	r24, 0xC5	; 197
    14d6:	83 c0       	rjmp	.+262    	; 0x15de <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    14d8:	80 93 dd 08 	sts	0x08DD, r24
    14dc:	8b c0       	rjmp	.+278    	; 0x15f4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    14de:	e0 91 22 09 	lds	r30, 0x0922
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	8e 0f       	add	r24, r30
    14e6:	80 93 22 09 	sts	0x0922, r24
    14ea:	80 91 bb 00 	lds	r24, 0x00BB
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	ed 5d       	subi	r30, 0xDD	; 221
    14f2:	f6 4f       	sbci	r31, 0xF6	; 246
    14f4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    14f6:	90 91 22 09 	lds	r25, 0x0922
    14fa:	80 91 21 09 	lds	r24, 0x0921
    14fe:	6b c0       	rjmp	.+214    	; 0x15d6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1500:	e0 91 22 09 	lds	r30, 0x0922
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	8e 0f       	add	r24, r30
    1508:	80 93 22 09 	sts	0x0922, r24
    150c:	80 91 bb 00 	lds	r24, 0x00BB
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	ed 5d       	subi	r30, 0xDD	; 221
    1514:	f6 4f       	sbci	r31, 0xF6	; 246
    1516:	80 83       	st	Z, r24
	if (twi_sendStop)
    1518:	80 91 48 09 	lds	r24, 0x0948
    151c:	81 11       	cpse	r24, r1
    151e:	6a c0       	rjmp	.+212    	; 0x15f4 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 47 09 	sts	0x0947, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1526:	84 ea       	ldi	r24, 0xA4	; 164
    1528:	5e c0       	rjmp	.+188    	; 0x15e6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	80 93 4a 09 	sts	0x094A, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1530:	10 92 de 08 	sts	0x08DE, r1
    1534:	cf cf       	rjmp	.-98     	; 0x14d4 <__vector_39+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1536:	80 91 de 08 	lds	r24, 0x08DE
    153a:	80 32       	cpi	r24, 0x20	; 32
    153c:	08 f0       	brcs	.+2      	; 0x1540 <__vector_39+0x180>
    153e:	4e c0       	rjmp	.+156    	; 0x15dc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1540:	e0 91 de 08 	lds	r30, 0x08DE
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	8e 0f       	add	r24, r30
    1548:	80 93 de 08 	sts	0x08DE, r24
    154c:	80 91 bb 00 	lds	r24, 0x00BB
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	e1 52       	subi	r30, 0x21	; 33
    1554:	f7 4f       	sbci	r31, 0xF7	; 247
    1556:	80 83       	st	Z, r24
    1558:	bd cf       	rjmp	.-134    	; 0x14d4 <__vector_39+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    155a:	80 91 de 08 	lds	r24, 0x08DE
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	30 f4       	brcc	.+12     	; 0x156e <__vector_39+0x1ae>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1562:	e0 91 de 08 	lds	r30, 0x08DE
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	e1 52       	subi	r30, 0x21	; 33
    156a:	f7 4f       	sbci	r31, 0xF7	; 247
    156c:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    156e:	18 df       	rcall	.-464    	; 0x13a0 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1570:	60 91 de 08 	lds	r22, 0x08DE
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	e0 91 43 09 	lds	r30, 0x0943
    157a:	f0 91 44 09 	lds	r31, 0x0944
    157e:	8f ed       	ldi	r24, 0xDF	; 223
    1580:	98 e0       	ldi	r25, 0x08	; 8
    1582:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1584:	10 92 de 08 	sts	0x08DE, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1588:	15 df       	rcall	.-470    	; 0x13b4 <twi_releaseBus>
      break;
    158a:	35 c0       	rjmp	.+106    	; 0x15f6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	80 93 4a 09 	sts	0x094A, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1592:	10 92 00 09 	sts	0x0900, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1596:	10 92 ff 08 	sts	0x08FF, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    159a:	e0 91 45 09 	lds	r30, 0x0945
    159e:	f0 91 46 09 	lds	r31, 0x0946
    15a2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    15a4:	80 91 ff 08 	lds	r24, 0x08FF
    15a8:	81 11       	cpse	r24, r1
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 ff 08 	sts	0x08FF, r24
        twi_txBuffer[0] = 0x00;
    15b2:	10 92 01 09 	sts	0x0901, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    15b6:	e0 91 00 09 	lds	r30, 0x0900
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	8e 0f       	add	r24, r30
    15be:	80 93 00 09 	sts	0x0900, r24
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ef 5f       	subi	r30, 0xFF	; 255
    15c6:	f6 4f       	sbci	r31, 0xF6	; 246
    15c8:	80 81       	ld	r24, Z
    15ca:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15ce:	90 91 00 09 	lds	r25, 0x0900
    15d2:	80 91 ff 08 	lds	r24, 0x08FF
    15d6:	98 17       	cp	r25, r24
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <__vector_39+0x21c>
    15da:	7c cf       	rjmp	.-264    	; 0x14d4 <__vector_39+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15dc:	85 e8       	ldi	r24, 0x85	; 133
    15de:	80 93 bc 00 	sts	0x00BC, r24
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15e4:	85 ec       	ldi	r24, 0xC5	; 197
    15e6:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    15ea:	10 92 4a 09 	sts	0x094A, r1
      break;
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    15f0:	10 92 dd 08 	sts	0x08DD, r1
      twi_stop();
    15f4:	d5 de       	rcall	.-598    	; 0x13a0 <twi_stop>
      break;
  }
}
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	7f 91       	pop	r23
    1604:	6f 91       	pop	r22
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	0f 90       	pop	r0
    1610:	0b be       	out	0x3b, r0	; 59
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    161c:	80 91 7b 09 	lds	r24, 0x097B
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	20 91 7c 09 	lds	r18, 0x097C
    1626:	82 1b       	sub	r24, r18
    1628:	91 09       	sbc	r25, r1
    162a:	08 95       	ret

0000162c <_ZN7TwoWire4readEv>:
    162c:	20 91 7c 09 	lds	r18, 0x097C
    1630:	80 91 7b 09 	lds	r24, 0x097B
    1634:	28 17       	cp	r18, r24
    1636:	50 f4       	brcc	.+20     	; 0x164c <_ZN7TwoWire4readEv+0x20>
    1638:	e2 2f       	mov	r30, r18
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	e3 58       	subi	r30, 0x83	; 131
    163e:	f6 4f       	sbci	r31, 0xF6	; 246
    1640:	80 81       	ld	r24, Z
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2f 5f       	subi	r18, 0xFF	; 255
    1646:	20 93 7c 09 	sts	0x097C, r18
    164a:	08 95       	ret
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	08 95       	ret

00001652 <_ZN7TwoWire4peekEv>:
    1652:	e0 91 7c 09 	lds	r30, 0x097C
    1656:	80 91 7b 09 	lds	r24, 0x097B
    165a:	e8 17       	cp	r30, r24
    165c:	30 f4       	brcc	.+12     	; 0x166a <_ZN7TwoWire4peekEv+0x18>
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	e3 58       	subi	r30, 0x83	; 131
    1662:	f6 4f       	sbci	r31, 0xF6	; 246
    1664:	80 81       	ld	r24, Z
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	08 95       	ret
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	08 95       	ret

00001670 <_ZN7TwoWire5flushEv>:
    1670:	08 95       	ret

00001672 <_ZN7TwoWire5writeEPKhj>:
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	7c 01       	movw	r14, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8a 01       	movw	r16, r20
    1688:	20 91 57 09 	lds	r18, 0x0957
    168c:	22 23       	and	r18, r18
    168e:	89 f0       	breq	.+34     	; 0x16b2 <_ZN7TwoWire5writeEPKhj+0x40>
    1690:	eb 01       	movw	r28, r22
    1692:	6b 01       	movw	r12, r22
    1694:	c4 0e       	add	r12, r20
    1696:	d5 1e       	adc	r13, r21
    1698:	cc 15       	cp	r28, r12
    169a:	dd 05       	cpc	r29, r13
    169c:	61 f0       	breq	.+24     	; 0x16b6 <_ZN7TwoWire5writeEPKhj+0x44>
    169e:	69 91       	ld	r22, Y+
    16a0:	d7 01       	movw	r26, r14
    16a2:	ed 91       	ld	r30, X+
    16a4:	fc 91       	ld	r31, X
    16a6:	01 90       	ld	r0, Z+
    16a8:	f0 81       	ld	r31, Z
    16aa:	e0 2d       	mov	r30, r0
    16ac:	c7 01       	movw	r24, r14
    16ae:	19 95       	eicall
    16b0:	f3 cf       	rjmp	.-26     	; 0x1698 <_ZN7TwoWire5writeEPKhj+0x26>
    16b2:	64 2f       	mov	r22, r20
    16b4:	5c de       	rcall	.-840    	; 0x136e <twi_transmit>
    16b6:	c8 01       	movw	r24, r16
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	08 95       	ret

000016ca <_ZN7TwoWire5writeEh>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	1f 92       	push	r1
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	69 83       	std	Y+1, r22	; 0x01
    16d6:	20 91 57 09 	lds	r18, 0x0957
    16da:	22 23       	and	r18, r18
    16dc:	d1 f0       	breq	.+52     	; 0x1712 <_ZN7TwoWire5writeEh+0x48>
    16de:	20 91 58 09 	lds	r18, 0x0958
    16e2:	20 32       	cpi	r18, 0x20	; 32
    16e4:	40 f0       	brcs	.+16     	; 0x16f6 <_ZN7TwoWire5writeEh+0x2c>
    16e6:	21 e0       	ldi	r18, 0x01	; 1
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	33 83       	std	Z+3, r19	; 0x03
    16ee:	22 83       	std	Z+2, r18	; 0x02
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <_ZN7TwoWire5writeEh+0x54>
    16f6:	80 91 59 09 	lds	r24, 0x0959
    16fa:	e8 2f       	mov	r30, r24
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	e6 5a       	subi	r30, 0xA6	; 166
    1700:	f6 4f       	sbci	r31, 0xF6	; 246
    1702:	99 81       	ldd	r25, Y+1	; 0x01
    1704:	90 83       	st	Z, r25
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	80 93 59 09 	sts	0x0959, r24
    170c:	80 93 58 09 	sts	0x0958, r24
    1710:	04 c0       	rjmp	.+8      	; 0x171a <_ZN7TwoWire5writeEh+0x50>
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	2a de       	rcall	.-940    	; 0x136e <twi_transmit>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <_ZN7TwoWireC1Ev>:
    1726:	fc 01       	movw	r30, r24
    1728:	13 82       	std	Z+3, r1	; 0x03
    172a:	12 82       	std	Z+2, r1	; 0x02
    172c:	48 ee       	ldi	r20, 0xE8	; 232
    172e:	53 e0       	ldi	r21, 0x03	; 3
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	44 83       	std	Z+4, r20	; 0x04
    1736:	55 83       	std	Z+5, r21	; 0x05
    1738:	66 83       	std	Z+6, r22	; 0x06
    173a:	77 83       	std	Z+7, r23	; 0x07
    173c:	8c e7       	ldi	r24, 0x7C	; 124
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	08 95       	ret

00001746 <_ZN7TwoWire11requestFromEhhh>:
    1746:	86 2f       	mov	r24, r22
    1748:	41 32       	cpi	r20, 0x21	; 33
    174a:	08 f0       	brcs	.+2      	; 0x174e <_ZN7TwoWire11requestFromEhhh+0x8>
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	6d e7       	ldi	r22, 0x7D	; 125
    1750:	79 e0       	ldi	r23, 0x09	; 9
    1752:	76 dd       	rcall	.-1300   	; 0x1240 <twi_readFrom>
    1754:	10 92 7c 09 	sts	0x097C, r1
    1758:	80 93 7b 09 	sts	0x097B, r24
    175c:	08 95       	ret

0000175e <_ZN7TwoWire11requestFromEhh>:
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	f2 cf       	rjmp	.-28     	; 0x1746 <_ZN7TwoWire11requestFromEhhh>

00001762 <_ZN7TwoWire17beginTransmissionEh>:
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 57 09 	sts	0x0957, r24
    1768:	60 93 7a 09 	sts	0x097A, r22
    176c:	10 92 59 09 	sts	0x0959, r1
    1770:	10 92 58 09 	sts	0x0958, r1
    1774:	08 95       	ret

00001776 <_ZN7TwoWire15endTransmissionEh>:
    1776:	0f 93       	push	r16
    1778:	06 2f       	mov	r16, r22
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	40 91 58 09 	lds	r20, 0x0958
    1780:	6a e5       	ldi	r22, 0x5A	; 90
    1782:	79 e0       	ldi	r23, 0x09	; 9
    1784:	80 91 7a 09 	lds	r24, 0x097A
    1788:	9f dd       	rcall	.-1218   	; 0x12c8 <twi_writeTo>
    178a:	10 92 59 09 	sts	0x0959, r1
    178e:	10 92 58 09 	sts	0x0958, r1
    1792:	10 92 57 09 	sts	0x0957, r1
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <_ZN7TwoWire15endTransmissionEv>:
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	ec cf       	rjmp	.-40     	; 0x1776 <_ZN7TwoWire15endTransmissionEh>

0000179e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    179e:	8b e4       	ldi	r24, 0x4B	; 75
    17a0:	99 e0       	ldi	r25, 0x09	; 9
    17a2:	c1 cf       	rjmp	.-126    	; 0x1726 <_ZN7TwoWireC1Ev>

000017a4 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    17a4:	fc 01       	movw	r30, r24
    17a6:	24 85       	ldd	r18, Z+12	; 0x0c
    17a8:	35 85       	ldd	r19, Z+13	; 0x0d
    17aa:	f9 01       	movw	r30, r18
    17ac:	e0 5c       	subi	r30, 0xC0	; 192
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	32 96       	adiw	r30, 0x02	; 2
    17b6:	20 81       	ld	r18, Z
    17b8:	31 81       	ldd	r19, Z+1	; 0x01
    17ba:	82 1b       	sub	r24, r18
    17bc:	93 0b       	sbc	r25, r19
    17be:	8f 73       	andi	r24, 0x3F	; 63
    17c0:	99 27       	eor	r25, r25
    17c2:	08 95       	ret

000017c4 <_ZN14HardwareSerial4peekEv>:
    17c4:	fc 01       	movw	r30, r24
    17c6:	84 85       	ldd	r24, Z+12	; 0x0c
    17c8:	95 85       	ldd	r25, Z+13	; 0x0d
    17ca:	fc 01       	movw	r30, r24
    17cc:	e0 5c       	subi	r30, 0xC0	; 192
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	40 81       	ld	r20, Z
    17d2:	51 81       	ldd	r21, Z+1	; 0x01
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	20 81       	ld	r18, Z
    17d8:	31 81       	ldd	r19, Z+1	; 0x01
    17da:	42 17       	cp	r20, r18
    17dc:	53 07       	cpc	r21, r19
    17de:	41 f0       	breq	.+16     	; 0x17f0 <_ZN14HardwareSerial4peekEv+0x2c>
    17e0:	20 81       	ld	r18, Z
    17e2:	31 81       	ldd	r19, Z+1	; 0x01
    17e4:	fc 01       	movw	r30, r24
    17e6:	e2 0f       	add	r30, r18
    17e8:	f3 1f       	adc	r31, r19
    17ea:	80 81       	ld	r24, Z
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	08 95       	ret
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
    17f4:	08 95       	ret

000017f6 <_ZN14HardwareSerial4readEv>:
    17f6:	fc 01       	movw	r30, r24
    17f8:	84 85       	ldd	r24, Z+12	; 0x0c
    17fa:	95 85       	ldd	r25, Z+13	; 0x0d
    17fc:	fc 01       	movw	r30, r24
    17fe:	e0 5c       	subi	r30, 0xC0	; 192
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	40 81       	ld	r20, Z
    1804:	51 81       	ldd	r21, Z+1	; 0x01
    1806:	32 96       	adiw	r30, 0x02	; 2
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	42 17       	cp	r20, r18
    180e:	53 07       	cpc	r21, r19
    1810:	81 f0       	breq	.+32     	; 0x1832 <_ZN14HardwareSerial4readEv+0x3c>
    1812:	20 81       	ld	r18, Z
    1814:	31 81       	ldd	r19, Z+1	; 0x01
    1816:	dc 01       	movw	r26, r24
    1818:	a2 0f       	add	r26, r18
    181a:	b3 1f       	adc	r27, r19
    181c:	8c 91       	ld	r24, X
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	2f 73       	andi	r18, 0x3F	; 63
    1828:	33 27       	eor	r19, r19
    182a:	31 83       	std	Z+1, r19	; 0x01
    182c:	20 83       	st	Z, r18
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	08 95       	ret
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f ef       	ldi	r25, 0xFF	; 255
    1836:	08 95       	ret

00001838 <_ZN14HardwareSerial5flushEv>:
    1838:	fc 01       	movw	r30, r24
    183a:	81 a1       	ldd	r24, Z+33	; 0x21
    183c:	88 23       	and	r24, r24
    183e:	29 f0       	breq	.+10     	; 0x184a <_ZN14HardwareSerial5flushEv+0x12>
    1840:	a4 89       	ldd	r26, Z+20	; 0x14
    1842:	b5 89       	ldd	r27, Z+21	; 0x15
    1844:	8c 91       	ld	r24, X
    1846:	86 ff       	sbrs	r24, 6
    1848:	fb cf       	rjmp	.-10     	; 0x1840 <_ZN14HardwareSerial5flushEv+0x8>
    184a:	11 a2       	std	Z+33, r1	; 0x21
    184c:	08 95       	ret

0000184e <_ZN14HardwareSerial5writeEh>:
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	8e 85       	ldd	r24, Y+14	; 0x0e
    1858:	9f 85       	ldd	r25, Y+15	; 0x0f
    185a:	fc 01       	movw	r30, r24
    185c:	e0 5c       	subi	r30, 0xC0	; 192
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	01 90       	ld	r0, Z+
    1862:	f0 81       	ld	r31, Z
    1864:	e0 2d       	mov	r30, r0
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	ef 73       	andi	r30, 0x3F	; 63
    186a:	ff 27       	eor	r31, r31
    186c:	1e 2f       	mov	r17, r30
    186e:	7f 2f       	mov	r23, r31
    1870:	dc 01       	movw	r26, r24
    1872:	ae 5b       	subi	r26, 0xBE	; 190
    1874:	bf 4f       	sbci	r27, 0xFF	; 255
    1876:	21 2f       	mov	r18, r17
    1878:	37 2f       	mov	r19, r23
    187a:	4d 91       	ld	r20, X+
    187c:	5c 91       	ld	r21, X
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	e4 17       	cp	r30, r20
    1882:	f5 07       	cpc	r31, r21
    1884:	c1 f3       	breq	.-16     	; 0x1876 <_ZN14HardwareSerial5writeEh+0x28>
    1886:	fc 01       	movw	r30, r24
    1888:	e0 5c       	subi	r30, 0xC0	; 192
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	40 81       	ld	r20, Z
    188e:	51 81       	ldd	r21, Z+1	; 0x01
    1890:	fc 01       	movw	r30, r24
    1892:	e4 0f       	add	r30, r20
    1894:	f5 1f       	adc	r31, r21
    1896:	60 83       	st	Z, r22
    1898:	ee 85       	ldd	r30, Y+14	; 0x0e
    189a:	ff 85       	ldd	r31, Y+15	; 0x0f
    189c:	e0 5c       	subi	r30, 0xC0	; 192
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	31 83       	std	Z+1, r19	; 0x01
    18a2:	20 83       	st	Z, r18
    18a4:	ee 89       	ldd	r30, Y+22	; 0x16
    18a6:	ff 89       	ldd	r31, Y+23	; 0x17
    18a8:	40 81       	ld	r20, Z
    18aa:	21 e0       	ldi	r18, 0x01	; 1
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	c9 01       	movw	r24, r18
    18b0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <_ZN14HardwareSerial5writeEh+0x6a>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <_ZN14HardwareSerial5writeEh+0x66>
    18bc:	84 2b       	or	r24, r20
    18be:	80 83       	st	Z, r24
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 a3       	std	Y+33, r24	; 0x21
    18c4:	ec 89       	ldd	r30, Y+20	; 0x14
    18c6:	fd 89       	ldd	r31, Y+21	; 0x15
    18c8:	80 81       	ld	r24, Z
    18ca:	80 64       	ori	r24, 0x40	; 64
    18cc:	80 83       	st	Z, r24
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <__vector_25>:
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	80 91 c0 00 	lds	r24, 0x00C0
    18fe:	82 fd       	sbrc	r24, 2
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <__vector_25+0x5c>
    1902:	40 91 c6 00 	lds	r20, 0x00C6
    1906:	80 91 41 0c 	lds	r24, 0x0C41
    190a:	90 91 42 0c 	lds	r25, 0x0C42
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	8f 73       	andi	r24, 0x3F	; 63
    1912:	99 27       	eor	r25, r25
    1914:	20 91 43 0c 	lds	r18, 0x0C43
    1918:	30 91 44 0c 	lds	r19, 0x0C44
    191c:	82 17       	cp	r24, r18
    191e:	93 07       	cpc	r25, r19
    1920:	61 f0       	breq	.+24     	; 0x193a <__vector_25+0x60>
    1922:	e1 e4       	ldi	r30, 0x41	; 65
    1924:	fc e0       	ldi	r31, 0x0C	; 12
    1926:	a0 81       	ld	r26, Z
    1928:	b1 81       	ldd	r27, Z+1	; 0x01
    192a:	af 5f       	subi	r26, 0xFF	; 255
    192c:	b3 4f       	sbci	r27, 0xF3	; 243
    192e:	4c 93       	st	X, r20
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
    1934:	02 c0       	rjmp	.+4      	; 0x193a <__vector_25+0x60>
    1936:	80 91 c6 00 	lds	r24, 0x00C6
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	4f 91       	pop	r20
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0b be       	out	0x3b, r0	; 59
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <__vector_36>:
    195a:	1f 92       	push	r1
    195c:	0f 92       	push	r0
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	0b b6       	in	r0, 0x3b	; 59
    1966:	0f 92       	push	r0
    1968:	2f 93       	push	r18
    196a:	3f 93       	push	r19
    196c:	4f 93       	push	r20
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	80 91 c8 00 	lds	r24, 0x00C8
    197e:	82 fd       	sbrc	r24, 2
    1980:	1a c0       	rjmp	.+52     	; 0x19b6 <__vector_36+0x5c>
    1982:	40 91 ce 00 	lds	r20, 0x00CE
    1986:	80 91 b9 0b 	lds	r24, 0x0BB9
    198a:	90 91 ba 0b 	lds	r25, 0x0BBA
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	8f 73       	andi	r24, 0x3F	; 63
    1992:	99 27       	eor	r25, r25
    1994:	20 91 bb 0b 	lds	r18, 0x0BBB
    1998:	30 91 bc 0b 	lds	r19, 0x0BBC
    199c:	82 17       	cp	r24, r18
    199e:	93 07       	cpc	r25, r19
    19a0:	61 f0       	breq	.+24     	; 0x19ba <__vector_36+0x60>
    19a2:	e9 eb       	ldi	r30, 0xB9	; 185
    19a4:	fb e0       	ldi	r31, 0x0B	; 11
    19a6:	a0 81       	ld	r26, Z
    19a8:	b1 81       	ldd	r27, Z+1	; 0x01
    19aa:	a7 58       	subi	r26, 0x87	; 135
    19ac:	b4 4f       	sbci	r27, 0xF4	; 244
    19ae:	4c 93       	st	X, r20
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <__vector_36+0x60>
    19b6:	80 91 ce 00 	lds	r24, 0x00CE
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	bf 91       	pop	r27
    19c0:	af 91       	pop	r26
    19c2:	9f 91       	pop	r25
    19c4:	8f 91       	pop	r24
    19c6:	4f 91       	pop	r20
    19c8:	3f 91       	pop	r19
    19ca:	2f 91       	pop	r18
    19cc:	0f 90       	pop	r0
    19ce:	0b be       	out	0x3b, r0	; 59
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_51>:
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	0b b6       	in	r0, 0x3b	; 59
    19e6:	0f 92       	push	r0
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	80 91 d0 00 	lds	r24, 0x00D0
    19fe:	82 fd       	sbrc	r24, 2
    1a00:	1a c0       	rjmp	.+52     	; 0x1a36 <__vector_51+0x5c>
    1a02:	40 91 d6 00 	lds	r20, 0x00D6
    1a06:	80 91 31 0b 	lds	r24, 0x0B31
    1a0a:	90 91 32 0b 	lds	r25, 0x0B32
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	8f 73       	andi	r24, 0x3F	; 63
    1a12:	99 27       	eor	r25, r25
    1a14:	20 91 33 0b 	lds	r18, 0x0B33
    1a18:	30 91 34 0b 	lds	r19, 0x0B34
    1a1c:	82 17       	cp	r24, r18
    1a1e:	93 07       	cpc	r25, r19
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <__vector_51+0x60>
    1a22:	e1 e3       	ldi	r30, 0x31	; 49
    1a24:	fb e0       	ldi	r31, 0x0B	; 11
    1a26:	a0 81       	ld	r26, Z
    1a28:	b1 81       	ldd	r27, Z+1	; 0x01
    1a2a:	af 50       	subi	r26, 0x0F	; 15
    1a2c:	b5 4f       	sbci	r27, 0xF5	; 245
    1a2e:	4c 93       	st	X, r20
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <__vector_51+0x60>
    1a36:	80 91 d6 00 	lds	r24, 0x00D6
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0b be       	out	0x3b, r0	; 59
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <__vector_54>:
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	0b b6       	in	r0, 0x3b	; 59
    1a66:	0f 92       	push	r0
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	80 91 30 01 	lds	r24, 0x0130
    1a7e:	82 fd       	sbrc	r24, 2
    1a80:	1a c0       	rjmp	.+52     	; 0x1ab6 <__vector_54+0x5c>
    1a82:	40 91 36 01 	lds	r20, 0x0136
    1a86:	80 91 a9 0a 	lds	r24, 0x0AA9
    1a8a:	90 91 aa 0a 	lds	r25, 0x0AAA
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	8f 73       	andi	r24, 0x3F	; 63
    1a92:	99 27       	eor	r25, r25
    1a94:	20 91 ab 0a 	lds	r18, 0x0AAB
    1a98:	30 91 ac 0a 	lds	r19, 0x0AAC
    1a9c:	82 17       	cp	r24, r18
    1a9e:	93 07       	cpc	r25, r19
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <__vector_54+0x60>
    1aa2:	e9 ea       	ldi	r30, 0xA9	; 169
    1aa4:	fa e0       	ldi	r31, 0x0A	; 10
    1aa6:	a0 81       	ld	r26, Z
    1aa8:	b1 81       	ldd	r27, Z+1	; 0x01
    1aaa:	a7 59       	subi	r26, 0x97	; 151
    1aac:	b5 4f       	sbci	r27, 0xF5	; 245
    1aae:	4c 93       	st	X, r20
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <__vector_54+0x60>
    1ab6:	80 91 36 01 	lds	r24, 0x0136
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	4f 91       	pop	r20
    1ac8:	3f 91       	pop	r19
    1aca:	2f 91       	pop	r18
    1acc:	0f 90       	pop	r0
    1ace:	0b be       	out	0x3b, r0	; 59
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <__vector_26>:
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	0b b6       	in	r0, 0x3b	; 59
    1ae6:	0f 92       	push	r0
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	8f 93       	push	r24
    1aee:	9f 93       	push	r25
    1af0:	af 93       	push	r26
    1af2:	bf 93       	push	r27
    1af4:	ef 93       	push	r30
    1af6:	ff 93       	push	r31
    1af8:	20 91 fd 0b 	lds	r18, 0x0BFD
    1afc:	30 91 fe 0b 	lds	r19, 0x0BFE
    1b00:	80 91 ff 0b 	lds	r24, 0x0BFF
    1b04:	90 91 00 0c 	lds	r25, 0x0C00
    1b08:	28 17       	cp	r18, r24
    1b0a:	39 07       	cpc	r19, r25
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <__vector_26+0x40>
    1b0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 7d       	andi	r24, 0xDF	; 223
    1b16:	80 83       	st	Z, r24
    1b18:	10 c0       	rjmp	.+32     	; 0x1b3a <__vector_26+0x60>
    1b1a:	ef ef       	ldi	r30, 0xFF	; 255
    1b1c:	fb e0       	ldi	r31, 0x0B	; 11
    1b1e:	a0 81       	ld	r26, Z
    1b20:	b1 81       	ldd	r27, Z+1	; 0x01
    1b22:	a3 54       	subi	r26, 0x43	; 67
    1b24:	b4 4f       	sbci	r27, 0xF4	; 244
    1b26:	2c 91       	ld	r18, X
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	8f 73       	andi	r24, 0x3F	; 63
    1b30:	99 27       	eor	r25, r25
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	20 93 c6 00 	sts	0x00C6, r18
    1b3a:	ff 91       	pop	r31
    1b3c:	ef 91       	pop	r30
    1b3e:	bf 91       	pop	r27
    1b40:	af 91       	pop	r26
    1b42:	9f 91       	pop	r25
    1b44:	8f 91       	pop	r24
    1b46:	3f 91       	pop	r19
    1b48:	2f 91       	pop	r18
    1b4a:	0f 90       	pop	r0
    1b4c:	0b be       	out	0x3b, r0	; 59
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_37>:
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	11 24       	eor	r1, r1
    1b62:	0b b6       	in	r0, 0x3b	; 59
    1b64:	0f 92       	push	r0
    1b66:	2f 93       	push	r18
    1b68:	3f 93       	push	r19
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	20 91 75 0b 	lds	r18, 0x0B75
    1b7a:	30 91 76 0b 	lds	r19, 0x0B76
    1b7e:	80 91 77 0b 	lds	r24, 0x0B77
    1b82:	90 91 78 0b 	lds	r25, 0x0B78
    1b86:	28 17       	cp	r18, r24
    1b88:	39 07       	cpc	r19, r25
    1b8a:	31 f4       	brne	.+12     	; 0x1b98 <__vector_37+0x40>
    1b8c:	e9 ec       	ldi	r30, 0xC9	; 201
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7d       	andi	r24, 0xDF	; 223
    1b94:	80 83       	st	Z, r24
    1b96:	10 c0       	rjmp	.+32     	; 0x1bb8 <__vector_37+0x60>
    1b98:	e7 e7       	ldi	r30, 0x77	; 119
    1b9a:	fb e0       	ldi	r31, 0x0B	; 11
    1b9c:	a0 81       	ld	r26, Z
    1b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba0:	ab 5c       	subi	r26, 0xCB	; 203
    1ba2:	b4 4f       	sbci	r27, 0xF4	; 244
    1ba4:	2c 91       	ld	r18, X
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	8f 73       	andi	r24, 0x3F	; 63
    1bae:	99 27       	eor	r25, r25
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	20 93 ce 00 	sts	0x00CE, r18
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0b be       	out	0x3b, r0	; 59
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	0f 90       	pop	r0
    1bd2:	1f 90       	pop	r1
    1bd4:	18 95       	reti

00001bd6 <__vector_52>:
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	0b b6       	in	r0, 0x3b	; 59
    1be2:	0f 92       	push	r0
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	8f 93       	push	r24
    1bea:	9f 93       	push	r25
    1bec:	af 93       	push	r26
    1bee:	bf 93       	push	r27
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
    1bf4:	20 91 ed 0a 	lds	r18, 0x0AED
    1bf8:	30 91 ee 0a 	lds	r19, 0x0AEE
    1bfc:	80 91 ef 0a 	lds	r24, 0x0AEF
    1c00:	90 91 f0 0a 	lds	r25, 0x0AF0
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	31 f4       	brne	.+12     	; 0x1c16 <__vector_52+0x40>
    1c0a:	e1 ed       	ldi	r30, 0xD1	; 209
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7d       	andi	r24, 0xDF	; 223
    1c12:	80 83       	st	Z, r24
    1c14:	10 c0       	rjmp	.+32     	; 0x1c36 <__vector_52+0x60>
    1c16:	ef ee       	ldi	r30, 0xEF	; 239
    1c18:	fa e0       	ldi	r31, 0x0A	; 10
    1c1a:	a0 81       	ld	r26, Z
    1c1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c1e:	a3 55       	subi	r26, 0x53	; 83
    1c20:	b5 4f       	sbci	r27, 0xF5	; 245
    1c22:	2c 91       	ld	r18, X
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	8f 73       	andi	r24, 0x3F	; 63
    1c2c:	99 27       	eor	r25, r25
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    1c32:	20 93 d6 00 	sts	0x00D6, r18
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	3f 91       	pop	r19
    1c44:	2f 91       	pop	r18
    1c46:	0f 90       	pop	r0
    1c48:	0b be       	out	0x3b, r0	; 59
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <__vector_55>:
    1c54:	1f 92       	push	r1
    1c56:	0f 92       	push	r0
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	0f 92       	push	r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	0b b6       	in	r0, 0x3b	; 59
    1c60:	0f 92       	push	r0
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
    1c72:	20 91 65 0a 	lds	r18, 0x0A65
    1c76:	30 91 66 0a 	lds	r19, 0x0A66
    1c7a:	80 91 67 0a 	lds	r24, 0x0A67
    1c7e:	90 91 68 0a 	lds	r25, 0x0A68
    1c82:	28 17       	cp	r18, r24
    1c84:	39 07       	cpc	r19, r25
    1c86:	31 f4       	brne	.+12     	; 0x1c94 <__vector_55+0x40>
    1c88:	e1 e3       	ldi	r30, 0x31	; 49
    1c8a:	f1 e0       	ldi	r31, 0x01	; 1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 7d       	andi	r24, 0xDF	; 223
    1c90:	80 83       	st	Z, r24
    1c92:	10 c0       	rjmp	.+32     	; 0x1cb4 <__vector_55+0x60>
    1c94:	e7 e6       	ldi	r30, 0x67	; 103
    1c96:	fa e0       	ldi	r31, 0x0A	; 10
    1c98:	a0 81       	ld	r26, Z
    1c9a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c9c:	ab 5d       	subi	r26, 0xDB	; 219
    1c9e:	b5 4f       	sbci	r27, 0xF5	; 245
    1ca0:	2c 91       	ld	r18, X
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	8f 73       	andi	r24, 0x3F	; 63
    1caa:	99 27       	eor	r25, r25
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	20 93 36 01 	sts	0x0136, r18
    1cb4:	ff 91       	pop	r31
    1cb6:	ef 91       	pop	r30
    1cb8:	bf 91       	pop	r27
    1cba:	af 91       	pop	r26
    1cbc:	9f 91       	pop	r25
    1cbe:	8f 91       	pop	r24
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0b be       	out	0x3b, r0	; 59
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    1cd2:	8f 92       	push	r8
    1cd4:	9f 92       	push	r9
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	fc 01       	movw	r30, r24
    1cf0:	13 82       	std	Z+3, r1	; 0x03
    1cf2:	12 82       	std	Z+2, r1	; 0x02
    1cf4:	88 ee       	ldi	r24, 0xE8	; 232
    1cf6:	93 e0       	ldi	r25, 0x03	; 3
    1cf8:	a0 e0       	ldi	r26, 0x00	; 0
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	84 83       	std	Z+4, r24	; 0x04
    1cfe:	95 83       	std	Z+5, r25	; 0x05
    1d00:	a6 83       	std	Z+6, r26	; 0x06
    1d02:	b7 83       	std	Z+7, r27	; 0x07
    1d04:	8c e8       	ldi	r24, 0x8C	; 140
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
    1d0c:	75 87       	std	Z+13, r23	; 0x0d
    1d0e:	64 87       	std	Z+12, r22	; 0x0c
    1d10:	57 87       	std	Z+15, r21	; 0x0f
    1d12:	46 87       	std	Z+14, r20	; 0x0e
    1d14:	31 8b       	std	Z+17, r19	; 0x11
    1d16:	20 8b       	std	Z+16, r18	; 0x10
    1d18:	13 8b       	std	Z+19, r17	; 0x13
    1d1a:	02 8b       	std	Z+18, r16	; 0x12
    1d1c:	f5 8a       	std	Z+21, r15	; 0x15
    1d1e:	e4 8a       	std	Z+20, r14	; 0x14
    1d20:	d7 8a       	std	Z+23, r13	; 0x17
    1d22:	c6 8a       	std	Z+22, r12	; 0x16
    1d24:	b1 8e       	std	Z+25, r11	; 0x19
    1d26:	a0 8e       	std	Z+24, r10	; 0x18
    1d28:	93 8e       	std	Z+27, r9	; 0x1b
    1d2a:	82 8e       	std	Z+26, r8	; 0x1a
    1d2c:	88 89       	ldd	r24, Y+16	; 0x10
    1d2e:	84 8f       	std	Z+28, r24	; 0x1c
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	85 8f       	std	Z+29, r24	; 0x1d
    1d34:	8a 89       	ldd	r24, Y+18	; 0x12
    1d36:	86 8f       	std	Z+30, r24	; 0x1e
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	87 8f       	std	Z+31, r24	; 0x1f
    1d3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d3e:	80 a3       	std	Z+32, r24	; 0x20
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	bf 90       	pop	r11
    1d52:	af 90       	pop	r10
    1d54:	9f 90       	pop	r9
    1d56:	8f 90       	pop	r8
    1d58:	08 95       	ret

00001d5a <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1d5a:	5f 92       	push	r5
    1d5c:	6f 92       	push	r6
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1d78:	55 24       	eor	r5, r5
    1d7a:	53 94       	inc	r5
    1d7c:	5f 92       	push	r5
    1d7e:	0f 2e       	mov	r0, r31
    1d80:	f5 e0       	ldi	r31, 0x05	; 5
    1d82:	6f 2e       	mov	r6, r31
    1d84:	f0 2d       	mov	r31, r0
    1d86:	6f 92       	push	r6
    1d88:	0f 2e       	mov	r0, r31
    1d8a:	f7 e0       	ldi	r31, 0x07	; 7
    1d8c:	7f 2e       	mov	r7, r31
    1d8e:	f0 2d       	mov	r31, r0
    1d90:	7f 92       	push	r7
    1d92:	d3 e0       	ldi	r29, 0x03	; 3
    1d94:	df 93       	push	r29
    1d96:	c4 e0       	ldi	r28, 0x04	; 4
    1d98:	cf 93       	push	r28
    1d9a:	0f 2e       	mov	r0, r31
    1d9c:	f6 ec       	ldi	r31, 0xC6	; 198
    1d9e:	8f 2e       	mov	r8, r31
    1da0:	91 2c       	mov	r9, r1
    1da2:	f0 2d       	mov	r31, r0
    1da4:	0f 2e       	mov	r0, r31
    1da6:	f2 ec       	ldi	r31, 0xC2	; 194
    1da8:	af 2e       	mov	r10, r31
    1daa:	b1 2c       	mov	r11, r1
    1dac:	f0 2d       	mov	r31, r0
    1dae:	0f 2e       	mov	r0, r31
    1db0:	f1 ec       	ldi	r31, 0xC1	; 193
    1db2:	cf 2e       	mov	r12, r31
    1db4:	d1 2c       	mov	r13, r1
    1db6:	f0 2d       	mov	r31, r0
    1db8:	0f 2e       	mov	r0, r31
    1dba:	f0 ec       	ldi	r31, 0xC0	; 192
    1dbc:	ef 2e       	mov	r14, r31
    1dbe:	f1 2c       	mov	r15, r1
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	04 ec       	ldi	r16, 0xC4	; 196
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	25 ec       	ldi	r18, 0xC5	; 197
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4d eb       	ldi	r20, 0xBD	; 189
    1dcc:	5b e0       	ldi	r21, 0x0B	; 11
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	7c e0       	ldi	r23, 0x0C	; 12
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	9a e0       	ldi	r25, 0x0A	; 10
    1dd6:	7d df       	rcall	.-262    	; 0x1cd2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    1dd8:	5f 92       	push	r5
    1dda:	6f 92       	push	r6
    1ddc:	7f 92       	push	r7
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	0f 2e       	mov	r0, r31
    1de4:	fe ec       	ldi	r31, 0xCE	; 206
    1de6:	8f 2e       	mov	r8, r31
    1de8:	91 2c       	mov	r9, r1
    1dea:	f0 2d       	mov	r31, r0
    1dec:	0f 2e       	mov	r0, r31
    1dee:	fa ec       	ldi	r31, 0xCA	; 202
    1df0:	af 2e       	mov	r10, r31
    1df2:	b1 2c       	mov	r11, r1
    1df4:	f0 2d       	mov	r31, r0
    1df6:	0f 2e       	mov	r0, r31
    1df8:	f9 ec       	ldi	r31, 0xC9	; 201
    1dfa:	cf 2e       	mov	r12, r31
    1dfc:	d1 2c       	mov	r13, r1
    1dfe:	f0 2d       	mov	r31, r0
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f8 ec       	ldi	r31, 0xC8	; 200
    1e04:	ef 2e       	mov	r14, r31
    1e06:	f1 2c       	mov	r15, r1
    1e08:	f0 2d       	mov	r31, r0
    1e0a:	0c ec       	ldi	r16, 0xCC	; 204
    1e0c:	10 e0       	ldi	r17, 0x00	; 0
    1e0e:	2d ec       	ldi	r18, 0xCD	; 205
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	45 e3       	ldi	r20, 0x35	; 53
    1e14:	5b e0       	ldi	r21, 0x0B	; 11
    1e16:	69 e7       	ldi	r22, 0x79	; 121
    1e18:	7b e0       	ldi	r23, 0x0B	; 11
    1e1a:	81 ee       	ldi	r24, 0xE1	; 225
    1e1c:	99 e0       	ldi	r25, 0x09	; 9
    1e1e:	59 df       	rcall	.-334    	; 0x1cd2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	0f 2e       	mov	r0, r31
    1e2c:	f6 ed       	ldi	r31, 0xD6	; 214
    1e2e:	8f 2e       	mov	r8, r31
    1e30:	91 2c       	mov	r9, r1
    1e32:	f0 2d       	mov	r31, r0
    1e34:	0f 2e       	mov	r0, r31
    1e36:	f2 ed       	ldi	r31, 0xD2	; 210
    1e38:	af 2e       	mov	r10, r31
    1e3a:	b1 2c       	mov	r11, r1
    1e3c:	f0 2d       	mov	r31, r0
    1e3e:	0f 2e       	mov	r0, r31
    1e40:	f1 ed       	ldi	r31, 0xD1	; 209
    1e42:	cf 2e       	mov	r12, r31
    1e44:	d1 2c       	mov	r13, r1
    1e46:	f0 2d       	mov	r31, r0
    1e48:	0f 2e       	mov	r0, r31
    1e4a:	f0 ed       	ldi	r31, 0xD0	; 208
    1e4c:	ef 2e       	mov	r14, r31
    1e4e:	f1 2c       	mov	r15, r1
    1e50:	f0 2d       	mov	r31, r0
    1e52:	04 ed       	ldi	r16, 0xD4	; 212
    1e54:	10 e0       	ldi	r17, 0x00	; 0
    1e56:	25 ed       	ldi	r18, 0xD5	; 213
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4d ea       	ldi	r20, 0xAD	; 173
    1e5c:	5a e0       	ldi	r21, 0x0A	; 10
    1e5e:	61 ef       	ldi	r22, 0xF1	; 241
    1e60:	7a e0       	ldi	r23, 0x0A	; 10
    1e62:	8f eb       	ldi	r24, 0xBF	; 191
    1e64:	99 e0       	ldi	r25, 0x09	; 9
    1e66:	35 df       	rcall	.-406    	; 0x1cd2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1e68:	5f 92       	push	r5
    1e6a:	6f 92       	push	r6
    1e6c:	7f 92       	push	r7
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	0f 2e       	mov	r0, r31
    1e74:	f6 e3       	ldi	r31, 0x36	; 54
    1e76:	8f 2e       	mov	r8, r31
    1e78:	99 24       	eor	r9, r9
    1e7a:	93 94       	inc	r9
    1e7c:	f0 2d       	mov	r31, r0
    1e7e:	0f 2e       	mov	r0, r31
    1e80:	f2 e3       	ldi	r31, 0x32	; 50
    1e82:	af 2e       	mov	r10, r31
    1e84:	bb 24       	eor	r11, r11
    1e86:	b3 94       	inc	r11
    1e88:	f0 2d       	mov	r31, r0
    1e8a:	0f 2e       	mov	r0, r31
    1e8c:	f1 e3       	ldi	r31, 0x31	; 49
    1e8e:	cf 2e       	mov	r12, r31
    1e90:	dd 24       	eor	r13, r13
    1e92:	d3 94       	inc	r13
    1e94:	f0 2d       	mov	r31, r0
    1e96:	0f 2e       	mov	r0, r31
    1e98:	f0 e3       	ldi	r31, 0x30	; 48
    1e9a:	ef 2e       	mov	r14, r31
    1e9c:	ff 24       	eor	r15, r15
    1e9e:	f3 94       	inc	r15
    1ea0:	f0 2d       	mov	r31, r0
    1ea2:	04 e3       	ldi	r16, 0x34	; 52
    1ea4:	11 e0       	ldi	r17, 0x01	; 1
    1ea6:	25 e3       	ldi	r18, 0x35	; 53
    1ea8:	31 e0       	ldi	r19, 0x01	; 1
    1eaa:	45 e2       	ldi	r20, 0x25	; 37
    1eac:	5a e0       	ldi	r21, 0x0A	; 10
    1eae:	69 e6       	ldi	r22, 0x69	; 105
    1eb0:	7a e0       	ldi	r23, 0x0A	; 10
    1eb2:	8d e9       	ldi	r24, 0x9D	; 157
    1eb4:	99 e0       	ldi	r25, 0x09	; 9
    1eb6:	0d df       	rcall	.-486    	; 0x1cd2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    1eb8:	8d b7       	in	r24, 0x3d	; 61
    1eba:	9e b7       	in	r25, 0x3e	; 62
    1ebc:	44 96       	adiw	r24, 0x14	; 20
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	9e bf       	out	0x3e, r25	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	8d bf       	out	0x3d, r24	; 61
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	af 90       	pop	r10
    1edc:	9f 90       	pop	r9
    1ede:	8f 90       	pop	r8
    1ee0:	7f 90       	pop	r7
    1ee2:	6f 90       	pop	r6
    1ee4:	5f 90       	pop	r5
    1ee6:	08 95       	ret

00001ee8 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	6c 01       	movw	r12, r24
    1efa:	41 15       	cp	r20, r1
    1efc:	51 05       	cpc	r21, r1
    1efe:	b1 f0       	breq	.+44     	; 0x1f2c <_ZN5Print5writeEPKhj+0x44>
    1f00:	06 2f       	mov	r16, r22
    1f02:	17 2f       	mov	r17, r23
    1f04:	ea 01       	movw	r28, r20
    1f06:	e1 2c       	mov	r14, r1
    1f08:	f1 2c       	mov	r15, r1
    1f0a:	d8 01       	movw	r26, r16
    1f0c:	6d 91       	ld	r22, X+
    1f0e:	8d 01       	movw	r16, r26
    1f10:	d6 01       	movw	r26, r12
    1f12:	ed 91       	ld	r30, X+
    1f14:	fc 91       	ld	r31, X
    1f16:	01 90       	ld	r0, Z+
    1f18:	f0 81       	ld	r31, Z
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	c6 01       	movw	r24, r12
    1f1e:	19 95       	eicall
    1f20:	e8 0e       	add	r14, r24
    1f22:	f9 1e       	adc	r15, r25
    1f24:	21 97       	sbiw	r28, 0x01	; 1
    1f26:	20 97       	sbiw	r28, 0x00	; 0
    1f28:	81 f7       	brne	.-32     	; 0x1f0a <_ZN5Print5writeEPKhj+0x22>
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <_ZN5Print5writeEPKhj+0x48>
    1f2c:	e1 2c       	mov	r14, r1
    1f2e:	f1 2c       	mov	r15, r1
    1f30:	c7 01       	movw	r24, r14
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	08 95       	ret

00001f44 <_ZN5Print5printEPKc>:
    1f44:	61 15       	cp	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <_ZN5Print5printEPKc+0x26>
    1f4a:	fb 01       	movw	r30, r22
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	00 20       	and	r0, r0
    1f50:	e9 f7       	brne	.-6      	; 0x1f4c <_ZN5Print5printEPKc+0x8>
    1f52:	31 97       	sbiw	r30, 0x01	; 1
    1f54:	af 01       	movw	r20, r30
    1f56:	46 1b       	sub	r20, r22
    1f58:	57 0b       	sbc	r21, r23
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	ed 91       	ld	r30, X+
    1f5e:	fc 91       	ld	r31, X
    1f60:	02 80       	ldd	r0, Z+2	; 0x02
    1f62:	f3 81       	ldd	r31, Z+3	; 0x03
    1f64:	e0 2d       	mov	r30, r0
    1f66:	19 95       	eicall
    1f68:	08 95       	ret
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	08 95       	ret

00001f70 <_ZN5Print5printEc>:
    1f70:	dc 01       	movw	r26, r24
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	01 90       	ld	r0, Z+
    1f78:	f0 81       	ld	r31, Z
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	19 95       	eicall
    1f7e:	08 95       	ret

00001f80 <_ZN5Print7printlnEv>:
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	ec 01       	movw	r28, r24
    1f8a:	6d e0       	ldi	r22, 0x0D	; 13
    1f8c:	f1 df       	rcall	.-30     	; 0x1f70 <_ZN5Print5printEc>
    1f8e:	8c 01       	movw	r16, r24
    1f90:	6a e0       	ldi	r22, 0x0A	; 10
    1f92:	ce 01       	movw	r24, r28
    1f94:	ed df       	rcall	.-38     	; 0x1f70 <_ZN5Print5printEc>
    1f96:	80 0f       	add	r24, r16
    1f98:	91 1f       	adc	r25, r17
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	08 95       	ret

00001fa4 <_ZN5Print7printlnEPKc>:
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	ca df       	rcall	.-108    	; 0x1f44 <_ZN5Print5printEPKc>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	e5 df       	rcall	.-54     	; 0x1f80 <_ZN5Print7printlnEv>
    1fb6:	80 0f       	add	r24, r16
    1fb8:	91 1f       	adc	r25, r17
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <_ZN5Print11printNumberEmh>:
    1fc4:	6f 92       	push	r6
    1fc6:	7f 92       	push	r7
    1fc8:	8f 92       	push	r8
    1fca:	9f 92       	push	r9
    1fcc:	af 92       	push	r10
    1fce:	bf 92       	push	r11
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	a1 97       	sbiw	r28, 0x21	; 33
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	6c 01       	movw	r12, r24
    1ff2:	74 2e       	mov	r7, r20
    1ff4:	35 2f       	mov	r19, r21
    1ff6:	86 2f       	mov	r24, r22
    1ff8:	97 2f       	mov	r25, r23
    1ffa:	62 2e       	mov	r6, r18
    1ffc:	19 a2       	std	Y+33, r1	; 0x21
    1ffe:	21 e0       	ldi	r18, 0x01	; 1
    2000:	26 15       	cp	r18, r6
    2002:	20 f0       	brcs	.+8      	; 0x200c <_ZN5Print11printNumberEmh+0x48>
    2004:	0f 2e       	mov	r0, r31
    2006:	fa e0       	ldi	r31, 0x0A	; 10
    2008:	6f 2e       	mov	r6, r31
    200a:	f0 2d       	mov	r31, r0
    200c:	7e 01       	movw	r14, r28
    200e:	a1 e2       	ldi	r26, 0x21	; 33
    2010:	ea 0e       	add	r14, r26
    2012:	f1 1c       	adc	r15, r1
    2014:	86 2c       	mov	r8, r6
    2016:	91 2c       	mov	r9, r1
    2018:	a1 2c       	mov	r10, r1
    201a:	b1 2c       	mov	r11, r1
    201c:	67 2d       	mov	r22, r7
    201e:	73 2f       	mov	r23, r19
    2020:	a5 01       	movw	r20, r10
    2022:	94 01       	movw	r18, r8
    2024:	1f d1       	rcall	.+574    	; 0x2264 <__udivmodsi4>
    2026:	e2 2f       	mov	r30, r18
    2028:	73 2f       	mov	r23, r19
    202a:	02 2f       	mov	r16, r18
    202c:	13 2f       	mov	r17, r19
    202e:	24 2f       	mov	r18, r20
    2030:	35 2f       	mov	r19, r21
    2032:	f7 2d       	mov	r31, r7
    2034:	6e 9e       	mul	r6, r30
    2036:	f0 19       	sub	r31, r0
    2038:	11 24       	eor	r1, r1
    203a:	b1 e0       	ldi	r27, 0x01	; 1
    203c:	eb 1a       	sub	r14, r27
    203e:	f1 08       	sbc	r15, r1
    2040:	fa 30       	cpi	r31, 0x0A	; 10
    2042:	10 f4       	brcc	.+4      	; 0x2048 <_ZN5Print11printNumberEmh+0x84>
    2044:	f0 5d       	subi	r31, 0xD0	; 208
    2046:	01 c0       	rjmp	.+2      	; 0x204a <_ZN5Print11printNumberEmh+0x86>
    2048:	f9 5c       	subi	r31, 0xC9	; 201
    204a:	d7 01       	movw	r26, r14
    204c:	fc 93       	st	X, r31
    204e:	01 2b       	or	r16, r17
    2050:	02 2b       	or	r16, r18
    2052:	03 2b       	or	r16, r19
    2054:	29 f0       	breq	.+10     	; 0x2060 <_ZN5Print11printNumberEmh+0x9c>
    2056:	7e 2e       	mov	r7, r30
    2058:	37 2f       	mov	r19, r23
    205a:	84 2f       	mov	r24, r20
    205c:	95 2f       	mov	r25, r21
    205e:	de cf       	rjmp	.-68     	; 0x201c <_ZN5Print11printNumberEmh+0x58>
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	91 f0       	breq	.+36     	; 0x208a <_ZN5Print11printNumberEmh+0xc6>
    2066:	f7 01       	movw	r30, r14
    2068:	01 90       	ld	r0, Z+
    206a:	00 20       	and	r0, r0
    206c:	e9 f7       	brne	.-6      	; 0x2068 <_ZN5Print11printNumberEmh+0xa4>
    206e:	31 97       	sbiw	r30, 0x01	; 1
    2070:	af 01       	movw	r20, r30
    2072:	4e 19       	sub	r20, r14
    2074:	5f 09       	sbc	r21, r15
    2076:	d6 01       	movw	r26, r12
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	02 80       	ldd	r0, Z+2	; 0x02
    207e:	f3 81       	ldd	r31, Z+3	; 0x03
    2080:	e0 2d       	mov	r30, r0
    2082:	b7 01       	movw	r22, r14
    2084:	c6 01       	movw	r24, r12
    2086:	19 95       	eicall
    2088:	02 c0       	rjmp	.+4      	; 0x208e <_ZN5Print11printNumberEmh+0xca>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a1 96       	adiw	r28, 0x21	; 33
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	af 90       	pop	r10
    20ae:	9f 90       	pop	r9
    20b0:	8f 90       	pop	r8
    20b2:	7f 90       	pop	r7
    20b4:	6f 90       	pop	r6
    20b6:	08 95       	ret

000020b8 <_ZN5Print5printEli>:
    20b8:	cf 92       	push	r12
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	ec 01       	movw	r28, r24
    20ca:	6a 01       	movw	r12, r20
    20cc:	7b 01       	movw	r14, r22
    20ce:	21 15       	cp	r18, r1
    20d0:	31 05       	cpc	r19, r1
    20d2:	41 f4       	brne	.+16     	; 0x20e4 <_ZN5Print5printEli+0x2c>
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	01 90       	ld	r0, Z+
    20da:	f0 81       	ld	r31, Z
    20dc:	e0 2d       	mov	r30, r0
    20de:	64 2f       	mov	r22, r20
    20e0:	19 95       	eicall
    20e2:	19 c0       	rjmp	.+50     	; 0x2116 <_ZN5Print5printEli+0x5e>
    20e4:	2a 30       	cpi	r18, 0x0A	; 10
    20e6:	31 05       	cpc	r19, r1
    20e8:	a9 f4       	brne	.+42     	; 0x2114 <_ZN5Print5printEli+0x5c>
    20ea:	77 23       	and	r23, r23
    20ec:	84 f4       	brge	.+32     	; 0x210e <_ZN5Print5printEli+0x56>
    20ee:	6d e2       	ldi	r22, 0x2D	; 45
    20f0:	3f df       	rcall	.-386    	; 0x1f70 <_ZN5Print5printEc>
    20f2:	8c 01       	movw	r16, r24
    20f4:	44 27       	eor	r20, r20
    20f6:	55 27       	eor	r21, r21
    20f8:	ba 01       	movw	r22, r20
    20fa:	4c 19       	sub	r20, r12
    20fc:	5d 09       	sbc	r21, r13
    20fe:	6e 09       	sbc	r22, r14
    2100:	7f 09       	sbc	r23, r15
    2102:	2a e0       	ldi	r18, 0x0A	; 10
    2104:	ce 01       	movw	r24, r28
    2106:	5e df       	rcall	.-324    	; 0x1fc4 <_ZN5Print11printNumberEmh>
    2108:	80 0f       	add	r24, r16
    210a:	91 1f       	adc	r25, r17
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <_ZN5Print5printEli+0x5e>
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	59 df       	rcall	.-334    	; 0x1fc4 <_ZN5Print11printNumberEmh>
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <_ZN5Print5printEli+0x5e>
    2114:	57 df       	rcall	.-338    	; 0x1fc4 <_ZN5Print11printNumberEmh>
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	08 95       	ret

00002128 <_ZN5Print5printEii>:
    2128:	9a 01       	movw	r18, r20
    212a:	ab 01       	movw	r20, r22
    212c:	66 27       	eor	r22, r22
    212e:	57 fd       	sbrc	r21, 7
    2130:	60 95       	com	r22
    2132:	76 2f       	mov	r23, r22
    2134:	c1 cf       	rjmp	.-126    	; 0x20b8 <_ZN5Print5printEli>
    2136:	08 95       	ret

00002138 <_ZN5Print7printlnEii>:
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
    2142:	9a 01       	movw	r18, r20
    2144:	ab 01       	movw	r20, r22
    2146:	66 27       	eor	r22, r22
    2148:	57 fd       	sbrc	r21, 7
    214a:	60 95       	com	r22
    214c:	76 2f       	mov	r23, r22
    214e:	b4 df       	rcall	.-152    	; 0x20b8 <_ZN5Print5printEli>
    2150:	8c 01       	movw	r16, r24
    2152:	ce 01       	movw	r24, r28
    2154:	15 df       	rcall	.-470    	; 0x1f80 <_ZN5Print7printlnEv>
    2156:	80 0f       	add	r24, r16
    2158:	91 1f       	adc	r25, r17
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <_ZN5Print5printEmi>:
    2164:	21 15       	cp	r18, r1
    2166:	31 05       	cpc	r19, r1
    2168:	49 f4       	brne	.+18     	; 0x217c <_ZN5Print5printEmi+0x18>
    216a:	dc 01       	movw	r26, r24
    216c:	ed 91       	ld	r30, X+
    216e:	fc 91       	ld	r31, X
    2170:	01 90       	ld	r0, Z+
    2172:	f0 81       	ld	r31, Z
    2174:	e0 2d       	mov	r30, r0
    2176:	64 2f       	mov	r22, r20
    2178:	19 95       	eicall
    217a:	08 95       	ret
    217c:	23 cf       	rjmp	.-442    	; 0x1fc4 <_ZN5Print11printNumberEmh>
    217e:	08 95       	ret

00002180 <_ZN5Print5printEhi>:
    2180:	9a 01       	movw	r18, r20
    2182:	46 2f       	mov	r20, r22
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	ec cf       	rjmp	.-40     	; 0x2164 <_ZN5Print5printEmi>
    218c:	08 95       	ret

0000218e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	ec 01       	movw	r28, r24
    2198:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    219a:	46 2f       	mov	r20, r22
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	e0 df       	rcall	.-64     	; 0x2164 <_ZN5Print5printEmi>
    21a4:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    21a6:	ce 01       	movw	r24, r28
    21a8:	eb de       	rcall	.-554    	; 0x1f80 <_ZN5Print7printlnEv>
  return n;
}
    21aa:	80 0f       	add	r24, r16
    21ac:	91 1f       	adc	r25, r17
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    21ce:	80 91 46 0c 	lds	r24, 0x0C46
    21d2:	90 91 47 0c 	lds	r25, 0x0C47
    21d6:	a0 91 48 0c 	lds	r26, 0x0C48
    21da:	b0 91 49 0c 	lds	r27, 0x0C49
	unsigned char f = timer0_fract;
    21de:	30 91 45 0c 	lds	r19, 0x0C45

	m += MILLIS_INC;
	f += FRACT_INC;
    21e2:	23 e0       	ldi	r18, 0x03	; 3
    21e4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    21e6:	2d 37       	cpi	r18, 0x7D	; 125
    21e8:	20 f4       	brcc	.+8      	; 0x21f2 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	a1 1d       	adc	r26, r1
    21ee:	b1 1d       	adc	r27, r1
    21f0:	05 c0       	rjmp	.+10     	; 0x21fc <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    21f2:	26 e8       	ldi	r18, 0x86	; 134
    21f4:	23 0f       	add	r18, r19
		m += 1;
    21f6:	02 96       	adiw	r24, 0x02	; 2
    21f8:	a1 1d       	adc	r26, r1
    21fa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    21fc:	20 93 45 0c 	sts	0x0C45, r18
	timer0_millis = m;
    2200:	80 93 46 0c 	sts	0x0C46, r24
    2204:	90 93 47 0c 	sts	0x0C47, r25
    2208:	a0 93 48 0c 	sts	0x0C48, r26
    220c:	b0 93 49 0c 	sts	0x0C49, r27
	timer0_overflow_count++;
    2210:	80 91 4a 0c 	lds	r24, 0x0C4A
    2214:	90 91 4b 0c 	lds	r25, 0x0C4B
    2218:	a0 91 4c 0c 	lds	r26, 0x0C4C
    221c:	b0 91 4d 0c 	lds	r27, 0x0C4D
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	a1 1d       	adc	r26, r1
    2224:	b1 1d       	adc	r27, r1
    2226:	80 93 4a 0c 	sts	0x0C4A, r24
    222a:	90 93 4b 0c 	sts	0x0C4B, r25
    222e:	a0 93 4c 0c 	sts	0x0C4C, r26
    2232:	b0 93 4d 0c 	sts	0x0C4D, r27
}
    2236:	bf 91       	pop	r27
    2238:	af 91       	pop	r26
    223a:	9f 91       	pop	r25
    223c:	8f 91       	pop	r24
    223e:	3f 91       	pop	r19
    2240:	2f 91       	pop	r18
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	0f 90       	pop	r0
    2248:	1f 90       	pop	r1
    224a:	18 95       	reti

0000224c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    224c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    224e:	f8 94       	cli
	m = timer0_millis;
    2250:	60 91 46 0c 	lds	r22, 0x0C46
    2254:	70 91 47 0c 	lds	r23, 0x0C47
    2258:	80 91 48 0c 	lds	r24, 0x0C48
    225c:	90 91 49 0c 	lds	r25, 0x0C49
	SREG = oldSREG;
    2260:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2262:	08 95       	ret

00002264 <__udivmodsi4>:
    2264:	a1 e2       	ldi	r26, 0x21	; 33
    2266:	1a 2e       	mov	r1, r26
    2268:	aa 1b       	sub	r26, r26
    226a:	bb 1b       	sub	r27, r27
    226c:	fd 01       	movw	r30, r26
    226e:	0d c0       	rjmp	.+26     	; 0x228a <__udivmodsi4_ep>

00002270 <__udivmodsi4_loop>:
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	ee 1f       	adc	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	a2 17       	cp	r26, r18
    227a:	b3 07       	cpc	r27, r19
    227c:	e4 07       	cpc	r30, r20
    227e:	f5 07       	cpc	r31, r21
    2280:	20 f0       	brcs	.+8      	; 0x228a <__udivmodsi4_ep>
    2282:	a2 1b       	sub	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	e4 0b       	sbc	r30, r20
    2288:	f5 0b       	sbc	r31, r21

0000228a <__udivmodsi4_ep>:
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	1a 94       	dec	r1
    2294:	69 f7       	brne	.-38     	; 0x2270 <__udivmodsi4_loop>
    2296:	60 95       	com	r22
    2298:	70 95       	com	r23
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	bd 01       	movw	r22, r26
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret

000022a8 <__tablejump_elpm__>:
    22a8:	07 90       	elpm	r0, Z+
    22aa:	f6 91       	elpm	r31, Z
    22ac:	e0 2d       	mov	r30, r0
    22ae:	19 94       	eijmp

000022b0 <_exit>:
    22b0:	f8 94       	cli

000022b2 <__stop_program>:
    22b2:	ff cf       	rjmp	.-2      	; 0x22b2 <__stop_program>
